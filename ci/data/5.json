[{"startedTestsAt":"2021-01-12T13:37:59.813Z","endedTestsAt":"2021-01-12T13:45:14.364Z","totalDuration":399195,"totalSuites":197,"totalTests":492,"totalFailed":0,"totalPassed":492,"totalPending":0,"totalSkipped":0,"runs":[{"stats":{"suites":170,"tests":408,"passes":408,"pending":0,"skipped":0,"failures":0,"duration":207417,"startedAt":"2021-01-12T13:37:59.813Z","endedAt":"2021-01-12T13:41:27.230Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":170,"tests":408,"passes":408,"pending":0,"failures":0,"start":"2021-01-12T13:37:59.815Z","end":"2021-01-12T13:41:27.238Z","duration":207423},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    breakpoints = workspace.getTopbar().getBreakpoints();\n    canvas = workspace.getCanvas();\n    rightPanel = workspace.getRightPanel();\n    stylesTab = rightPanel.getStylesTab();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to main breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MAIN_SPACING_SIZE, \"px on Main breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MAIN_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to medium breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to Medium breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MEDIUM);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(MEDIUM_SPACING_SIZE, \"px on Medium breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(MEDIUM_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to main breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_MAIN);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step('Change to small breakpoint');\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to small breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_SMALL);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(SMALL_SPACING_SIZE, \"px on small breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(SMALL_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              cy.step('Change to tiny breakpoint');\n              breakpoints.setBreakpoint(_breakpointIds.BREAKPOINT_ID_TINY);\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n              cy.step(\"Set \".concat(spacingType, \" \").concat(side, \" equal to \").concat(TINY_SPACING_SIZE, \"px on tiny breakpoint\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              editor.valueInput.unitInput.clear().type(\"\".concat(TINY_SPACING_SIZE, \"px{enter}\"));\n              editor.close();\n            }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n              cy.step('Select element on the canvas');\n              canvas.selectElement(targetTestElement);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n                cy.step(\"Change to \".concat(breakpointId, \" breakpoint\"));\n                breakpoints.setBreakpoint(breakpointId);\n              }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n                cy.step('Select element on the canvas');\n                canvas.selectElement(targetTestElement);\n              }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint before setting new value on main breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13051,"startedAt":"2021-01-12T13:38:06.569Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":522,"startedAt":"2021-01-12T13:38:19.632Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint before setting new value on main breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":452,"startedAt":"2021-01-12T13:38:20.156Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":378,"startedAt":"2021-01-12T13:38:20.610Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint before setting new value on main breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":396,"startedAt":"2021-01-12T13:38:20.990Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":437,"startedAt":"2021-01-12T13:38:21.387Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on main breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":643,"startedAt":"2021-01-12T13:38:21.826Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":591,"startedAt":"2021-01-12T13:38:22.470Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Main breakpoint after setting new value on main breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2327,"startedAt":"2021-01-12T13:38:23.063Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":891,"startedAt":"2021-01-12T13:38:25.392Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint before setting new value on medium breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":453,"startedAt":"2021-01-12T13:38:26.285Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint before setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":113,"startedAt":"2021-01-12T13:38:26.739Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":338,"startedAt":"2021-01-12T13:38:26.853Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint before setting new value on medium breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:38:27.192Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint before setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":132,"startedAt":"2021-01-12T13:38:27.485Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":320,"startedAt":"2021-01-12T13:38:27.619Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on medium breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":476,"startedAt":"2021-01-12T13:38:27.941Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":473,"startedAt":"2021-01-12T13:38:28.419Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":313,"startedAt":"2021-01-12T13:38:28.895Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Medium breakpoint after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1611,"startedAt":"2021-01-12T13:38:29.210Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":623,"startedAt":"2021-01-12T13:38:30.822Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Main breakpoint after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":419,"startedAt":"2021-01-12T13:38:31.446Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Main breakpoint after setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":130,"startedAt":"2021-01-12T13:38:31.866Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":306,"startedAt":"2021-01-12T13:38:31.997Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint id before setting new value on small breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":302,"startedAt":"2021-01-12T13:38:32.304Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint id before setting new value on small breakpoint","padding left should have value 20"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":142,"startedAt":"2021-01-12T13:38:32.607Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":357,"startedAt":"2021-01-12T13:38:32.750Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint id before setting new value on small breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":274,"startedAt":"2021-01-12T13:38:33.109Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint id before setting new value on small breakpoint","padding left should have value 20"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":120,"startedAt":"2021-01-12T13:38:33.384Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":328,"startedAt":"2021-01-12T13:38:33.505Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Small breakpoint after setting new value on small breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1713,"startedAt":"2021-01-12T13:38:33.835Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":344,"startedAt":"2021-01-12T13:38:35.549Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint id after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":320,"startedAt":"2021-01-12T13:38:35.894Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint id after setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":134,"startedAt":"2021-01-12T13:38:36.215Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:38:36.350Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint id after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":309,"startedAt":"2021-01-12T13:38:36.646Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint id after setting new value on medium breakpoint","padding left should have value 20"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":183,"startedAt":"2021-01-12T13:38:36.956Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":662,"startedAt":"2021-01-12T13:38:37.141Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on tiny breakpoint","padding left should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":302,"startedAt":"2021-01-12T13:38:37.804Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":286,"startedAt":"2021-01-12T13:38:38.108Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Tiny breakpoint after setting new value on tiny breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1242,"startedAt":"2021-01-12T13:38:38.395Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":425,"startedAt":"2021-01-12T13:38:39.638Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":341,"startedAt":"2021-01-12T13:38:40.064Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint after setting new value on medium breakpoint","padding left should have value 10"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":94,"startedAt":"2021-01-12T13:38:40.406Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":615,"startedAt":"2021-01-12T13:38:40.501Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":298,"startedAt":"2021-01-12T13:38:41.117Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint after setting new value on medium breakpoint","padding left should have value 20"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":190,"startedAt":"2021-01-12T13:38:41.416Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":362,"startedAt":"2021-01-12T13:38:41.607Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint after setting new value on medium breakpoint","padding left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":298,"startedAt":"2021-01-12T13:38:41.971Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint after setting new value on medium breakpoint","padding left should have value 30"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":131,"startedAt":"2021-01-12T13:38:42.270Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding left","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":296,"startedAt":"2021-01-12T13:38:42.402Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint before setting new value on main breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":326,"startedAt":"2021-01-12T13:38:42.700Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":314,"startedAt":"2021-01-12T13:38:43.028Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint before setting new value on main breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":686,"startedAt":"2021-01-12T13:38:43.343Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":625,"startedAt":"2021-01-12T13:38:44.030Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint before setting new value on main breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":405,"startedAt":"2021-01-12T13:38:44.657Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":311,"startedAt":"2021-01-12T13:38:45.063Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on main breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":287,"startedAt":"2021-01-12T13:38:45.375Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:38:45.663Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Main breakpoint after setting new value on main breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1751,"startedAt":"2021-01-12T13:38:45.959Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":549,"startedAt":"2021-01-12T13:38:47.712Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint before setting new value on medium breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":978,"startedAt":"2021-01-12T13:38:48.262Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint before setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":122,"startedAt":"2021-01-12T13:38:49.241Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":314,"startedAt":"2021-01-12T13:38:49.365Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint before setting new value on medium breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":344,"startedAt":"2021-01-12T13:38:49.680Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint before setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:38:50.025Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":355,"startedAt":"2021-01-12T13:38:50.144Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on medium breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:38:50.501Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":124,"startedAt":"2021-01-12T13:38:50.805Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:38:50.930Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Medium breakpoint after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2020,"startedAt":"2021-01-12T13:38:51.234Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":340,"startedAt":"2021-01-12T13:38:53.255Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Main breakpoint after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":342,"startedAt":"2021-01-12T13:38:53.596Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Main breakpoint after setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":110,"startedAt":"2021-01-12T13:38:53.939Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":454,"startedAt":"2021-01-12T13:38:54.050Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint id before setting new value on small breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":313,"startedAt":"2021-01-12T13:38:54.506Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint id before setting new value on small breakpoint","padding right should have value 21"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":236,"startedAt":"2021-01-12T13:38:54.821Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1182,"startedAt":"2021-01-12T13:38:55.058Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint id before setting new value on small breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":298,"startedAt":"2021-01-12T13:38:56.241Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint id before setting new value on small breakpoint","padding right should have value 21"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":105,"startedAt":"2021-01-12T13:38:56.540Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:38:56.646Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Small breakpoint after setting new value on small breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1290,"startedAt":"2021-01-12T13:38:56.942Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":335,"startedAt":"2021-01-12T13:38:58.233Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint id after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":447,"startedAt":"2021-01-12T13:38:58.569Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint id after setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":120,"startedAt":"2021-01-12T13:38:59.017Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":272,"startedAt":"2021-01-12T13:38:59.139Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint id after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":312,"startedAt":"2021-01-12T13:38:59.412Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint id after setting new value on medium breakpoint","padding right should have value 21"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":107,"startedAt":"2021-01-12T13:38:59.725Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":338,"startedAt":"2021-01-12T13:38:59.833Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on tiny breakpoint","padding right should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:39:00.172Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":300,"startedAt":"2021-01-12T13:39:00.464Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Tiny breakpoint after setting new value on tiny breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1612,"startedAt":"2021-01-12T13:39:00.765Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":783,"startedAt":"2021-01-12T13:39:02.378Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":332,"startedAt":"2021-01-12T13:39:03.163Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint after setting new value on medium breakpoint","padding right should have value 11"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":132,"startedAt":"2021-01-12T13:39:03.496Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":325,"startedAt":"2021-01-12T13:39:03.630Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":312,"startedAt":"2021-01-12T13:39:03.956Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint after setting new value on medium breakpoint","padding right should have value 21"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":113,"startedAt":"2021-01-12T13:39:04.269Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":777,"startedAt":"2021-01-12T13:39:04.383Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint after setting new value on medium breakpoint","padding right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":554,"startedAt":"2021-01-12T13:39:05.163Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint after setting new value on medium breakpoint","padding right should have value 31"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":392,"startedAt":"2021-01-12T13:39:05.718Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding right","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":290,"startedAt":"2021-01-12T13:39:06.111Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint before setting new value on main breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":306,"startedAt":"2021-01-12T13:39:06.403Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":325,"startedAt":"2021-01-12T13:39:06.710Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint before setting new value on main breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":384,"startedAt":"2021-01-12T13:39:07.036Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":873,"startedAt":"2021-01-12T13:39:07.421Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint before setting new value on main breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":285,"startedAt":"2021-01-12T13:39:08.295Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":394,"startedAt":"2021-01-12T13:39:08.581Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on main breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":309,"startedAt":"2021-01-12T13:39:08.976Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:39:09.286Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Main breakpoint after setting new value on main breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2488,"startedAt":"2021-01-12T13:39:09.582Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":343,"startedAt":"2021-01-12T13:39:12.072Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint before setting new value on medium breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":334,"startedAt":"2021-01-12T13:39:12.417Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint before setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":101,"startedAt":"2021-01-12T13:39:12.752Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":284,"startedAt":"2021-01-12T13:39:12.854Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint before setting new value on medium breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:39:13.139Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint before setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":117,"startedAt":"2021-01-12T13:39:13.422Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":353,"startedAt":"2021-01-12T13:39:13.540Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on medium breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":299,"startedAt":"2021-01-12T13:39:13.894Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":180,"startedAt":"2021-01-12T13:39:14.194Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:39:14.376Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Medium breakpoint after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1403,"startedAt":"2021-01-12T13:39:14.680Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":344,"startedAt":"2021-01-12T13:39:16.084Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Main breakpoint after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":350,"startedAt":"2021-01-12T13:39:16.429Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Main breakpoint after setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":116,"startedAt":"2021-01-12T13:39:16.781Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":296,"startedAt":"2021-01-12T13:39:16.898Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint id before setting new value on small breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":610,"startedAt":"2021-01-12T13:39:17.195Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint id before setting new value on small breakpoint","padding top should have value 22"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":702,"startedAt":"2021-01-12T13:39:17.806Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":506,"startedAt":"2021-01-12T13:39:18.509Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint id before setting new value on small breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":296,"startedAt":"2021-01-12T13:39:19.017Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint id before setting new value on small breakpoint","padding top should have value 22"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":117,"startedAt":"2021-01-12T13:39:19.314Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":287,"startedAt":"2021-01-12T13:39:19.432Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Small breakpoint after setting new value on small breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1249,"startedAt":"2021-01-12T13:39:19.720Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1085,"startedAt":"2021-01-12T13:39:20.971Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint id after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":813,"startedAt":"2021-01-12T13:39:22.057Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint id after setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":119,"startedAt":"2021-01-12T13:39:22.871Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":287,"startedAt":"2021-01-12T13:39:22.991Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint id after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":301,"startedAt":"2021-01-12T13:39:23.279Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint id after setting new value on medium breakpoint","padding top should have value 22"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":135,"startedAt":"2021-01-12T13:39:23.581Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":348,"startedAt":"2021-01-12T13:39:23.719Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on tiny breakpoint","padding top should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":293,"startedAt":"2021-01-12T13:39:24.069Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":305,"startedAt":"2021-01-12T13:39:24.363Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Tiny breakpoint after setting new value on tiny breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1240,"startedAt":"2021-01-12T13:39:24.669Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":700,"startedAt":"2021-01-12T13:39:25.910Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":687,"startedAt":"2021-01-12T13:39:26.611Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint after setting new value on medium breakpoint","padding top should have value 12"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":111,"startedAt":"2021-01-12T13:39:27.299Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":302,"startedAt":"2021-01-12T13:39:27.411Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":305,"startedAt":"2021-01-12T13:39:27.714Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint after setting new value on medium breakpoint","padding top should have value 22"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":99,"startedAt":"2021-01-12T13:39:28.021Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":349,"startedAt":"2021-01-12T13:39:28.121Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint after setting new value on medium breakpoint","padding top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":288,"startedAt":"2021-01-12T13:39:28.471Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint after setting new value on medium breakpoint","padding top should have value 32"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":116,"startedAt":"2021-01-12T13:39:28.760Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding top","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":288,"startedAt":"2021-01-12T13:39:28.877Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint before setting new value on main breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":459,"startedAt":"2021-01-12T13:39:29.167Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1173,"startedAt":"2021-01-12T13:39:29.627Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint before setting new value on main breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":418,"startedAt":"2021-01-12T13:39:30.801Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":265,"startedAt":"2021-01-12T13:39:31.220Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint before setting new value on main breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":268,"startedAt":"2021-01-12T13:39:31.486Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":298,"startedAt":"2021-01-12T13:39:31.755Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on main breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":276,"startedAt":"2021-01-12T13:39:32.055Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":703,"startedAt":"2021-01-12T13:39:32.332Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Main breakpoint after setting new value on main breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1798,"startedAt":"2021-01-12T13:39:33.036Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":723,"startedAt":"2021-01-12T13:39:34.835Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint before setting new value on medium breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":320,"startedAt":"2021-01-12T13:39:35.559Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint before setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":117,"startedAt":"2021-01-12T13:39:35.881Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":281,"startedAt":"2021-01-12T13:39:35.999Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint before setting new value on medium breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":267,"startedAt":"2021-01-12T13:39:36.281Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint before setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":113,"startedAt":"2021-01-12T13:39:36.549Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":328,"startedAt":"2021-01-12T13:39:36.663Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on medium breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":310,"startedAt":"2021-01-12T13:39:36.992Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":522,"startedAt":"2021-01-12T13:39:37.303Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":820,"startedAt":"2021-01-12T13:39:37.826Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Medium breakpoint after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1337,"startedAt":"2021-01-12T13:39:38.648Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":339,"startedAt":"2021-01-12T13:39:39.986Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Main breakpoint after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":727,"startedAt":"2021-01-12T13:39:40.326Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Main breakpoint after setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":710,"startedAt":"2021-01-12T13:39:41.054Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":346,"startedAt":"2021-01-12T13:39:41.765Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint id before setting new value on small breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:39:42.112Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint id before setting new value on small breakpoint","padding bottom should have value 23"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":105,"startedAt":"2021-01-12T13:39:42.408Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":323,"startedAt":"2021-01-12T13:39:42.514Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint id before setting new value on small breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":293,"startedAt":"2021-01-12T13:39:42.838Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint id before setting new value on small breakpoint","padding bottom should have value 23"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":106,"startedAt":"2021-01-12T13:39:43.132Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":273,"startedAt":"2021-01-12T13:39:43.240Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Small breakpoint after setting new value on small breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1453,"startedAt":"2021-01-12T13:39:43.514Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":317,"startedAt":"2021-01-12T13:39:44.968Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint id after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":320,"startedAt":"2021-01-12T13:39:45.286Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint id after setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":124,"startedAt":"2021-01-12T13:39:45.607Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":367,"startedAt":"2021-01-12T13:39:45.732Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint id after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:39:46.100Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint id after setting new value on medium breakpoint","padding bottom should have value 23"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":107,"startedAt":"2021-01-12T13:39:46.396Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":312,"startedAt":"2021-01-12T13:39:46.504Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on tiny breakpoint","padding bottom should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:39:46.817Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":285,"startedAt":"2021-01-12T13:39:47.109Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Tiny breakpoint after setting new value on tiny breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1392,"startedAt":"2021-01-12T13:39:47.395Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":329,"startedAt":"2021-01-12T13:39:48.788Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":301,"startedAt":"2021-01-12T13:39:49.118Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint after setting new value on medium breakpoint","padding bottom should have value 13"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:39:49.420Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":276,"startedAt":"2021-01-12T13:39:49.533Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":311,"startedAt":"2021-01-12T13:39:49.810Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint after setting new value on medium breakpoint","padding bottom should have value 23"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":126,"startedAt":"2021-01-12T13:39:50.121Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":322,"startedAt":"2021-01-12T13:39:50.248Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint after setting new value on medium breakpoint","padding bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:39:50.571Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint after setting new value on medium breakpoint","padding bottom should have value 33"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":121,"startedAt":"2021-01-12T13:39:50.875Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","padding bottom","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":281,"startedAt":"2021-01-12T13:39:50.997Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint before setting new value on main breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":313,"startedAt":"2021-01-12T13:39:51.279Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":284,"startedAt":"2021-01-12T13:39:51.598Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint before setting new value on main breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:39:51.883Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:39:52.187Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint before setting new value on main breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":640,"startedAt":"2021-01-12T13:39:52.479Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":749,"startedAt":"2021-01-12T13:39:53.120Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on main breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":328,"startedAt":"2021-01-12T13:39:53.870Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:39:54.199Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Main breakpoint after setting new value on main breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1317,"startedAt":"2021-01-12T13:39:54.495Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":317,"startedAt":"2021-01-12T13:39:55.813Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint before setting new value on medium breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":322,"startedAt":"2021-01-12T13:39:56.131Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint before setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":107,"startedAt":"2021-01-12T13:39:56.454Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":685,"startedAt":"2021-01-12T13:39:56.562Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint before setting new value on medium breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":283,"startedAt":"2021-01-12T13:39:57.249Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint before setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":105,"startedAt":"2021-01-12T13:39:57.533Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":314,"startedAt":"2021-01-12T13:39:57.639Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on medium breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":280,"startedAt":"2021-01-12T13:39:57.954Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":96,"startedAt":"2021-01-12T13:39:58.235Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":301,"startedAt":"2021-01-12T13:39:58.333Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Medium breakpoint after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2015,"startedAt":"2021-01-12T13:39:58.635Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":316,"startedAt":"2021-01-12T13:40:00.651Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Main breakpoint after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":521,"startedAt":"2021-01-12T13:40:00.968Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Main breakpoint after setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":645,"startedAt":"2021-01-12T13:40:01.490Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":377,"startedAt":"2021-01-12T13:40:02.136Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint id before setting new value on small breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:40:02.515Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint id before setting new value on small breakpoint","margin left should have value 21"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":114,"startedAt":"2021-01-12T13:40:02.807Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":309,"startedAt":"2021-01-12T13:40:02.922Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint id before setting new value on small breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":271,"startedAt":"2021-01-12T13:40:03.233Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint id before setting new value on small breakpoint","margin left should have value 21"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":113,"startedAt":"2021-01-12T13:40:03.505Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":288,"startedAt":"2021-01-12T13:40:03.619Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Small breakpoint after setting new value on small breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2175,"startedAt":"2021-01-12T13:40:03.909Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":323,"startedAt":"2021-01-12T13:40:06.085Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint id after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":310,"startedAt":"2021-01-12T13:40:06.409Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint id after setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":107,"startedAt":"2021-01-12T13:40:06.720Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":271,"startedAt":"2021-01-12T13:40:06.828Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint id after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:40:07.101Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint id after setting new value on medium breakpoint","margin left should have value 21"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":100,"startedAt":"2021-01-12T13:40:07.397Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":949,"startedAt":"2021-01-12T13:40:07.498Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on tiny breakpoint","margin left should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":747,"startedAt":"2021-01-12T13:40:08.448Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:40:09.196Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Tiny breakpoint after setting new value on tiny breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1163,"startedAt":"2021-01-12T13:40:09.489Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":421,"startedAt":"2021-01-12T13:40:10.653Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":322,"startedAt":"2021-01-12T13:40:11.076Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint after setting new value on medium breakpoint","margin left should have value 11"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":367,"startedAt":"2021-01-12T13:40:11.399Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1674,"startedAt":"2021-01-12T13:40:11.767Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":413,"startedAt":"2021-01-12T13:40:13.443Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint after setting new value on medium breakpoint","margin left should have value 21"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":161,"startedAt":"2021-01-12T13:40:13.857Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":391,"startedAt":"2021-01-12T13:40:14.019Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint after setting new value on medium breakpoint","margin left label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":313,"startedAt":"2021-01-12T13:40:14.412Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint after setting new value on medium breakpoint","margin left should have value 31"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":119,"startedAt":"2021-01-12T13:40:14.726Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin left","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":276,"startedAt":"2021-01-12T13:40:14.846Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint before setting new value on main breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":292,"startedAt":"2021-01-12T13:40:15.123Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":293,"startedAt":"2021-01-12T13:40:15.417Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint before setting new value on main breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":313,"startedAt":"2021-01-12T13:40:15.711Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":292,"startedAt":"2021-01-12T13:40:16.024Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint before setting new value on main breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":257,"startedAt":"2021-01-12T13:40:16.317Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":647,"startedAt":"2021-01-12T13:40:16.575Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on main breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":811,"startedAt":"2021-01-12T13:40:17.223Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:40:18.035Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Main breakpoint after setting new value on main breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1199,"startedAt":"2021-01-12T13:40:18.318Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":308,"startedAt":"2021-01-12T13:40:19.518Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint before setting new value on medium breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":322,"startedAt":"2021-01-12T13:40:19.827Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint before setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":96,"startedAt":"2021-01-12T13:40:20.150Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":279,"startedAt":"2021-01-12T13:40:20.248Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint before setting new value on medium breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:40:20.528Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint before setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":109,"startedAt":"2021-01-12T13:40:20.811Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1133,"startedAt":"2021-01-12T13:40:20.921Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on medium breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":867,"startedAt":"2021-01-12T13:40:22.055Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":120,"startedAt":"2021-01-12T13:40:22.924Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":284,"startedAt":"2021-01-12T13:40:23.045Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Medium breakpoint after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1194,"startedAt":"2021-01-12T13:40:23.330Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":327,"startedAt":"2021-01-12T13:40:24.526Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Main breakpoint after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":320,"startedAt":"2021-01-12T13:40:24.854Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Main breakpoint after setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":102,"startedAt":"2021-01-12T13:40:25.174Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":272,"startedAt":"2021-01-12T13:40:25.277Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint id before setting new value on small breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":680,"startedAt":"2021-01-12T13:40:25.550Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint id before setting new value on small breakpoint","margin right should have value 22"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":239,"startedAt":"2021-01-12T13:40:26.231Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1167,"startedAt":"2021-01-12T13:40:26.471Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint id before setting new value on small breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":292,"startedAt":"2021-01-12T13:40:27.640Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint id before setting new value on small breakpoint","margin right should have value 22"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":94,"startedAt":"2021-01-12T13:40:27.933Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":284,"startedAt":"2021-01-12T13:40:28.028Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Small breakpoint after setting new value on small breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1362,"startedAt":"2021-01-12T13:40:28.314Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":931,"startedAt":"2021-01-12T13:40:29.677Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint id after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":735,"startedAt":"2021-01-12T13:40:30.609Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint id after setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":123,"startedAt":"2021-01-12T13:40:31.345Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":256,"startedAt":"2021-01-12T13:40:31.469Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint id after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":300,"startedAt":"2021-01-12T13:40:31.727Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint id after setting new value on medium breakpoint","margin right should have value 22"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":108,"startedAt":"2021-01-12T13:40:32.028Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":318,"startedAt":"2021-01-12T13:40:32.137Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on tiny breakpoint","margin right should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":285,"startedAt":"2021-01-12T13:40:32.457Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:40:32.743Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Tiny breakpoint after setting new value on tiny breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1549,"startedAt":"2021-01-12T13:40:33.026Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1476,"startedAt":"2021-01-12T13:40:34.576Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":315,"startedAt":"2021-01-12T13:40:36.053Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint after setting new value on medium breakpoint","margin right should have value 12"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":106,"startedAt":"2021-01-12T13:40:36.369Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:40:36.476Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":368,"startedAt":"2021-01-12T13:40:36.759Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint after setting new value on medium breakpoint","margin right should have value 22"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":107,"startedAt":"2021-01-12T13:40:37.128Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":304,"startedAt":"2021-01-12T13:40:37.236Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint after setting new value on medium breakpoint","margin right label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":351,"startedAt":"2021-01-12T13:40:37.541Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint after setting new value on medium breakpoint","margin right should have value 32"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:40:37.893Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin right","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":276,"startedAt":"2021-01-12T13:40:38.006Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint before setting new value on main breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":301,"startedAt":"2021-01-12T13:40:38.283Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":286,"startedAt":"2021-01-12T13:40:38.586Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint before setting new value on main breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:40:38.874Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":271,"startedAt":"2021-01-12T13:40:39.178Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint before setting new value on main breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":519,"startedAt":"2021-01-12T13:40:39.450Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1420,"startedAt":"2021-01-12T13:40:39.970Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on main breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":621,"startedAt":"2021-01-12T13:40:41.391Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":355,"startedAt":"2021-01-12T13:40:42.014Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Main breakpoint after setting new value on main breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1214,"startedAt":"2021-01-12T13:40:42.370Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":331,"startedAt":"2021-01-12T13:40:43.586Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint before setting new value on medium breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":302,"startedAt":"2021-01-12T13:40:43.918Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint before setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":114,"startedAt":"2021-01-12T13:40:44.221Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":268,"startedAt":"2021-01-12T13:40:44.336Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint before setting new value on medium breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":278,"startedAt":"2021-01-12T13:40:44.605Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint before setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:40:44.884Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":993,"startedAt":"2021-01-12T13:40:44.997Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on medium breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":893,"startedAt":"2021-01-12T13:40:45.991Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":108,"startedAt":"2021-01-12T13:40:46.885Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":283,"startedAt":"2021-01-12T13:40:46.994Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Medium breakpoint after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1177,"startedAt":"2021-01-12T13:40:47.278Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":335,"startedAt":"2021-01-12T13:40:48.455Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Main breakpoint after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":321,"startedAt":"2021-01-12T13:40:48.791Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Main breakpoint after setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":105,"startedAt":"2021-01-12T13:40:49.113Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":262,"startedAt":"2021-01-12T13:40:49.219Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint id before setting new value on small breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":279,"startedAt":"2021-01-12T13:40:49.483Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint id before setting new value on small breakpoint","margin top should have value 23"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":124,"startedAt":"2021-01-12T13:40:49.763Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":366,"startedAt":"2021-01-12T13:40:49.888Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint id before setting new value on small breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":278,"startedAt":"2021-01-12T13:40:50.255Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint id before setting new value on small breakpoint","margin top should have value 23"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":97,"startedAt":"2021-01-12T13:40:50.534Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":287,"startedAt":"2021-01-12T13:40:50.632Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Small breakpoint after setting new value on small breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2904,"startedAt":"2021-01-12T13:40:50.920Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":385,"startedAt":"2021-01-12T13:40:53.826Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint id after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":330,"startedAt":"2021-01-12T13:40:54.213Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint id after setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":130,"startedAt":"2021-01-12T13:40:54.544Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":270,"startedAt":"2021-01-12T13:40:54.675Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint id after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":290,"startedAt":"2021-01-12T13:40:54.946Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint id after setting new value on medium breakpoint","margin top should have value 23"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":106,"startedAt":"2021-01-12T13:40:55.237Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":316,"startedAt":"2021-01-12T13:40:55.344Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on tiny breakpoint","margin top should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":294,"startedAt":"2021-01-12T13:40:55.661Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":273,"startedAt":"2021-01-12T13:40:55.956Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Tiny breakpoint after setting new value on tiny breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2618,"startedAt":"2021-01-12T13:40:56.230Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":782,"startedAt":"2021-01-12T13:40:58.849Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":299,"startedAt":"2021-01-12T13:40:59.633Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint after setting new value on medium breakpoint","margin top should have value 13"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":100,"startedAt":"2021-01-12T13:40:59.933Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":281,"startedAt":"2021-01-12T13:41:00.034Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":285,"startedAt":"2021-01-12T13:41:00.316Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint after setting new value on medium breakpoint","margin top should have value 23"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:41:00.602Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":308,"startedAt":"2021-01-12T13:41:00.721Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint after setting new value on medium breakpoint","margin top label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":301,"startedAt":"2021-01-12T13:41:01.030Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint after setting new value on medium breakpoint","margin top should have value 33"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":111,"startedAt":"2021-01-12T13:41:01.332Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin top","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:41:01.444Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint before setting new value on main breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":298,"startedAt":"2021-01-12T13:41:01.728Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":305,"startedAt":"2021-01-12T13:41:02.027Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint before setting new value on main breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":297,"startedAt":"2021-01-12T13:41:02.334Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":258,"startedAt":"2021-01-12T13:41:02.632Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint before setting new value on main breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":378,"startedAt":"2021-01-12T13:41:02.891Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1409,"startedAt":"2021-01-12T13:41:03.270Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on main breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForNotSetProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":930,"startedAt":"2021-01-12T13:41:04.680Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and should not contain default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                editor.getInheritanceMessage().should('not.exist');\n                editor.getInheritanceOption().should('have.length', 0);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":287,"startedAt":"2021-01-12T13:41:05.611Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Main breakpoint after setting new value on main breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1217,"startedAt":"2021-01-12T13:41:05.899Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Main breakpoint after setting new value on main breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":311,"startedAt":"2021-01-12T13:41:07.118Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint before setting new value on medium breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":309,"startedAt":"2021-01-12T13:41:07.430Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint before setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":104,"startedAt":"2021-01-12T13:41:07.740Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":341,"startedAt":"2021-01-12T13:41:07.845Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint before setting new value on medium breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":272,"startedAt":"2021-01-12T13:41:08.188Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint before setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":475,"startedAt":"2021-01-12T13:41:08.461Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1610,"startedAt":"2021-01-12T13:41:08.937Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on medium breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":680,"startedAt":"2021-01-12T13:41:10.548Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":114,"startedAt":"2021-01-12T13:41:11.229Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":282,"startedAt":"2021-01-12T13:41:11.344Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Medium breakpoint after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1239,"startedAt":"2021-01-12T13:41:11.627Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Medium breakpoint after setting new value on medium breakpoint","reset popover should contain main breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":335,"startedAt":"2021-01-12T13:41:12.867Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Main breakpoint after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":311,"startedAt":"2021-01-12T13:41:13.204Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Main breakpoint after setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n              stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":99,"startedAt":"2021-01-12T13:41:13.515Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 0);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":288,"startedAt":"2021-01-12T13:41:13.615Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint id before setting new value on small breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":291,"startedAt":"2021-01-12T13:41:13.904Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint id before setting new value on small breakpoint","margin bottom should have value 24"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":133,"startedAt":"2021-01-12T13:41:14.196Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":354,"startedAt":"2021-01-12T13:41:14.330Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint id before setting new value on small breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":746,"startedAt":"2021-01-12T13:41:14.686Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint id before setting new value on small breakpoint","margin bottom should have value 24"],"state":"passed","body":"function () {\n                stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1095,"startedAt":"2021-01-12T13:41:15.433Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint id before setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n                (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n                editor.getInheritanceOption().should('have.length', 1);\n                (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1621,"startedAt":"2021-01-12T13:41:16.530Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Small breakpoint after setting new value on small breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1273,"startedAt":"2021-01-12T13:41:18.153Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Small breakpoint after setting new value on small breakpoint","reset popover should contain medium breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":323,"startedAt":"2021-01-12T13:41:19.427Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint id after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":314,"startedAt":"2021-01-12T13:41:19.751Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint id after setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":94,"startedAt":"2021-01-12T13:41:20.066Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":267,"startedAt":"2021-01-12T13:41:20.162Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint id after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":289,"startedAt":"2021-01-12T13:41:20.430Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint id after setting new value on medium breakpoint","margin bottom should have value 24"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:41:20.720Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint id after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":308,"startedAt":"2021-01-12T13:41:20.833Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on tiny breakpoint","margin bottom should have inherited styles"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForInheritedProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":751,"startedAt":"2021-01-12T13:41:21.142Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","tiny breakpoint before setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageInherited)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":348,"startedAt":"2021-01-12T13:41:21.895Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Tiny breakpoint after setting new value on tiny breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n              cy.step('Check that property label shows proper origin');\n              (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1170,"startedAt":"2021-01-12T13:41:22.244Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","Tiny breakpoint after setting new value on tiny breakpoint","reset popover should contain small breakpoint to which reset is possible and inherited inheritance copy"],"state":"passed","body":"function () {\n              cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n              var editor = stylesTab.properties[spacingType].input[side].openEditor();\n              (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n              editor.getInheritanceOption().should('have.length', 1);\n              (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_SMALL);\n              editor.close();\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":392,"startedAt":"2021-01-12T13:41:23.415Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":787,"startedAt":"2021-01-12T13:41:23.808Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint after setting new value on medium breakpoint","margin bottom should have value 14"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MAIN_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":857,"startedAt":"2021-01-12T13:41:24.596Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","main breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":295,"startedAt":"2021-01-12T13:41:25.454Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":305,"startedAt":"2021-01-12T13:41:25.750Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint after setting new value on medium breakpoint","margin bottom should have value 24"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(MEDIUM_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":113,"startedAt":"2021-01-12T13:41:26.056Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","medium breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":324,"startedAt":"2021-01-12T13:41:26.170Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint after setting new value on medium breakpoint","margin bottom label should have styles for local label"],"state":"passed","body":"function () {\n                cy.step('Check that property label shows proper origin');\n                (0, _breakpointsInheritanceTestUtils.isLabelForLocalProperty)(stylesTab.properties[spacingType].input[side].getLabelNode());\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":318,"startedAt":"2021-01-12T13:41:26.495Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint after setting new value on medium breakpoint","margin bottom should have value 34"],"state":"passed","body":"function () {\n                  stylesTab.properties[spacingType].input[side].getLabelNode().contains(SMALL_SPACING_SIZE);\n                }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":102,"startedAt":"2021-01-12T13:41:26.814Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel spacing section","values set on all breakpoints for","margin bottom","small breakpoint after setting new value on medium breakpoint","reset popover should not contain breakpoint to which reset is possible and default inheritance copy"],"state":"passed","body":"function () {\n                cy.step(\"Open \".concat(spacingType, \" \").concat(side, \" editor\"));\n                var editor = stylesTab.properties[spacingType].input[side].openEditor();\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MAIN) {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageDefault)(editor.getInheritanceMessage());\n                } else {\n                  (0, _breakpointsInheritanceTestUtils.isInheritanceMessageLocal)(editor.getInheritanceMessage());\n                }\n\n                editor.getInheritanceOption().should('have.length', breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM || breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL ? 1 : 0);\n\n                if (breakpointId === _breakpointIds.BREAKPOINT_ID_MEDIUM) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MAIN);\n                } else if (breakpointId === _breakpointIds.BREAKPOINT_ID_SMALL) {\n                  (0, _breakpointsInheritanceTestUtils.checkInheritanceOption)(editor.getInheritanceOption(), _breakpointIds.BREAKPOINT_ID_MEDIUM);\n                }\n\n                editor.close();\n              }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":312,"startedAt":"2021-01-12T13:41:26.917Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-spacing.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-spacing.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-spacing.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":18,"tests":58,"passes":58,"pending":0,"skipped":0,"failures":0,"duration":67845,"startedAt":"2021-01-12T13:41:34.722Z","endedAt":"2021-01-12T13:42:42.567Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":18,"tests":58,"passes":58,"pending":0,"failures":0,"start":"2021-01-12T13:41:34.725Z","end":"2021-01-12T13:42:42.590Z","duration":67865},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n    topbar = workspace.getTopbar();\n    breakpoints = topbar.getBreakpoints();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.reload();\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints in Top Bar","on Designer load Desktop breakpoint should be active"],"state":"passed","body":"function () {\n    breakpoints.getDesktop().isActive();\n    breakpoints.getTablet().isActive(false);\n    breakpoints.getMobileLandscape().isActive(false);\n    breakpoints.getMobilePortrait().isActive(false);\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":11126,"startedAt":"2021-01-12T13:41:39.729Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","will make large breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4534,"startedAt":"2021-01-12T13:41:50.863Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","will make xl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":462,"startedAt":"2021-01-12T13:41:55.402Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","will make xxl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":732,"startedAt":"2021-01-12T13:41:55.865Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":407,"startedAt":"2021-01-12T13:41:56.598Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":179,"startedAt":"2021-01-12T13:41:57.006Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":143,"startedAt":"2021-01-12T13:41:57.189Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":142,"startedAt":"2021-01-12T13:41:57.333Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when large breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":159,"startedAt":"2021-01-12T13:41:57.476Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when xl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":137,"startedAt":"2021-01-12T13:41:57.635Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl, xxl breakpoints","only one breakpoint should remain active","when xxl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":121,"startedAt":"2021-01-12T13:41:57.773Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","will make large breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5458,"startedAt":"2021-01-12T13:41:57.896Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","will make xl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":442,"startedAt":"2021-01-12T13:42:03.360Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":152,"startedAt":"2021-01-12T13:42:03.803Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":156,"startedAt":"2021-01-12T13:42:03.956Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":149,"startedAt":"2021-01-12T13:42:04.113Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":145,"startedAt":"2021-01-12T13:42:04.263Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when large breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":167,"startedAt":"2021-01-12T13:42:04.409Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xl breakpoints","only one breakpoint should remain active","when xl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":130,"startedAt":"2021-01-12T13:42:04.577Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","will make large breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4384,"startedAt":"2021-01-12T13:42:04.708Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","will make xxl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":390,"startedAt":"2021-01-12T13:42:09.099Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":143,"startedAt":"2021-01-12T13:42:09.490Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":146,"startedAt":"2021-01-12T13:42:09.634Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":167,"startedAt":"2021-01-12T13:42:09.781Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":149,"startedAt":"2021-01-12T13:42:09.949Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when large breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":146,"startedAt":"2021-01-12T13:42:10.099Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large, xxl breakpoints","only one breakpoint should remain active","when xxl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":134,"startedAt":"2021-01-12T13:42:10.246Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","will make large breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4670,"startedAt":"2021-01-12T13:42:10.381Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":164,"startedAt":"2021-01-12T13:42:15.060Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":153,"startedAt":"2021-01-12T13:42:15.225Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":154,"startedAt":"2021-01-12T13:42:15.379Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":347,"startedAt":"2021-01-12T13:42:15.534Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding large breakpoints","only one breakpoint should remain active","when large breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":865,"startedAt":"2021-01-12T13:42:15.882Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","will make xl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4388,"startedAt":"2021-01-12T13:42:16.749Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","will make xxl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":404,"startedAt":"2021-01-12T13:42:21.143Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":139,"startedAt":"2021-01-12T13:42:21.548Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":166,"startedAt":"2021-01-12T13:42:21.689Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":159,"startedAt":"2021-01-12T13:42:21.856Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":137,"startedAt":"2021-01-12T13:42:22.016Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when xl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":159,"startedAt":"2021-01-12T13:42:22.154Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl, xxl breakpoints","only one breakpoint should remain active","when xxl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":123,"startedAt":"2021-01-12T13:42:22.314Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","will make xl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4594,"startedAt":"2021-01-12T13:42:22.439Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":209,"startedAt":"2021-01-12T13:42:27.037Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":160,"startedAt":"2021-01-12T13:42:27.248Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":145,"startedAt":"2021-01-12T13:42:27.409Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":157,"startedAt":"2021-01-12T13:42:27.555Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xl breakpoints","only one breakpoint should remain active","when xl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":149,"startedAt":"2021-01-12T13:42:27.714Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","will make xxl breakpoint active"],"state":"passed","body":"function () {\n          var breakpointsDropdown = topbar.clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n          breakpoints.getBreakpoint(breakpointId).isActive(true);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4085,"startedAt":"2021-01-12T13:42:27.864Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":176,"startedAt":"2021-01-12T13:42:31.955Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":143,"startedAt":"2021-01-12T13:42:32.132Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":149,"startedAt":"2021-01-12T13:42:32.276Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":153,"startedAt":"2021-01-12T13:42:32.426Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding xxl breakpoints","only one breakpoint should remain active","when xxl breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":147,"startedAt":"2021-01-12T13:42:32.580Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding none breakpoints","only one breakpoint should remain active","when main breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4581,"startedAt":"2021-01-12T13:42:32.728Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding none breakpoints","only one breakpoint should remain active","when medium breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":246,"startedAt":"2021-01-12T13:42:37.317Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding none breakpoints","only one breakpoint should remain active","when small breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":235,"startedAt":"2021-01-12T13:42:37.564Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Adding none breakpoints","only one breakpoint should remain active","when tiny breakpoint is selected"],"state":"passed","body":"function () {\n            cy.step(\"Click on \".concat(activeBreakpointId, \" breakpoint in Top Bar\"));\n            breakpoints.setBreakpoint(activeBreakpointId);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS), (0, _toConsumableArray2[\"default\"])(largerBreakpointsIds)).filter(function (breakpointId) {\n              return breakpointId !== activeBreakpointId;\n            }).forEach(function (breakpointId) {\n              breakpoints.getBreakpoint(breakpointId).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":159,"startedAt":"2021-01-12T13:42:37.800Z","screenshots":[]}]},{"title":["Breakpoints in Top Bar","Undo and redo a large breakpoint","will add, undo and redo large breakpoint"],"state":"passed","body":"function () {\n      cy.step(\"Add breakpoint\");\n      breakpoints.getDesktop().isActive(true);\n      topbar.clickBreakpointsDropdown().clickBreakpoint(_breakpointIds.BREAKPOINT_ID_LARGE);\n      cy.get('[data-automation-id=\"Create\"]').click();\n      breakpoints.getBreakpoint(_breakpointIds.BREAKPOINT_ID_LARGE).isActive(true);\n      cy.step(\"Undo breakpoint\");\n      topbar.clickUndo();\n      breakpoints.largeBreakpoint.should('not.exist');\n      breakpoints.getDesktop().isActive(true);\n      cy.step(\"Redo breakpoint\");\n      topbar.clickRedo();\n      breakpoints.getBreakpoint(_breakpointIds.BREAKPOINT_ID_LARGE).isActive(true);\n      breakpoints.getDesktop().isActive(false);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4599,"startedAt":"2021-01-12T13:42:37.962Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":14,"passes":14,"pending":0,"skipped":0,"failures":0,"duration":47244,"startedAt":"2021-01-12T13:42:49.725Z","endedAt":"2021-01-12T13:43:36.969Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":14,"passes":14,"pending":0,"failures":0,"start":"2021-01-12T13:42:49.733Z","end":"2021-01-12T13:43:36.973Z","duration":47240},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.upgradePlan().importSnapshot(_cypressAppControls.snapshots.CMS.cmsEmbedTokenOptions);\n\n    workspace.getLeftSidebar().clickPagesTab().switchPage('CMS items Template');\n    canvas = workspace.getCanvas();\n    canvas.doubleClickElement('.w-embed');\n    cy.contains('html embed code editor', {\n      matchCase: false\n    }).should('be.visible');\n    tokenInput = new _cypressAppControls.TokenFieldInput(cy, 'html-embed-field');\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Dynamic HtmlEmbed","should show correct content when typing in text and an invalid token"],"state":"passed","body":"function () {\n    tokenInput.fill('Hello {{invalid}}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }]);\n    tokenInput.expectValueToBe('Hello {{invalid}}');\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello ');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":16361,"startedAt":"2021-01-12T13:42:55.555Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should show correct content when typing in an external token"],"state":"passed","body":"function () {\n    tokenInput.fill('{\\\\{external}}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }]);\n    tokenInput.expectValueToBe('Hello {{invalid}}{\\\\{external}}');\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello {{external}}');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":929,"startedAt":"2021-01-12T13:43:11.932Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should show correct content when typing in a shorthand token"],"state":"passed","body":"function () {\n    tokenInput.fill('{{name}}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }]);\n    tokenInput.expectValueToBe(['Hello ', '{{invalid}}', '{\\\\{external}}', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello {{external}}Why We Love Webflow (And You Should, Too!)');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":871,"startedAt":"2021-01-12T13:43:12.862Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should show correct content when typing in a variable token"],"state":"passed","body":"function () {\n    tokenInput.fill('{{wf {\"path\":\"name\",\"type\":\"PlainText\"\\\\} }}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.fill('{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }]);\n    tokenInput.expectValueToBe(['Hello ', '{{invalid}}', '{\\\\{external}}', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}'].join(''));\n    tokenInput.fill('{backspace}{backspace}');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":7406,"startedAt":"2021-01-12T13:43:13.749Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should have correct token options in the dropdown when clicking Add Fields"],"state":"passed","body":"function () {\n    addFieldDropdown = tokenInput.clickAddField(); // This menu uses virtual scrolling so we only expect to see the first\n    // 18 options. The token option menu that opens when clicking the token\n    // itself still shows all the variable options, so we test there that\n    // all the correct options are always available.\n\n    addFieldDropdown.expectTokenOptionsToHaveLabels(COLLECTION_TOKEN_OPTION_LABELS.slice(0, 18));\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":214,"startedAt":"2021-01-12T13:43:21.163Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should add the variable to the embed when clicking the dropdown option"],"state":"passed","body":"function () {\n    tokenWidget = addFieldDropdown.clickTokenOptionThatContains('Slug');\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }, {\n      type: 'token',\n      text: 'Slug'\n    }]);\n    tokenInput.expectValueToBe(['Hello ', '{{invalid}}', '{\\\\{external}}', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', '{{wf {&quot;path&quot;:&quot;slug&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello {{external}}Why We Love Webflow (And You Should, Too!)why-we-love-webflow-and-you-should-too');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":420,"startedAt":"2021-01-12T13:43:21.378Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should delete the first token when pressing end+leftarrow+backspace in the embed editor"],"state":"passed","body":"function () {\n    tokenInput.fill('{end}{leftarrow}{backspace}');\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }, {\n      type: 'token',\n      text: 'Slug'\n    }]);\n    tokenInput.expectValueToBe(['Hello ', '{{invalid}}', '{\\\\{external}}', '{{wf {&quot;path&quot;:&quot;slug&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello {{external}}why-we-love-webflow-and-you-should-too');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":377,"startedAt":"2021-01-12T13:43:21.799Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should show correct token variables and \"Delete Field\" when click a token"],"state":"passed","body":"function () {\n    tokenWidget = tokenInput.clickTokenWidgetThatContains('Slug');\n    tokenWidget.expectTokenOptionsToHaveLabels([].concat(COLLECTION_TOKEN_OPTION_LABELS, ['Delete Field']));\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":497,"startedAt":"2021-01-12T13:43:22.177Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should delete the token when clicking \"Delete Field\""],"state":"passed","body":"function () {\n    tokenWidget.clickTokenOptionThatContains('Delete Field');\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hello '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }]);\n    tokenInput.expectValueToBe('Hello {{invalid}}{\\\\{external}}');\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hello {{external}}');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":420,"startedAt":"2021-01-12T13:43:22.675Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should add the token to where the cursor is at"],"state":"passed","body":"function () {\n    tokenInput.moveCursorToPosition('Hel'.length);\n    addFieldDropdown = tokenInput.clickAddField();\n    addFieldDropdown.clickTokenOptionThatContains('Name');\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Hel'\n    }, {\n      type: 'token',\n      text: 'Name'\n    }, {\n      type: 'text',\n      text: 'lo '\n    }, {\n      type: 'invalid',\n      text: '{{invalid}}'\n    }, {\n      type: 'text',\n      text: '{\\\\{external}}'\n    }]);\n    tokenInput.expectValueToBe(['Hel', '{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', 'lo ', '{{invalid}}', '{\\\\{external}}'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('HelWhy We Love Webflow (And You Should, Too!)lo {{external}}');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":645,"startedAt":"2021-01-12T13:43:23.096Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should support replacing a selection with a token"],"state":"passed","body":"function () {\n    tokenInput.selectRange('He'.length, 'HelXlo {'.length);\n    addFieldDropdown = tokenInput.clickAddField();\n    addFieldDropdown.clickTokenOptionThatContains('Slug');\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'He'\n    }, {\n      type: 'token',\n      text: 'Slug'\n    }, {\n      type: 'text',\n      text: '{invalid}}{\\\\{external}}'\n    }]);\n    tokenInput.expectValueToBe(['He', '{{wf {&quot;path&quot;:&quot;slug&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', '{invalid}}{\\\\{external}}'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Hewhy-we-love-webflow-and-you-should-too{invalid}}{{external}}');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":947,"startedAt":"2021-01-12T13:43:23.743Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should render empty with empty field of a Reference"],"state":"passed","body":"function () {\n    tokenInput.clear().fill('Should be empty: \"{{reference-field-cms-items:name}}\"', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'text',\n      text: 'Should be empty: \"'\n    }, {\n      type: 'token',\n      text: 'Reference field: CMS items: Name'\n    }, {\n      type: 'text',\n      text: '\"'\n    }]);\n    tokenInput.expectValueToBe(['Should be empty: \"', '{{wf {&quot;path&quot;:&quot;reference-field-cms-items:name&quot;,&quot;type&quot;:&quot;PlainText&quot;\\\\} }}', '\"'].join(''));\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Should be empty: \"\"');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4352,"startedAt":"2021-01-12T13:43:24.691Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should render correctly with an Option field of a Reference"],"state":"passed","body":"function () {\n    tokenInput.clear().fill('{{reference-field-products:option-field}}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'token',\n      text: 'Reference field: Products: Option field'\n    }]);\n    tokenInput.expectValueToBe('{{wf {&quot;path&quot;:&quot;reference-field-products:option-field&quot;,&quot;type&quot;:&quot;Option&quot;\\\\} }}');\n    saveEmbed();\n    expectCanvasEmbedToHaveContent('Option 1');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4321,"startedAt":"2021-01-12T13:43:29.047Z","screenshots":[]}]},{"title":["Dynamic HtmlEmbed","should render correctly with a File field of a Reference"],"state":"passed","body":"function () {\n    tokenInput.clear().fill('{{reference-field-products:file-field}}', {\n      parseSpecialCharSequences: false\n    });\n    tokenInput.expectToHaveNodes([{\n      type: 'token',\n      text: 'Reference field: Products: File field'\n    }]);\n    tokenInput.expectValueToBe('{{wf {&quot;path&quot;:&quot;reference-field-products:file-field&quot;,&quot;type&quot;:&quot;FileRef&quot;\\\\} }}');\n    saveEmbed();\n    expectCanvasEmbedToContainContent('https://');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3587,"startedAt":"2021-01-12T13:43:33.376Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/cms/canvas/dynamic-html-embed.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/cms/canvas/dynamic-html-embed.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/cms/canvas/dynamic-html-embed.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":2,"tests":4,"passes":4,"pending":0,"skipped":0,"failures":0,"duration":27340,"startedAt":"2021-01-12T13:43:43.849Z","endedAt":"2021-01-12T13:44:11.189Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":2,"tests":4,"passes":4,"pending":0,"failures":0,"start":"2021-01-12T13:43:43.851Z","end":"2021-01-12T13:44:11.216Z","duration":27365},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    _cypressAppControls.server.spy('GET', _cypressAppControls.server.paths.openCMSItem).as('open-cms-item');\n\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.CMS.fiveDummyItems);\n    sidebar = workspace.getLeftSidebar();\n    cy.step('Click the CMS button to open the panel');\n    sidebar.clickCMSButton();\n    cy.step('Click to open the Dummy Items collection');\n    var itemForm = sidebar.getCMSTab().getCollectionByName('Testers').clickCollectionTab().clickCollectionItem('Natus Porro Quos');\n    cy.wait('@open-cms-item');\n    cy.step('Assert that the text fields are not empty and that the image fields exist');\n    itemForm.getField('Name').input.should('not.have.value', '');\n    itemForm.getField('Slug').input.should('not.have.value', '');\n    itemForm.getField('Custom text').input.should('not.have.value', '');\n    itemForm.getField('Custom image').image.preview().should('exist');\n    itemForm.getField('Custom video').input.should('not.have.value', '');\n    workspace.escapeAllUiPanels();\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Dynamo Wrapper Creation","Scenario: A Webflow site with at least one CMS collection with at least one CMS item","should create a dynamo wrapper and set a source"],"state":"passed","body":"function () {\n      _cypressAppControls.server.spy('POST', _cypressAppControls.server.paths.cmsSource).as('cms-source');\n\n      cy.step('Add a Dynamo Wrapper to the canvs');\n      workspace.getLeftSidebar().clickAddElementButton().clickBuiltinTab().clickOption('DynamoWrapper');\n      cy.step('Get the collection list settings');\n      var collectionSettings = workspace.getCanvas().getCollectionListSettings();\n      cy.step('Set the collection source to Testers');\n      collectionSettings.source.click();\n      collectionSettings.source.clickOption('Testers');\n      cy.step('Wait on the cms-source endpoint');\n      cy.wait('@cms-source');\n      cy.step('Assert that the collection source has been set to Testers');\n      canvas.within(function () {\n        cy.get('.w-dyn-item').should('have.length', 5);\n        cy.get('.w-dyn-item').eq(0).click();\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17297,"startedAt":"2021-01-12T13:43:49.126Z","screenshots":[]}]},{"title":["Dynamo Wrapper Creation","Scenario: A Webflow site with at least one CMS collection with at least one CMS item","should add text to the dynamo wrapper and set the source to one of the collection's text fields"],"state":"passed","body":"function () {\n      cy.step('Click to open the add tab panel and click the text block element');\n      sidebar.clickAddElementButton().clickBuiltinTab().clickOption('TextBlock');\n      cy.step('Click to get the text from the Testers collection');\n      var miniSettings = workspace.getCanvas().miniSettings;\n      cy.step('Click to select the Name option from the dropdown');\n      var binding = miniSettings.getBinding(0);\n      binding.click();\n      binding.field.setValue('Name');\n      cy.step('Assert that each collection item wrapper has the text field');\n      canvas.within(function () {\n        cy.get('.w-dyn-item').eq(0).within(function () {\n          cy.get('div').contains('Natus Porro Quos').should('exist');\n        });\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1422,"startedAt":"2021-01-12T13:44:06.447Z","screenshots":[]}]},{"title":["Dynamo Wrapper Creation","Scenario: A Webflow site with at least one CMS collection with at least one CMS item","should add an image and alt text to the dynamo wrapper and set the source to one of the collection's image and text fields"],"state":"passed","body":"function () {\n      cy.step('Click to open the add tab panel and click the image option');\n      sidebar.clickAddElementButton().clickBuiltinTab().clickOption('Image');\n      cy.step('Click to get the image and the alt text from the Testers collection');\n      var miniSettings = workspace.getCanvas().miniSettings;\n      cy.step('Click to select the Custom image option from the image dropdown');\n      var imageBinding = miniSettings.getBinding(0);\n      imageBinding.click();\n      imageBinding.field.setValue('Custom image');\n      cy.step('Click to select the Custom text option from the alt text dropdown');\n      var altBinding = miniSettings.getBinding(1);\n      altBinding.click();\n      altBinding.field.setValue('Custom text');\n      cy.step('Assert that the images and alt text exist within each collection item wrapper');\n      canvas.within(function () {\n        cy.get('.w-dyn-item').eq(0).within(function () {\n          cy.findByAltText('Rem nihil doloremque consequatur veritatis ipsum dolorum neque ab libero. Repudiandae veritatis alias omnis omnis c').should('exist');\n        });\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2152,"startedAt":"2021-01-12T13:44:07.870Z","screenshots":[]}]},{"title":["Dynamo Wrapper Creation","Scenario: A Webflow site with at least one CMS collection with at least one CMS item","should add a video to the dynamo wrapper and set the source to the collection's video fields"],"state":"passed","body":"function () {\n      cy.step('Click to open the add tab panel and click the video option');\n      sidebar.clickAddElementButton().clickBuiltinTab().clickOption('Video');\n      cy.step('Click to get the video from the Testers collection');\n      var miniSettings = workspace.getCanvas().miniSettings;\n      var videoBinding = miniSettings.getBinding(0);\n      videoBinding.click();\n      videoBinding.field.setValue('Custom video');\n      cy.step('Assert that the video exist within each collections item wrapper');\n      canvas.within(function () {\n        cy.get('.w-dyn-item').eq(0).within(function () {\n          cy.get('.w-video').should('exist');\n        });\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1164,"startedAt":"2021-01-12T13:44:10.023Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/cms/canvas/dynamo-wrapper.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/cms/canvas/dynamo-wrapper.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/cms/canvas/dynamo-wrapper.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":2,"passes":2,"pending":0,"skipped":0,"failures":0,"duration":18927,"startedAt":"2021-01-12T13:44:18.226Z","endedAt":"2021-01-12T13:44:37.153Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":2,"passes":2,"pending":0,"failures":0,"start":"2021-01-12T13:44:18.228Z","end":"2021-01-12T13:44:37.162Z","duration":18934},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.empty);\n    sidebar = workspace.getLeftSidebar();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Click to open the cms tab and click to create a new collection');\n      cmsForm = sidebar.clickCMSButton().clickCreateNewCMSButton();\n      cy.step('Assert that the collection form should exist');\n      cmsForm.getNode().should('exist');\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Click to open the cms tab and click to create a new collection');\n      cmsForm = sidebar.getCMSTab().clickCreateNewCMSButton();\n      cy.step('Assert that the unsaved changes confirm modal is visible');\n      cy.getByDataAutomationId('unsaved-changes-confirm-modal').should('not.exist');\n      cmsForm.getNode().should('exist');\n    }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["CMS Collection Creation Cancellation","Scenario 1: Cancel CMS Collection Creation (no information added)","should cancel the creation of the cms collection"],"state":"passed","body":"function () {\n      cy.step('Click to cancel the cms collection');\n      cmsForm.clickCancelCollectionButton();\n      cy.step('Assert that the collection form no longer exists');\n      cmsForm.getNode().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12041,"startedAt":"2021-01-12T13:44:23.300Z","screenshots":[]}]},{"title":["CMS Collection Creation Cancellation","Scenario 2: Cancel CMS Collection Creation (with information)","should cancel the creation of the cms collection"],"state":"passed","body":"function () {\n      cmsForm.getName().clear().type('Test collection');\n      cy.step('Click to cancel the cms collection');\n      cmsForm.clickCancelCollectionButton();\n      cy.step('Assert that the unsaved changes confirm modal is visible');\n      cy.getByDataAutomationId('unsaved-changes-confirm-modal').should('exist');\n      cy.step('Click the discard changes button');\n      cy.getByDataAutomationId('discard-changes').click();\n      cy.step('Assert that the collection form no longer exists');\n      cmsForm.getNode().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1798,"startedAt":"2021-01-12T13:44:35.349Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/cms/cms-collection-creation-cancellation.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/cms/cms-collection-creation-cancellation.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/cms/cms-collection-creation-cancellation.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":6,"passes":6,"pending":0,"skipped":0,"failures":0,"duration":30422,"startedAt":"2021-01-12T13:44:43.942Z","endedAt":"2021-01-12T13:45:14.364Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":6,"passes":6,"pending":0,"failures":0,"start":"2021-01-12T13:44:43.945Z","end":"2021-01-12T13:45:14.379Z","duration":30434},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.empty);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.empty);\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["CMS Collection Creation","S1: Before and After creating the first CMS collection on a site (template collection)","should open pages tab and assert collection pages are empty"],"state":"passed","body":"function () {\n      cy.step('Click to open the left sidebar');\n      sidebar = workspace.getLeftSidebar();\n      cy.step('Open the pages panel');\n      var pageManager = sidebar.clickPagesTab();\n      cy.step('Assert that the CMS Collection Pages list is visible');\n      pageManager.getHeader('CMS Collection Pages').should('be.visible');\n      cy.step('Assert that the \"Create your first collection message is visible');\n      pageManager.getEmptyCMSCard().should('be.visible');\n      cy.step('Close the pages panel');\n      sidebar.clickPagesTab();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9930,"startedAt":"2021-01-12T13:44:48.762Z","screenshots":[]}]},{"title":["CMS Collection Creation","S1: Before and After creating the first CMS collection on a site (template collection)","should open the CMS tab and assert that the new collection UI is visible"],"state":"passed","body":"function () {\n      cy.step('Click the CMS button to open the panel');\n      cmsTab = sidebar.clickCMSButton();\n      cy.step('Assert that the \"Create your first collection message is visible');\n      cmsTab.getFirstCollectionCard().should('be.visible');\n      cmsTab.getCreateNewCMSButton().should('have.class', 'bem-Button-primary');\n      cy.step('Click to close the CMS panel');\n      sidebar.clickCMSButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":348,"startedAt":"2021-01-12T13:44:58.700Z","screenshots":[]}]},{"title":["CMS Collection Creation","S1: Before and After creating the first CMS collection on a site (template collection)","can create a new, pre-made CMS collection"],"state":"passed","body":"function () {\n      _cypressAppControls.server.spy('POST', _cypressAppControls.server.paths.databaseCreation).as('database-creation');\n\n      _cypressAppControls.server.spy('POST', _cypressAppControls.server.paths.collectionCreation).as('collection-creation');\n\n      _cypressAppControls.server.spy('PUT', _cypressAppControls.server.paths.pageSwitch).as('page-switch');\n\n      _cypressAppControls.server.spy('PUT', _cypressAppControls.server.paths.pageSwitchSecrets).as('page-switch-secrets');\n\n      cy.step('Click to open the CMS panel');\n      cmsTab = sidebar.clickCMSButton();\n      cy.step('Click to create a new CMS collection');\n      newCollectionForm = cmsTab.clickCreateNewCMSButton();\n      cy.step('Click the \"Blog Posts\" Collection Template');\n      newCollectionForm.getTemplate('Blog Posts').click();\n      cy.step('Assert that the correct name, slug, and collection fields are visible for the Blog Posts collection');\n      newCollectionForm.getName().should('have.value', 'Blog Posts');\n      newCollectionForm.getSlug().should('have.value', 'post');\n      newCollectionForm.getBasicInfoFieldsList().should('be.visible').and('contain', 'Name').and('contain', 'Slug');\n      newCollectionForm.getCustomFieldsList().should('be.visible').and('contain', 'Post Body').and('contain', 'Post Summary').and('contain', 'Main Image').and('contain', 'Thumbnail image').and('contain', 'Featured?').and('contain', 'Color');\n      cy.step(\"Click the 'Create Collection' button to save the created collection\");\n      newCollectionForm.clickCreateCollectionButton();\n      cy.step('Wait for the server responses');\n      cy.wait(['@database-creation', '@collection-creation', '@page-switch', '@page-switch-secrets']);\n      cy.step('Assert that the new \"Blog Posts\" collection is visible in the collection list');\n      cmsTab.getCollectionByName('Blog Posts').getNode().should('exist');\n      cy.step(\"Assert that the Blog Post's Data Manager is visible\");\n      cmsTab.getDataManagerCollectionPanel().should('be.visible');\n      cmsTab.getDataManagerCollectionHeader().should('contain', 'Blog Posts');\n      cy.step('Assert that the Data Manager shows the Dummy Item generator');\n      var dataPage = cmsTab.getCollectionByName('Blog Posts').getDataPage();\n      var dummyContainer = dataPage.getDummyItemGenerator();\n      dummyContainer.getHeading().should('be.visible').and('contain', 'You have 0 Blog Posts in your Collection');\n      dummyContainer.getNode().should('be.visible');\n      cy.step('Assert that the \"Create your first collection\" message is NOT visible');\n      cmsTab.getFirstCollectionCard().should('not.exist');\n      cmsTab.getCreateNewCMSButton().should('not.have.class', 'bem-Button-primary');\n      cy.step('Click the CMS button to close the panel');\n      sidebar.clickCMSButton();\n      cy.step('Open the pages panel');\n      var pageManager = sidebar.clickPagesTab();\n      cy.step('Assert that the CMS Collection Pages list is visible');\n      pageManager.getHeader('CMS Collection Pages').should('be.visible');\n      cy.step('Assert that the \"Blog Posts Template\" page is visible');\n      pageManager.getTemplatePage('Blog Posts').should('be.visible');\n      cy.step('Close the pages panel');\n      sidebar.clickPagesTab();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1430,"startedAt":"2021-01-12T13:44:59.049Z","screenshots":[]}]},{"title":["CMS Collection Creation","S2: Before and After creating the first CMS Collection on a site (custom collection)","should open pages tab and assert collection pages are empty"],"state":"passed","body":"function () {\n      cy.step('Click to open the left sidebar');\n      sidebar = workspace.getLeftSidebar();\n      cy.step('Open the pages panel');\n      var pageManager = sidebar.clickPagesTab();\n      cy.step('Assert that the CMS Collection Pages list is visible');\n      pageManager.getHeader('CMS Collection Pages').should('be.visible');\n      cy.step('Assert that the \"Create your first collection message is visible');\n      pageManager.getEmptyCMSCard().should('be.visible');\n      cy.step('Close the pages panel');\n      sidebar.clickPagesTab();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":8317,"startedAt":"2021-01-12T13:45:00.481Z","screenshots":[]}]},{"title":["CMS Collection Creation","S2: Before and After creating the first CMS Collection on a site (custom collection)","should open the CMS tab and assert that the new collection UI is visible"],"state":"passed","body":"function () {\n      cy.step('Click the CMS button to open the panel');\n      cmsTab = sidebar.clickCMSButton();\n      cy.step('Assert that the \"Create your first collection message is visible');\n      cmsTab.getFirstCollectionCard().should('be.visible');\n      cmsTab.getCreateNewCMSButton().should('have.class', 'bem-Button-primary');\n      cy.step('Click to close the CMS panel');\n      sidebar.clickCMSButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":268,"startedAt":"2021-01-12T13:45:08.808Z","screenshots":[]}]},{"title":["CMS Collection Creation","S2: Before and After creating the first CMS Collection on a site (custom collection)","Can create a new, custom CMS collection"],"state":"passed","body":"function () {\n      _cypressAppControls.server.spy('POST', _cypressAppControls.server.paths.databaseCreation).as('database-creation');\n\n      _cypressAppControls.server.spy('POST', _cypressAppControls.server.paths.collectionCreation).as('collection-creation');\n\n      _cypressAppControls.server.spy('PUT', _cypressAppControls.server.paths.pageSwitch).as('page-switch');\n\n      _cypressAppControls.server.spy('PUT', _cypressAppControls.server.paths.pageSwitchSecrets).as('page-switch-secrets');\n\n      cy.step('Click to open the CMS panel');\n      sidebar.clickCMSButton();\n      cy.step('Click to create a new CMS collection');\n      newCollectionForm = cmsTab.clickCreateNewCMSButton();\n      cy.step('Clear the collection name field and type in a name for the collection');\n      newCollectionForm.getName().clear().type(\"Some collection\");\n      cy.step('Clear the collection url folder field and type in a name for the collection url folder');\n      newCollectionForm.getSlug().clear().type(\"some-collection\");\n      cy.step('Assert that the default basic info fields list is visible');\n      newCollectionForm.getBasicInfoFieldsList().should('be.visible').and('contain', 'Name').and('contain', 'Slug');\n      var plainTextField = {\n        label: 'Custom text'\n      };\n      cy.step('Click to add a custom plain text field');\n      newCollectionForm.clickAddFieldButton().clickOption('PlainText').fill(plainTextField).clickSaveButton();\n      newCollectionForm.getCustomFieldsList().should('be.visible').and('contain', 'Custom text');\n      cy.step(\"Click the 'Create Collection' button to save the created collection\");\n      newCollectionForm.clickCreateCollectionButton();\n      cy.step('Wait for the server responses');\n      cy.wait(['@database-creation', '@collection-creation', '@page-switch', '@page-switch-secrets']);\n      cy.step('Assert that the new \"Blog Post\" collection is visible in the collection list');\n      cmsTab.getCollectionByName('Some collections').getNode().should('exist');\n      cy.step(\"Assert that the custom collection's Data Manager is visible\");\n      cmsTab.getDataManagerCollectionPanel().should('be.visible');\n      cmsTab.getDataManagerCollectionHeader().should('contain', 'Some collections');\n      cy.step('Assert that the Data Manager shows the Dummy Item generator');\n      var dataPage = cmsTab.getCollectionByName('Some collections').getDataPage();\n      var dummyContainer = dataPage.getDummyItemGenerator();\n      dummyContainer.getHeading().should('be.visible').and('contain', 'You have 0 Some collections in your Collection');\n      dummyContainer.getNode().should('be.visible');\n      cy.step('Assert that the \"Create your first collection\" message is NOT visible');\n      cmsTab.getFirstCollectionCard().should('not.exist');\n      cmsTab.getCreateNewCMSButton().should('not.have.class', 'bem-Button-primary');\n      cy.step('Click the CMS button to close the panel');\n      sidebar.clickCMSButton();\n      cy.step('Open the pages panel');\n      var pageManager = sidebar.clickPagesTab();\n      cy.step('Assert that the CMS Collection Pages list is visible');\n      pageManager.getHeader('CMS Collection Pages').should('be.visible');\n      cy.step('Assert that the \"Some Collections Template\" page is visible');\n      pageManager.getTemplatePage('Some collections').should('be.visible');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5278,"startedAt":"2021-01-12T13:45:09.077Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/cms/cms-collection-creation.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/cms/cms-collection-creation.spec.js","absolute":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/entrypoints/designer/client/ui-tests/cms/cms-collection-creation.spec.js","specType":"integration"},"shouldUploadVideo":false}],"browserPath":"/chromium64/chrome-linux/chrome","browserName":"chromium","browserVersion":"74.0.3729.0","osName":"linux","osVersion":"Debian - 9.13","cypressVersion":"6.2.1","config":{"env":{"baseUrl":"http://wfdev.io:3030","stagingSuperDomain":"dev.webflowtest.io","User-Agent":"cypress","RECORD_KEY":"f9ae3...c4cf9"},"integrationFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow","configFile":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/cypress.json","version":"6.2.1","chromeWebSecurity":false,"browser":"chromium","video":false,"videoUploadOnPasses":false,"viewportWidth":1440,"viewportHeight":900,"defaultCommandTimeout":30000,"numTestsKeptInMemory":0,"ignoreTestFiles":"*.quarantined.spec.js","testFiles":"**/*.spec.js","fileServerFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config","fixturesFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/fixtures","pluginsFile":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/plugins/index.js","screenshotsFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/screenshots","supportFile":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/support/index.js","videosFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/videos","retries":{"runMode":2,"openMode":0},"projectId":"xfhtj7","reporter":"../../../node_modules/cypress-multi-reporters","reporterOptions":{"configFile":"reporter-config.json"},"projectRoot":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config","projectName":"cypress-config","morgan":false,"isTextTerminal":true,"socketId":"w3c3p","report":true,"browsers":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"animationDistanceThreshold":5,"autoOpen":false,"baseUrl":null,"blockHosts":null,"clientRoute":"/__/","componentFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/cypress/component","execTimeout":60000,"experimentalComponentTesting":false,"experimentalFetchPolyfill":false,"experimentalRunEvents":false,"experimentalSourceRewriting":false,"firefoxGcInterval":{"runMode":1,"openMode":null},"hosts":null,"includeShadowDom":false,"javascripts":[],"modifyObstructiveCode":true,"namespace":"__cypress","nodeVersion":"default","pageLoadTimeout":60000,"port":44249,"reporterRoute":"/__cypress/reporter","requestTimeout":5000,"responseTimeout":30000,"screenshotOnRunFailure":true,"socketIoRoute":"/__socket.io","socketIoCookie":"__socket.io","taskTimeout":60000,"trashAssetsBeforeRuns":true,"userAgent":null,"videoCompression":32,"waitForAnimations":true,"scrollBehavior":"top","watchForFileChanges":false,"xhrRoute":"/xhrs/","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"baseUrl":{"value":null,"from":"default"},"blockHosts":{"value":null,"from":"default"},"browsers":{"value":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"from":"default"},"chromeWebSecurity":{"value":false,"from":"config"},"componentFolder":{"value":"cypress/component","from":"default"},"defaultCommandTimeout":{"value":30000,"from":"config"},"env":{"baseUrl":{"value":"http://wfdev.io:3030","from":"plugin"},"User-Agent":{"value":"cypress","from":"config"},"RECORD_KEY":{"value":"f9ae3...c4cf9","from":"env"},"stagingSuperDomain":{"value":"dev.webflowtest.io","from":"plugin"}},"execTimeout":{"value":60000,"from":"default"},"experimentalComponentTesting":{"value":false,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalRunEvents":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"fileServerFolder":{"value":"./","from":"config"},"firefoxGcInterval":{"value":{"runMode":1,"openMode":null},"from":"default"},"fixturesFolder":{"value":"./fixtures","from":"config"},"hosts":{"value":null,"from":"default"},"ignoreTestFiles":{"value":"*.quarantined.spec.js","from":"config"},"includeShadowDom":{"value":false,"from":"default"},"integrationFolder":{"value":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow","from":"plugin"},"modifyObstructiveCode":{"value":true,"from":"default"},"nodeVersion":{"value":"default","from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"pageLoadTimeout":{"value":60000,"from":"default"},"pluginsFile":{"value":"./plugins/index.js","from":"config"},"port":{"value":null,"from":"default"},"projectId":{"value":"xfhtj7","from":"config"},"reporter":{"value":"../../../node_modules/cypress-multi-reporters","from":"cli"},"reporterOptions":{"value":{"configFile":"reporter-config.json"},"from":"config"},"requestTimeout":{"value":5000,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":2,"openMode":0},"from":"config"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"./screenshots","from":"config"},"supportFile":{"value":"./support/index.js","from":"config"},"taskTimeout":{"value":60000,"from":"default"},"testFiles":{"value":"**/*.spec.js","from":"config"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":false,"from":"config"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"./videos","from":"config"},"videoUploadOnPasses":{"value":false,"from":"config"},"viewportHeight":{"value":900,"from":"config"},"viewportWidth":{"value":1440,"from":"config"},"waitForAnimations":{"value":true,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"configFile":{"value":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/cypress.json","from":"plugin"},"version":{"value":"6.2.1","from":"plugin"}},"parentTestsFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/cypress","parentTestsFolderDisplay":"cypress-config/cypress","supportFolder":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/support","integrationExampleName":"examples","integrationExamplePath":"/scratch/buildkite-agent-8dd07256-54da-11eb-97fa-4a22e55b2d68-5lqw5/webflow/webflow/packages/tooling/cypress-config/cypress/integration/examples","scaffoldedFiles":[{"name":"cypress","children":[{"name":"integration","children":[{"name":"examples","children":[{"name":"actions.spec.js"},{"name":"aliasing.spec.js"},{"name":"assertions.spec.js"},{"name":"connectors.spec.js"},{"name":"cookies.spec.js"},{"name":"cypress_api.spec.js"},{"name":"files.spec.js"},{"name":"local_storage.spec.js"},{"name":"location.spec.js"},{"name":"misc.spec.js"},{"name":"navigation.spec.js"},{"name":"network_requests.spec.js"},{"name":"querying.spec.js"},{"name":"spies_stubs_clocks.spec.js"},{"name":"traversal.spec.js"},{"name":"utilities.spec.js"},{"name":"viewport.spec.js"},{"name":"waiting.spec.js"},{"name":"window.spec.js"}]}]}]},{"name":"fixtures","children":[{"name":"example.json"}]},{"name":"support","children":[{"name":"commands.js"},{"name":"index.js"}]},{"name":"plugins","children":[{"name":"index.js"}]}],"resolvedNodeVersion":"12.18.3","state":{},"proxyUrl":"http://localhost:44249","browserUrl":"http://localhost:44249/__/","reporterUrl":"http://localhost:44249/__cypress/reporter","xhrUrl":"__cypress/xhrs/"},"status":"finished"}]