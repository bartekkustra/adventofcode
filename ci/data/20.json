[{"startedTestsAt":"2021-01-12T13:41:09.755Z","endedTestsAt":"2021-01-12T13:56:50.255Z","totalDuration":848663,"totalSuites":63,"totalTests":76,"totalFailed":0,"totalPassed":76,"totalPending":0,"totalSkipped":0,"runs":[{"stats":{"suites":3,"tests":4,"passes":4,"pending":0,"skipped":0,"failures":0,"duration":61760,"startedAt":"2021-01-12T13:41:09.755Z","endedAt":"2021-01-12T13:42:11.515Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":4,"passes":4,"pending":0,"failures":0,"start":"2021-01-12T13:41:09.758Z","end":"2021-01-12T13:42:11.525Z","duration":61767},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","Heading element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(fieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(fieldName, elementValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('have.text', elementValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":25111,"startedAt":"2021-01-12T13:41:15.725Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","Paragraph element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(fieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(fieldName, elementValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('have.text', elementValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":11301,"startedAt":"2021-01-12T13:41:40.866Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","TextBlock element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(fieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(fieldName, elementValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('have.text', elementValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":8733,"startedAt":"2021-01-12T13:41:52.184Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","Blockquote element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(fieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(fieldName, elementValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('have.text', elementValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":10567,"startedAt":"2021-01-12T13:42:00.933Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AA.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AA.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AA.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":2,"passes":2,"pending":0,"skipped":0,"failures":0,"duration":39860,"startedAt":"2021-01-12T13:42:18.995Z","endedAt":"2021-01-12T13:42:58.855Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":2,"passes":2,"pending":0,"failures":0,"start":"2021-01-12T13:42:18.998Z","end":"2021-01-12T13:42:58.864Z","duration":39866},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","List item element"],"state":"passed","body":"function () {\n        var elementType = 'List item';\n        var fieldName = elementType + ' Field';\n        var elementSelector = 'div > div > ul > li:first-child';\n        /* Phase 1 - Setting initial state */\n\n        settingUpTreeStructure(['DivBlock', 'DivBlock', 'List']);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(elementSelector);\n        createTextField(fieldName); // Apply override\n\n        cy.step('Override value of the field');\n        overrideTextFieldOnSymbolInstance(fieldName, elementValue, elementSelector);\n        /* Phase 2 - Performing action */\n\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        /* Phase 3 - Checking expectations */\n\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(elementSelector);\n        symbolMasterSettings.getBindingUI('Text').isBound();\n        cy.step('Check that field on the inner symbol is bound');\n        topbar.clickBackToSymbolInstanceButton();\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check value of the element is the same');\n        canvas.within(function () {\n          cy.get(elementSelector).should('have.text', elementValue);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23999,"startedAt":"2021-01-12T13:42:24.817Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children field","Form label element"],"state":"passed","body":"function () {\n        var elementType = 'Form label';\n        var fieldName = elementType + ' Field';\n        var elementSelector = 'div > div > div > form > label:first-child';\n        /* Phase 1 - Setting initial state */\n\n        settingUpTreeStructure(['DivBlock', 'DivBlock', 'FormForm']);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(elementSelector);\n        createTextField(fieldName); // Apply override\n\n        cy.step('Override value of the field');\n        overrideTextFieldOnSymbolInstance(fieldName, elementValue, elementSelector);\n        /* Phase 2 - Performing action */\n\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        /* Phase 3 - Checking expectations */\n\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(elementSelector);\n        symbolMasterSettings.getBindingUI('Text').isBound();\n        cy.step('Check that field on the inner symbol is bound');\n        topbar.clickBackToSymbolInstanceButton();\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check value of the element is the same');\n        canvas.within(function () {\n          cy.get(elementSelector).should('have.text', elementValue);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9994,"startedAt":"2021-01-12T13:42:48.843Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AB.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AB.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01AB.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":3,"passes":3,"pending":0,"skipped":0,"failures":0,"duration":59641,"startedAt":"2021-01-12T13:43:06.478Z","endedAt":"2021-01-12T13:44:06.119Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":3,"passes":3,"pending":0,"failures":0,"start":"2021-01-12T13:43:06.483Z","end":"2021-01-12T13:44:06.132Z","duration":59649},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children and link fields","TextLink element"],"state":"passed","body":"function () {\n          var textFieldName = elementType + ' Text Field';\n          var linkFieldName = elementType + ' Link Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(textFieldName);\n          createLinkField(linkFieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(textFieldName, elementTextValue);\n          cy.step('Override value of the field');\n          overrideLinkFieldOnSymbolInstance(linkFieldName, elementLinkValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(textFieldName).isBound();\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          canvas.within(function () {\n            cy.step('Check value of the element is the same');\n            cy.get(defaultElementSelector).should('have.text', elementTextValue);\n            cy.step('Check link of the element is the same');\n            cy.get(defaultElementSelector).should('have.attr', 'href').and('include', elementLinkValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26335,"startedAt":"2021-01-12T13:43:12.290Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children and link fields","LinkBlock element"],"state":"passed","body":"function () {\n          var textFieldName = elementType + ' Text Field';\n          var linkFieldName = elementType + ' Link Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(textFieldName);\n          createLinkField(linkFieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(textFieldName, elementTextValue);\n          cy.step('Override value of the field');\n          overrideLinkFieldOnSymbolInstance(linkFieldName, elementLinkValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(textFieldName).isBound();\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          canvas.within(function () {\n            cy.step('Check value of the element is the same');\n            cy.get(defaultElementSelector).should('have.text', elementTextValue);\n            cy.step('Check link of the element is the same');\n            cy.get(defaultElementSelector).should('have.attr', 'href').and('include', elementLinkValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13382,"startedAt":"2021-01-12T13:43:38.665Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound children and link fields","Button element"],"state":"passed","body":"function () {\n          var textFieldName = elementType + ' Text Field';\n          var linkFieldName = elementType + ' Link Field';\n          /* Phase 1 - Setting initial state */\n\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          createTextField(textFieldName);\n          createLinkField(linkFieldName); // Apply override\n\n          cy.step('Override value of the field');\n          overrideTextFieldOnSymbolInstance(textFieldName, elementTextValue);\n          cy.step('Override value of the field');\n          overrideLinkFieldOnSymbolInstance(linkFieldName, elementLinkValue);\n          /* Phase 2 - Performing action */\n\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          /* Phase 3 - Checking expectations */\n\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(defaultElementSelector);\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Check that field on the inner symbol is bound');\n          topbar.clickBackToSymbolInstanceButton();\n          symbolMasterSettings.getBindingUI(textFieldName).isBound();\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          canvas.within(function () {\n            cy.step('Check value of the element is the same');\n            cy.get(defaultElementSelector).should('have.text', elementTextValue);\n            cy.step('Check link of the element is the same');\n            cy.get(defaultElementSelector).should('have.attr', 'href').and('include', elementLinkValue);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":14023,"startedAt":"2021-01-12T13:43:52.077Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01B.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01B.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01B.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":25770,"startedAt":"2021-01-12T13:44:13.444Z","endedAt":"2021-01-12T13:44:39.214Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:44:13.448Z","end":"2021-01-12T13:44:39.266Z","duration":25818},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound image field","Image element"],"state":"passed","body":"function () {\n        var elementType = 'Image';\n        var elementValue = '100x50.png';\n        var fieldName = elementType + ' Field';\n        /* Phase 1 - Setting initial state */\n\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        createImageField(fieldName); // Apply override\n\n        cy.step('Override value of the field');\n        overrideImageFieldOnSymbolInstance(fieldName, elementValue);\n        /* Phase 2 - Performing action */\n\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        /* Phase 3 - Checking expectations */\n\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(defaultElementSelector);\n        symbolMasterSettings.getBindingUI('Image').isBound();\n        cy.step('Check that field on the inner symbol is bound');\n        topbar.clickBackToSymbolInstanceButton();\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check value of the element is the same');\n        canvas.within(function () {\n          cy.get(defaultElementSelector).should('have.attr', 'src').and('include', elementValue);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":20646,"startedAt":"2021-01-12T13:44:18.564Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01C.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01C.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01C.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":26475,"startedAt":"2021-01-12T13:44:47.373Z","endedAt":"2021-01-12T13:45:13.848Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:44:47.377Z","end":"2021-01-12T13:45:13.904Z","duration":26527},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Elements with bound video field","Video element"],"state":"passed","body":"function () {\n        var elementType = 'Video';\n        var elementValue = 'https://www.youtube.com/watch?v=eAT0w3T4t-M';\n        var fieldName = elementType + ' Field';\n        /* Phase 1 - Setting initial state */\n\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        createVideoField(fieldName); // Apply override\n\n        cy.step('Override value of the field');\n        overrideVideoFieldOnSymbolInstance(fieldName, elementValue);\n        /* Phase 2 - Performing action */\n\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        /* Phase 3 - Checking expectations */\n\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(defaultElementSelector);\n        symbolMasterSettings.getBindingUI('Video').isBound();\n        cy.step('Check that field on the inner symbol is bound');\n        topbar.clickBackToSymbolInstanceButton();\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check value of the element is the same');\n        canvas.within(function () {\n          cy.get(defaultElementSelector + ' > iframe').should('have.attr', 'src').and('include', encodeURIComponent('https://www.youtube.com/embed'));\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":20807,"startedAt":"2021-01-12T13:44:53.039Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01D.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01D.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01D.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":27293,"startedAt":"2021-01-12T13:45:21.663Z","endedAt":"2021-01-12T13:45:48.956Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:45:21.665Z","end":"2021-01-12T13:45:48.961Z","duration":27296},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 01","Creating symbol inside another symbol around elements with bindings","Element with bound rich text field","Rich text element"],"state":"passed","body":"function () {\n        var elementType = 'RichText';\n        var elementValue = 'Almighty Thanos';\n        var fieldName = elementType + ' Field';\n        var elementSelector = 'div > div > div';\n        /* Phase 1 - Setting initial state */\n\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(elementSelector);\n        createRichTextField(fieldName);\n        cy.step('Close notification to make close for rich text editor visible');\n        workspace.getNotificationList().eq(0).close(); // Apply override\n\n        cy.step('Override value of the field');\n        overrideRichTextFieldOnSymbolInstance(fieldName, elementValue, elementSelector);\n        /* Phase 2 - Performing action */\n\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        /* Phase 3 - Checking expectations */\n\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(elementSelector);\n        symbolMasterSettings.getBindingUI('Content').isBound();\n        cy.step('Check that field on the inner symbol is bound');\n        topbar.clickBackToSymbolInstanceButton();\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check value of the element is the same');\n        canvas.within(function () {\n          cy.get(elementSelector).should('have.text', elementValue);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":21552,"startedAt":"2021-01-12T13:45:27.402Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01E.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01E.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-01E.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":7,"tests":10,"passes":10,"pending":0,"skipped":0,"failures":0,"duration":141663,"startedAt":"2021-01-12T13:45:57.507Z","endedAt":"2021-01-12T13:48:19.170Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":7,"tests":10,"passes":10,"pending":0,"failures":0,"start":"2021-01-12T13:45:57.509Z","end":"2021-01-12T13:48:19.189Z","duration":141680},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Open Designer with empty project with assets');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.emptyWithAssets);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    symbolMasterSettings = propertiesTab.symbolMasterSettings;\n    symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    cy.step('Save the site');\n    cy.get('body').type(\"{command} s\");\n    cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    canvas.selectElement(outerDivSelector);\n    canvas.deleteElement();\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default text content is passed","Heading element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.doubleClickElement(defaultElementSelector);\n          canvas.type(defaultElementSelector, elementValue);\n          cy.step('Create field');\n          createTextField(fieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(fieldName, 'Text');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('contain.text', elementValue);\n          });\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue(fieldName + ' in Parent Symbol').should('contain.value', elementValue);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":25258,"startedAt":"2021-01-12T13:46:02.618Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default text content is passed","Paragraph element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.doubleClickElement(defaultElementSelector);\n          canvas.type(defaultElementSelector, elementValue);\n          cy.step('Create field');\n          createTextField(fieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(fieldName, 'Text');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('contain.text', elementValue);\n          });\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue(fieldName + ' in Parent Symbol').should('contain.value', elementValue);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9731,"startedAt":"2021-01-12T13:46:27.915Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default text content is passed","TextBlock element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.doubleClickElement(defaultElementSelector);\n          canvas.type(defaultElementSelector, elementValue);\n          cy.step('Create field');\n          createTextField(fieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(fieldName, 'Text');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('contain.text', elementValue);\n          });\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue(fieldName + ' in Parent Symbol').should('contain.value', elementValue);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12727,"startedAt":"2021-01-12T13:46:37.648Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default text content is passed","Blockquote element"],"state":"passed","body":"function () {\n          var fieldName = elementType + ' Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.doubleClickElement(defaultElementSelector);\n          canvas.type(defaultElementSelector, elementValue);\n          cy.step('Create field');\n          createTextField(fieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(fieldName, 'Text');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(fieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Text').isBound();\n          cy.step('Check value of the element is the same');\n          canvas.within(function () {\n            cy.get(defaultElementSelector).should('contain.text', elementValue);\n          });\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue(fieldName + ' in Parent Symbol').should('contain.value', elementValue);\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":10094,"startedAt":"2021-01-12T13:46:50.403Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default image is passed","Image element"],"state":"passed","body":"function () {\n        var elementType = 'Image';\n        var fieldName = elementType + ' Field';\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.get(\"[data-automation-id=\\\"Type--Plugin_Image_Image\\\"]\").click();\n        cy.step('Select first image in Asset Manager');\n        cy.get('#assets-tab .bem-LazyGrid').find('.bem-AssetGrid_Item').eq(0).click();\n        cy.step('Create field');\n        createImageField(fieldName);\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Bind override field to parent symbol');\n        bindFieldToParent(fieldName, 'Image');\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(innerDivSelector);\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Check that field on the inner symbol is bound');\n        symbolMasterSettings.getBindingUI('Image').isBound();\n        cy.step('Assert oncanvas image source is correct');\n        canvas.within(function () {\n          cy.get('div > div > img').should('have.attr', 'src').and('match', /700x700/);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9210,"startedAt":"2021-01-12T13:47:00.499Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default link is passed","TextLink element"],"state":"passed","body":"function () {\n          var linkFieldName = elementType + ' Link Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Add URL content');\n          cy.get(\"[data-automation-id=\\\"Type--Plugin_Text_URL\\\"]\").type('default-url');\n          cy.step('Create field');\n          createLinkField(linkFieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(linkFieldName, 'Link');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue('URL').should('contain.value', 'default-url');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13097,"startedAt":"2021-01-12T13:47:09.710Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default link is passed","LinkBlock element"],"state":"passed","body":"function () {\n          var linkFieldName = elementType + ' Link Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Add URL content');\n          cy.get(\"[data-automation-id=\\\"Type--Plugin_Text_URL\\\"]\").type('default-url');\n          cy.step('Create field');\n          createLinkField(linkFieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(linkFieldName, 'Link');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue('URL').should('contain.value', 'default-url');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":14146,"startedAt":"2021-01-12T13:47:22.825Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default link is passed","Button element"],"state":"passed","body":"function () {\n          var linkFieldName = elementType + ' Link Field';\n          settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n          cy.step('Convert outer div to the symbol');\n          createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step('Convert inner div to symbol');\n          createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Add URL content');\n          cy.get(\"[data-automation-id=\\\"Type--Plugin_Text_URL\\\"]\").type('default-url');\n          cy.step('Create field');\n          createLinkField(linkFieldName);\n          cy.step('Enter edit mode for outer symbol');\n          canvas.editSymbol(outerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Bind override field to parent symbol');\n          bindFieldToParent(linkFieldName, 'Link');\n          cy.step('Check that field on the element is bound');\n          canvas.selectElement(innerDivSelector);\n          symbolMasterSettings.getBindingUI(linkFieldName).isBound();\n          cy.step('Enter edit mode for inner symbol');\n          canvas.editSymbol(innerDivSelector);\n          cy.step(\"Select \".concat(elementType, \" element\"));\n          canvas.selectElement(defaultElementSelector);\n          cy.step('Check that field on the inner symbol is bound');\n          symbolMasterSettings.getBindingUI('Link').isBound();\n          cy.step('Press back to instance button to go to outer symbol instance');\n          topbar.clickBackToSymbolInstanceButton();\n          topbar.clickBackToSymbolInstanceButton();\n          cy.step(\"Select outer symbol\");\n          canvas.selectElement(outerDivSelector);\n          cy.step('Check value of the override field is the default');\n          symbolInstanceSettings.getDefaultValue('URL').should('contain.value', 'default-url');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12234,"startedAt":"2021-01-12T13:47:37.003Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Default video is passed","Video element"],"state":"passed","body":"function () {\n        var elementType = 'Video';\n        var fieldName = elementType + ' Field';\n        var videoUrl = 'https://youtube.com/watch?v=wkhRnmLxKH4';\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" Outer Symbol\"));\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" Inner Symbol\"));\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Add URL content');\n        cy.get(\"[data-automation-id=\\\"symbol-instance-settings\\\"]\").find('input').type(videoUrl + '{esc}');\n        cy.step('Wait for the video to be validated');\n        cy.get('[data-automation-id=\"video-field-validation-status-indicator\"][data-status=\"DEFAULT\"]');\n        cy.step('Create field');\n        createVideoField(fieldName);\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Bind override field to parent symbol');\n        bindFieldToParent(fieldName, 'Video');\n        cy.step('Check that field on the element is bound');\n        canvas.selectElement(innerDivSelector);\n        symbolMasterSettings.getBindingUI(fieldName).isBound();\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Check that field on the inner symbol is bound');\n        symbolMasterSettings.getBindingUI('Video').isBound();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step(\"Select outer symbol\");\n        canvas.selectElement(outerDivSelector);\n        cy.step('Check value of the override field is the default');\n        cy.get(\"[data-automation-id=\\\"symbol-instance-settings\\\"]\").find('input').should('contain.value', videoUrl);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17512,"startedAt":"2021-01-12T13:47:49.261Z","screenshots":[]}]},{"title":["Nested Symbols & Overrides - 02","Bound fields from child to parent and assert default content is passed","Is possible to bind an image from child to parent","Image element"],"state":"passed","body":"function () {\n        var elementType = 'Image';\n        var fieldName = elementType + ' Field';\n        settingUpTreeStructure(['DivBlock', 'DivBlock', elementType]);\n        cy.step('Convert outer div to the symbol');\n        createSymbolFromElement(outerDivSelector, \"\".concat(elementType, \" 2 Outer Symbol\"));\n        cy.step('Enter edit mode for outer symbol');\n        canvas.editSymbol(outerDivSelector);\n        cy.step('Convert inner div to symbol');\n        createSymbolFromElement(innerDivSelector, \"\".concat(elementType, \" 2 Inner Symbol\"));\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Create field');\n        createImageField(fieldName);\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check the binding button is there');\n        cy.get(\"[data-automation-id=\\\"binding-button_Image Field\\\"]\").should('be.visible');\n        cy.step('Enter edit mode for inner symbol');\n        canvas.editSymbol(innerDivSelector);\n        cy.step(\"Select \".concat(elementType, \" element and update its content\"));\n        canvas.selectElement(defaultElementSelector);\n        cy.step('Open field dropdown');\n        cy.get(\"[data-automation-id=\\\"binding-pill_Image\\\"]\").click();\n        cy.step('Select edit settings');\n        cy.get(\"[data-automation-id=\\\"edit-override-field\\\"]\").click();\n        cy.step('Choose image');\n        cy.get(\"[data-automation-id=\\\"Type--Plugin_Image_Default Image\\\"]\").click();\n        cy.step('Select first image in Asset Manager');\n        cy.get('#assets-tab .bem-LazyGrid').find('.bem-AssetGrid_Item').eq(0).click();\n        cy.step('Press back to instance button to go to outer symbol instance');\n        topbar.clickBackToSymbolInstanceButton();\n        cy.step('Check the binding button is there');\n        cy.get(\"[data-automation-id=\\\"binding-button_Image Field\\\"]\").should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12367,"startedAt":"2021-01-12T13:48:06.790Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-02.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-02.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/symbols-nestability-overrides-02.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":8,"tests":15,"passes":15,"pending":0,"skipped":0,"failures":0,"duration":84166,"startedAt":"2021-01-12T13:48:26.427Z","endedAt":"2021-01-12T13:49:50.593Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":8,"tests":15,"passes":15,"pending":0,"failures":0,"start":"2021-01-12T13:48:26.430Z","end":"2021-01-12T13:49:50.608Z","duration":84178},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select element');\n      canvas.selectElement(symbolTag);\n      cy.step('Get Symbol Instance');\n      symbolInstanceSettings = propertiesTab.symbolInstanceSettings;\n      cy.step('Assert Symbol Instance Settings exists');\n      symbolInstanceSettings.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Text field","Single Text"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var headingField = symbolInstanceSettings.getField('SingleText');\n        cy.step('Check default value');\n        headingField.get('Text').should('have.value', 'This is default single line');\n        cy.step('Set value');\n        headingField.set('Text', 'something').get('Text').should('have.value', 'something');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":19978,"startedAt":"2021-01-12T13:48:32.009Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Text field","Multi Text"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var headingField = symbolInstanceSettings.getField('MultiText');\n        cy.step('Check default value');\n        headingField.get('Text').should('have.value', 'This is default\\nmulti line');\n        cy.step('Set value');\n        headingField.set('Text', 'else').get('Text').should('have.value', 'else');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3202,"startedAt":"2021-01-12T13:48:52.005Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Rich Text Field","Rich Text Field"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var richTextField = symbolInstanceSettings.getField('Rich Text');\n        cy.step('Open Rich Text edit container');\n        var editRichText = richTextField.edit();\n        cy.step('Edit the text');\n        editRichText.set('Awesome!');\n        cy.step('Assert the text is updated');\n        editRichText.get().should('have.text', 'Awesome!');\n        cy.step('Close the modal');\n        editRichText.close();\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4699,"startedAt":"2021-01-12T13:48:55.209Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Image Field","Image Field"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var imageField = symbolInstanceSettings.getField('Image');\n        cy.step('Set Image');\n        imageField.setAsset('Image', 'Add12.svg');\n        cy.step('Get Image');\n        imageField.getAsset('Image').should('have.text', 'Add12.svg');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3175,"startedAt":"2021-01-12T13:48:59.910Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","External URL"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'External URL');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'External URL');\n        cy.step('Set URL');\n        linkField.set('URL', 'https://www.webflow.com');\n        cy.step('Check URL');\n        linkField.get('URL').should('have.value', 'https://www.webflow.com');\n        cy.step('Set toggle');\n        linkField.setToggle('Open in', 'New tab');\n        cy.step('Check toggle');\n        linkField.getToggle('Open in', 'New tab').should('be.checked');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":8751,"startedAt":"2021-01-12T13:49:03.087Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","Page"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Page');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Page');\n        cy.step('Set page');\n        linkField.setDropdown('Page', 'Home');\n        cy.step('Check page');\n        linkField.getDropdown('Page').should('have.text', 'Home');\n        cy.step('Set toggle');\n        linkField.setToggle('Open in', 'New tab');\n        cy.step('Check toggle');\n        linkField.getToggle('Open in', 'New tab').should('be.checked');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2913,"startedAt":"2021-01-12T13:49:11.847Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","Section"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Section');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Section');\n        cy.step('Set section');\n        linkField.setDropdown('Section', 'master-1');\n        cy.step('Check page');\n        linkField.getDropdown('Section').should('have.text', 'master-1');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5689,"startedAt":"2021-01-12T13:49:14.761Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","Email"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Email');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Email');\n        cy.step('Set Email');\n        linkField.set('Email', 'test@webflow.com');\n        cy.step('Check Email');\n        linkField.get('Email').should('have.value', 'test@webflow.com');\n        cy.step('Set Subject');\n        linkField.set('Subject', 'Testing!');\n        cy.step('Get Subject');\n        linkField.get('Subject').should('have.value', 'Testing!');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":8374,"startedAt":"2021-01-12T13:49:20.460Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","Phone"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Phone');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Phone');\n        cy.step('Set Phone');\n        linkField.set('Phone', '+1234567890');\n        cy.step('Check Phone');\n        linkField.get('Phone').should('have.value', '+1234567890');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5841,"startedAt":"2021-01-12T13:49:28.846Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Link Field","File"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'File');\n        cy.step('Get type');\n        linkField.getDropdown('Type').should('have.text', 'File');\n        cy.step('Set new file');\n        linkField.setAsset('Asset', 'Add12.svg');\n        cy.step('Get new file');\n        linkField.getAsset('Asset').should('have.text', 'Add12.svg');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2910,"startedAt":"2021-01-12T13:49:34.694Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Video Field","Invalid Video URL"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.invalidStubbed);\n        cy.step('Grab a field');\n        var videoField = symbolInstanceSettings.getField('Video');\n        cy.step('Set incorrect value');\n        videoField.set('URL', 'abc');\n        cy.step(\"Verify if the note says it's invalid\");\n        videoField.isVideoValid(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2316,"startedAt":"2021-01-12T13:49:37.606Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Video Field","Valid Video URL"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.stubbed);\n        cy.step('Grab a field');\n        var videoField = symbolInstanceSettings.getField('Video');\n        cy.step('Set correct value');\n        videoField.set('URL', _cypressAppControls.youtubeLinks.valid[1]).isVideoValid();\n        cy.step('Check value');\n        videoField.get('URL').should('have.value', _cypressAppControls.youtubeLinks.valid[1]);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3731,"startedAt":"2021-01-12T13:49:39.923Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Other","field is unlinked"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstanceSettings.getField('Link');\n        cy.step('Assert field is linked');\n        linkField.isLinked(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1896,"startedAt":"2021-01-12T13:49:43.661Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Other","Delete unlinked field"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var randomField = symbolInstanceSettings.getField('extrafield');\n        cy.step('Assert field is unlinked');\n        randomField.isLinked(false);\n        cy.step('Remove field');\n        randomField.removeField();\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2597,"startedAt":"2021-01-12T13:49:45.558Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 01","#1 - Update unlinked fields","Other","Reset overrides"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var headingField = symbolInstanceSettings.getField('SingleText');\n        cy.step('Grab a field value');\n        headingField.get('Text') // this is to make sure that the value WAS different before reset\n        .should('not.have.value', 'Heading');\n        cy.step('Reset overrides');\n        symbolInstanceSettings.resetOverrides();\n        cy.step('Grab a field value again and assert');\n        headingField.get('Text').and('have.value', 'This is default single line');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2434,"startedAt":"2021-01-12T13:49:48.157Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-01.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-01.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-01.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":7,"tests":12,"passes":12,"pending":0,"skipped":0,"failures":0,"duration":181214,"startedAt":"2021-01-12T13:49:58.498Z","endedAt":"2021-01-12T13:52:59.712Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":7,"tests":12,"passes":12,"pending":0,"failures":0,"start":"2021-01-12T13:49:58.501Z","end":"2021-01-12T13:52:59.732Z","duration":181231},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    canvas = workspace.getCanvas();\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      canvas.editSymbol(symbolTag);\n      symbolMasterSettings = propertiesTab.symbolMasterSettings;\n      symbolMasterSettings.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Text field","Single Line"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Text');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Text');\n        cy.step('Get Multiline (should be true)');\n        newField.getCheckbox('Multiline').should('be.checked');\n        cy.step('Toggle Multiline');\n        newField.toggleCheckbox('Multiline');\n        cy.step('Get Multiline (should be false)');\n        newField.getCheckbox('Multiline').should('not.be.checked');\n        cy.step('Set Name');\n        newField.set('Name', 'TextField');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'TextField');\n        cy.step('Set Text');\n        newField.set('Text', 'This is a custom text');\n        cy.step('Get Text');\n        newField.get('Text').should('have.value', 'This is a custom text');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('TextField').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":27583,"startedAt":"2021-01-12T13:50:04.097Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Text field","Multiline Line"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Text');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Text');\n        cy.step('Get Multiline (should be true)');\n        newField.getCheckbox('Multiline').should('be.checked');\n        cy.step('Set Name');\n        newField.set('Name', 'MultiTextField');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'MultiTextField');\n        cy.step('Set Text');\n        newField.set('Text', 'This is a custom text');\n        cy.step('Get Text');\n        newField.get('Text').should('have.value', 'This is a custom text');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('MultiTextField').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":18558,"startedAt":"2021-01-12T13:50:31.699Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Rich Text","Rich Text"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Rich Text');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Rich Text');\n        cy.step('Set Name');\n        newField.set('Name', 'RichTextField');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'RichTextField');\n        cy.step('Edit Rich Text');\n        var richText = newField.edit();\n        cy.step('Set text');\n        richText.set('Awesome!');\n        cy.step('Assert the text is updated');\n        richText.get().should('have.text', 'Awesome!');\n        cy.step('Close the modal');\n        richText.close();\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('RichTextField').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13052,"startedAt":"2021-01-12T13:50:50.270Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Image Field","Image Field"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Image');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Image');\n        cy.step('Set Name');\n        newField.set('Name', 'ImageField');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'ImageField');\n        cy.step('Set Image');\n        newField.setAsset('Image', 'Add12.svg');\n        cy.step('Get Image');\n        newField.getAsset('Image').should('have.text', 'Add12.svg');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('ImageField').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9674,"startedAt":"2021-01-12T13:51:03.337Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","External URL"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkExternalURL');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkExternalURL');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'External URL', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'External URL');\n        cy.step('Set URL');\n        newField.set('URL', 'www.webflow.com');\n        cy.step('Get URL');\n        newField.get('URL').should('have.value', 'www.webflow.com');\n        cy.step('Set toggle');\n        newField.setToggle('Open in', 'New tab');\n        cy.step('Get toggle');\n        newField.getToggle('Open in', 'New tab').should('be.checked');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkExternalURL').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":22040,"startedAt":"2021-01-12T13:51:13.020Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","Page"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkPage');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkPage');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'Page', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'Page');\n        cy.step('Set Page');\n        newField.setDropdown('Page', 'Home', true);\n        cy.step('Get Page');\n        newField.getDropdown('Page', true).should('have.text', 'Home');\n        cy.step('Set toggle');\n        newField.setToggle('Open in', 'New tab');\n        cy.step('Get toggle');\n        newField.getToggle('Open in', 'New tab').should('be.checked');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkPage').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9298,"startedAt":"2021-01-12T13:51:35.072Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","Section"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkSection');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkSection');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'Section', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'Section');\n        cy.step('Set Section');\n        newField.setDropdown('Section', 'master-4', true);\n        cy.step('Get Section');\n        newField.getDropdown('Section', true).should('have.text', 'master-4');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkSection').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":11509,"startedAt":"2021-01-12T13:51:44.381Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","Email"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkEmail');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkEmail');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'Email', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'Email');\n        cy.step('Set Email');\n        newField.set('Email', 'test@webflow.com');\n        cy.step('Get Email');\n        newField.get('Email').should('have.value', 'test@webflow.com');\n        cy.step('Set Subject');\n        newField.set('Subject', 'CTA!');\n        cy.step('Get Subject');\n        newField.get('Subject').should('have.value', 'CTA!');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkEmail').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":19168,"startedAt":"2021-01-12T13:51:55.900Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","Phone"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkPhone');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkPhone');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'Phone', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'Phone');\n        cy.step('Set Phone');\n        newField.set('Phone', '+123456789');\n        cy.step('Get Phone');\n        newField.get('Phone').should('have.value', '+123456789');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkPhone').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13700,"startedAt":"2021-01-12T13:52:15.079Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Link Field","Image Field"],"state":"passed","body":"function () {\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Link');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Link');\n        cy.step('Set Name');\n        newField.set('Name', 'LinkFile');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'LinkFile');\n        cy.step('Set Link Type');\n        newField.setDropdown('Type', 'File', true);\n        cy.step('Get Link Type');\n        newField.getDropdown('Type', true).should('have.text', 'File');\n        cy.step('Set Asset');\n        newField.setAsset('Asset', 'Add12.svg');\n        cy.step('Get Asset');\n        newField.getAsset('Asset').should('have.text', 'Add12.svg');\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('LinkFile').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":10352,"startedAt":"2021-01-12T13:52:28.788Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Video","Invalid Video Field"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.invalidStubbed);\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Video');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Video');\n        cy.step('Set Name');\n        newField.set('Name', 'Invalid Video');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'Invalid Video');\n        cy.step('Set URL');\n        newField.set('URL', 'abc');\n        cy.step('Assert URL is valid');\n        newField.isVideoValid(false);\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('Invalid Video').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":11399,"startedAt":"2021-01-12T13:52:39.157Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via Symbol Master","Video","Valid Video Field"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.stubbed);\n        cy.step('Create new field');\n        var newField = symbolMasterSettings.createNewField();\n        cy.step('Set Type');\n        newField.setDropdown('Type', 'Video');\n        cy.step('Get Type');\n        newField.getDropdown('Type').should('have.text', 'Video');\n        cy.step('Set Name');\n        newField.set('Name', 'Valid Video');\n        cy.step('Get Name');\n        newField.get('Name').should('have.value', 'Valid Video');\n        cy.step('Set URL');\n        newField.set('URL', _cypressAppControls.youtubeLinks.valid[1]);\n        cy.step('Assert URL is valid');\n        newField.isVideoValid(true);\n        cy.step('Get URL');\n        newField.get('URL').should('have.value', _cypressAppControls.youtubeLinks.valid[1]);\n        cy.step('Save by closing');\n        newField.save();\n        cy.step('Assert the field exists');\n        symbolMasterSettings.findField('Valid Video').getNode().should('be.visible');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":9138,"startedAt":"2021-01-12T13:52:50.565Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02a.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02a.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02a.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":7,"tests":5,"passes":5,"pending":0,"skipped":0,"failures":0,"duration":43869,"startedAt":"2021-01-12T13:53:06.918Z","endedAt":"2021-01-12T13:53:50.787Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":7,"tests":5,"passes":5,"pending":0,"failures":0,"start":"2021-01-12T13:53:06.920Z","end":"2021-01-12T13:53:50.802Z","duration":43882},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    canvas = workspace.getCanvas();\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      canvas.editSymbol(symbolTag);\n      symbolMasterSettings = propertiesTab.symbolMasterSettings;\n      symbolMasterSettings.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via each element","Text field","Single Line"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #singletext\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Text');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Click Create New Field');\n        var newField = binding.createNewField();\n        cy.step('Assert that the modal shows up');\n        newField.getNode().should('be.visible');\n        cy.step('Set new name for the field');\n        newField.setName('SingleText');\n        cy.step('Click Create override field');\n        newField.create();\n        cy.step('Assert element is now bound');\n        binding.isBound();\n        cy.step('Open binding menu again');\n        binding.open();\n        cy.step('Unbind the element');\n        binding.unbind();\n        cy.step('Assert the element is now unbound');\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17571,"startedAt":"2021-01-12T13:53:12.241Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via each element","Rich Text","Rich Text"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #richtext\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Content');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Click Create New Field');\n        var newField = binding.createNewField();\n        cy.step('Assert that the modal shows up');\n        newField.getNode().should('be.visible');\n        cy.step('Set new name for the field');\n        newField.setName('RichText');\n        cy.step('Click Create override field');\n        newField.create();\n        cy.step('Assert element is now bound');\n        binding.isBound();\n        cy.step('Open binding menu again');\n        binding.open();\n        cy.step('Unbind the element');\n        binding.unbind();\n        cy.step('Assert the element is now unbound');\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5402,"startedAt":"2021-01-12T13:53:29.832Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via each element","Image","Image"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #image\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Image');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Click Create New Field');\n        var newField = binding.createNewField();\n        cy.step('Assert that the modal shows up');\n        newField.getNode().should('be.visible');\n        cy.step('Set new name for the field');\n        newField.setName('Image');\n        cy.step('Click Create override field');\n        newField.create();\n        cy.step('Assert element is now bound');\n        binding.isBound();\n        cy.step('Open binding menu again');\n        binding.open();\n        cy.step('Unbind the element');\n        binding.unbind();\n        cy.step('Assert the element is now unbound');\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4226,"startedAt":"2021-01-12T13:53:35.245Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via each element","Link Field","Link Field"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #link\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Link');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Click Create New Field');\n        var newField = binding.createNewField();\n        cy.step('Assert that the modal shows up');\n        newField.getNode().should('be.visible');\n        cy.step('Set new name for the field');\n        newField.setName('Link');\n        cy.step('Click Create override field');\n        newField.create();\n        cy.step('Assert element is now bound');\n        binding.isBound();\n        cy.step('Open binding menu again');\n        binding.open();\n        cy.step('Unbind the element');\n        binding.unbind();\n        cy.step('Assert the element is now unbound');\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":6604,"startedAt":"2021-01-12T13:53:39.472Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 02","#2 - Create new fields via each element","Video","Video"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #video\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Video');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Click Create New Field');\n        var newField = binding.createNewField();\n        cy.step('Assert that the modal shows up');\n        newField.getNode().should('be.visible');\n        cy.step('Set new name for the field');\n        newField.setName('Video');\n        cy.step('Click Create override field');\n        newField.create();\n        cy.step('Assert element is now bound');\n        binding.isBound();\n        cy.step('Open binding menu again');\n        binding.open();\n        cy.step('Unbind the element');\n        binding.unbind();\n        cy.step('Assert the element is now unbound');\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4708,"startedAt":"2021-01-12T13:53:46.077Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02b.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02b.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-02b.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":2,"tests":3,"passes":3,"pending":0,"skipped":0,"failures":0,"duration":29683,"startedAt":"2021-01-12T13:53:58.352Z","endedAt":"2021-01-12T13:54:28.035Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":2,"tests":3,"passes":3,"pending":0,"failures":0,"start":"2021-01-12T13:53:58.354Z","end":"2021-01-12T13:54:28.056Z","duration":29702},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    canvas = workspace.getCanvas();\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      canvas.editSymbol(symbolTag);\n      symbolMasterSettings = propertiesTab.symbolMasterSettings;\n      symbolMasterSettings.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 03","#3 - Remove fields (linked and unlinked)","Unlinked field"],"state":"passed","body":"function () {\n      cy.step('Get a field');\n      var unlinkedField = symbolMasterSettings.findField('Text');\n      cy.step('Assert unlinked field is visible');\n      unlinkedField.getNode().should('be.visible');\n      cy.step('Remove the unlinked field');\n      unlinkedField.remove();\n      cy.step('Assert the field no longer exists');\n      unlinkedField.getNode().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":16692,"startedAt":"2021-01-12T13:54:03.422Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 03","#3 - Remove fields (linked and unlinked)","Linked field - cancel removal"],"state":"passed","body":"function () {\n      cy.step('Get a field');\n      var boundField = symbolMasterSettings.findField('Link');\n      boundField.getNode().should('be.visible');\n      cy.step('Click field removal');\n      var fieldRemoval = boundField.remove();\n      cy.step('Removal confirmation window should be visible');\n      fieldRemoval.getNode().should('be.visible');\n      cy.step('Press cancel');\n      fieldRemoval.cancel();\n      cy.step('Removal confirmation window should not exist');\n      fieldRemoval.getNode().should('not.exist');\n      cy.step('Field should still exist');\n      boundField.getNode().should('be.visible');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2949,"startedAt":"2021-01-12T13:54:20.124Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 03","#3 - Remove fields (linked and unlinked)","Linked field - confirm removal"],"state":"passed","body":"function () {\n      cy.step('Get a field');\n      var boundField = symbolMasterSettings.findField('Link');\n      boundField.getNode().should('be.visible');\n      cy.step('Click field removal');\n      var fieldRemoval = boundField.remove();\n      cy.step('Removal confirmation window should be visible');\n      fieldRemoval.getNode().should('be.visible');\n      cy.step('Press confirm');\n      fieldRemoval.confirm();\n      cy.step('Removal confirmation window should not exist');\n      fieldRemoval.getNode().should('not.exist');\n      cy.step('Field should still exist');\n      boundField.getNode().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4951,"startedAt":"2021-01-12T13:54:23.075Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-03.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-03.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-03.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":7,"tests":7,"passes":7,"pending":0,"skipped":0,"failures":0,"duration":51129,"startedAt":"2021-01-12T13:54:35.088Z","endedAt":"2021-01-12T13:55:26.217Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":7,"tests":7,"passes":7,"pending":0,"failures":0,"start":"2021-01-12T13:54:35.090Z","end":"2021-01-12T13:55:26.241Z","duration":51151},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    canvas = workspace.getCanvas();\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n    cy.step('Assert default values for on-canvas elements');\n    canvas.within(function () {\n      cy.get(\"\".concat(symbolTag, \" #heading\")).should('have.text', 'Heading');\n      cy.get(\"\".concat(symbolTag, \" #richtext\")).should('contain', 'a Rich Text element?');\n      cy.get(\"\".concat(symbolTag, \" #singletext\")).should('contain', 'Lorem ipsum dolor sit amet');\n      cy.get(\"\".concat(symbolTag, \" #multitext\")).should('contain', 'Lorem ipsum dolor sit amet');\n      cy.get(\"\".concat(symbolTag, \" #image\")).should('have.attr', 'src').and('match', /\\/placeholder.(.*).svg/g);\n      cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', '#');\n      cy.get(\"\".concat(symbolTag, \" #video iframe\")).should('not.exist');\n    });\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Edit Symbol');\n      canvas.editSymbol(symbolTag);\n      symbolMasterSettings = propertiesTab.symbolMasterSettings;\n      cy.step('Assert symbol settings exist');\n      symbolMasterSettings.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Text field","Single Line"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #singletext\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Text');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('SingleText');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'SingleText');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #singletext\")).should('contain', 'SingleText');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #singletext\")).should('contain', 'SingleText');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":19244,"startedAt":"2021-01-12T13:54:40.248Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Text field","Multi Line"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #multitext\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Text');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('MultiText');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'MultiText');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #multitext\")).should('contain', 'MultiText');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #multitext\")).should('contain', 'MultiText');\n        });\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4119,"startedAt":"2021-01-12T13:54:59.516Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Rich Text field","Rich Text"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #richtext\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Content');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('Rich Text');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'Rich Text');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #richtext\")).should('contain', 'RichText');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #richtext\")).should('contain', 'RichText');\n        });\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4530,"startedAt":"2021-01-12T13:55:03.636Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Image field","Image"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #image\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Image');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('Image');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'Image');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #image\")).should('have.attr', 'src').and('match', /Add.svg/g);\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #image\")).should('have.attr', 'src').and('match', /placeholder\\.(.*)\\.svg/g);\n        });\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4893,"startedAt":"2021-01-12T13:55:08.168Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Link field","Text"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #link\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Text');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('SingleText');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'SingleText');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.text', 'SingleText');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.text', 'SingleText');\n        });\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4335,"startedAt":"2021-01-12T13:55:13.072Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Link field","Link"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #link\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Link');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('Link');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'Link');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', 'http://www.webflow.com');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', 'http://www.webflow.com');\n        });\n        cy.step(\"Check if it's not bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3584,"startedAt":"2021-01-12T13:55:17.408Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 04","#4 - Bind fields","Video field","Video"],"state":"passed","body":"function () {\n        cy.step('Select element');\n        canvas.selectElement(\"\".concat(symbolTag, \" #video\"));\n        cy.step('Grab binding UI for a field');\n        var binding = symbolMasterSettings.getBindingUI('Video');\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Pick field');\n        binding.set('Video');\n        cy.step('Assert field is bound');\n        binding.get().should('contain', 'Video');\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #video iframe\")).should('exist');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound();\n        cy.step('Open binding UI');\n        binding.open();\n        cy.step('Unlink the field');\n        binding.unbind();\n        cy.step('Verify canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #video iframe\")).should('exist');\n        });\n        cy.step(\"Check if it's bound\");\n        binding.isBound(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5223,"startedAt":"2021-01-12T13:55:20.993Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-04.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-04.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-04.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":7,"tests":12,"passes":12,"pending":0,"skipped":0,"failures":0,"duration":76140,"startedAt":"2021-01-12T13:55:34.115Z","endedAt":"2021-01-12T13:56:50.255Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":7,"tests":12,"passes":12,"pending":0,"failures":0,"start":"2021-01-12T13:55:34.118Z","end":"2021-01-12T13:56:50.282Z","duration":76164},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.symbolOverrides);\n    canvas = workspace.getCanvas();\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      canvas.selectElement(symbolTag);\n      symbolInstance = propertiesTab.symbolInstanceSettings;\n      symbolInstance.getNode().should('exist');\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n      cy.step('Save the site');\n      cy.get('body').type(\"{command} s\");\n      cy.get('.bem-TopBar_Body_SyncStatus svg').should('have.attr', 'data-icon', 'CircleCheckLarge');\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Text field","Single Text"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var headingField = symbolInstance.getField('SingleText');\n        cy.step('Check default value');\n        headingField.get('Text').should('have.value', 'This is default single line');\n        cy.step('Check default value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #singletext\")).should('have.text', 'This is default single line');\n        });\n        cy.step('Set value');\n        headingField.set('Text', 'something').get('Text').should('have.value', 'something');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #singletext\")).should('have.text', 'something');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":18017,"startedAt":"2021-01-12T13:55:39.311Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Text field","Multi Text"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var headingField = symbolInstance.getField('MultiText');\n        cy.step('Check default value');\n        headingField.get('Text').should('have.value', 'This is default multi line');\n        cy.step('Check default value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #multitext\")).should('have.text', 'This is default multi line');\n        });\n        cy.step('Set value');\n        headingField.set('Text', 'else').get('Text').should('have.value', 'else');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #multitext\")).should('have.text', 'else');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4062,"startedAt":"2021-01-12T13:55:57.342Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Rich Text Field","Rich Text Field"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var richTextField = symbolInstance.getField('Rich Text');\n        cy.step('Check default value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #richtext\")).should('contain', 'Default Rich Text Content');\n        });\n        cy.step('Open Rich Text edit container');\n        var editRichText = richTextField.edit();\n        cy.step('Edit the text');\n        editRichText.set('Awesome!');\n        cy.step('Assert the text is updated');\n        editRichText.get().should('have.text', 'Awesome!');\n        cy.step('Close the modal');\n        editRichText.close();\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #richtext\")).should('contain', 'Awesome!');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4286,"startedAt":"2021-01-12T13:56:01.414Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Image Field","Image Field"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var imageField = symbolInstance.getField('Image');\n        cy.step('Check default value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #image\")).should('have.attr', 'src').and('match', /Add\\.svg$/);\n        });\n        cy.step('Set Image');\n        imageField.setAsset('Image', 'Add12.svg');\n        cy.step('Get Image');\n        imageField.getAsset('Image').should('have.text', 'Add12.svg');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #image\")).should('have.attr', 'src').and('match', /Add12\\.svg$/);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3762,"startedAt":"2021-01-12T13:56:05.709Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: External URL"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'External URL');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'External URL');\n        cy.step('Set URL');\n        linkField.set('URL', 'https://www.google.com');\n        cy.step('Check URL');\n        linkField.get('URL').should('have.value', 'https://www.google.com');\n        cy.step('Set toggle');\n        linkField.setToggle('Open in', 'New tab');\n        cy.step('Check toggle');\n        linkField.getToggle('Open in', 'New tab').should('be.checked');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', 'https://www.google.com').and('have.attr', 'target', '_blank');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":7783,"startedAt":"2021-01-12T13:56:09.473Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: Page"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Page');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Page');\n        cy.step('Set page');\n        linkField.setDropdown('Page', 'Home');\n        cy.step('Check page');\n        linkField.getDropdown('Page').should('have.text', 'Home');\n        cy.step('Set toggle');\n        linkField.setToggle('Open in', 'New tab');\n        cy.step('Check toggle');\n        linkField.getToggle('Open in', 'New tab').should('be.checked');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', '/');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2864,"startedAt":"2021-01-12T13:56:17.271Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: Section"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Section');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Section');\n        cy.step('Set section');\n        linkField.setDropdown('Section', 'master-1');\n        cy.step('Check page');\n        linkField.getDropdown('Section').should('have.text', 'master-1');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', '#master-1');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5188,"startedAt":"2021-01-12T13:56:20.136Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: Email"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Email');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Email');\n        cy.step('Set Email');\n        linkField.set('Email', 'test@webflow.com');\n        cy.step('Check Email');\n        linkField.get('Email').should('have.value', 'test@webflow.com');\n        cy.step('Set Subject');\n        linkField.set('Subject', 'Testing!');\n        cy.step('Get Subject');\n        linkField.get('Subject').should('have.value', 'Testing!');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', 'mailto:test@webflow.com?subject=Testing!');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":8058,"startedAt":"2021-01-12T13:56:25.330Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: Phone"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'Phone');\n        cy.step('Check type');\n        linkField.getDropdown('Type').should('have.text', 'Phone');\n        cy.step('Set Phone');\n        linkField.set('Phone', '+1234567890');\n        cy.step('Check Phone');\n        linkField.get('Phone').should('have.value', '+1234567890');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href', 'tel:+1234567890');\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":6803,"startedAt":"2021-01-12T13:56:33.394Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Link Field","Type: File"],"state":"passed","body":"function () {\n        cy.step('Grab a field');\n        var linkField = symbolInstance.getField('Link');\n        cy.step('Set type');\n        linkField.setDropdown('Type', 'File');\n        cy.step('Get type');\n        linkField.getDropdown('Type').should('have.text', 'File');\n        cy.step('Set new file');\n        linkField.setAsset('Asset', 'Add12.svg');\n        cy.step('Get new file');\n        linkField.getAsset('Asset').should('have.text', 'Add12.svg');\n        cy.step('Check new value on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #link\")).should('have.attr', 'href').and('match', /Add12\\.svg$/);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2846,"startedAt":"2021-01-12T13:56:40.203Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Video Field","Invalid Video URL"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.invalidStubbed);\n        cy.step('Grab a field');\n        var videoField = symbolInstance.getField('Video');\n        cy.step('Set incorrect value');\n        videoField.set('URL', 'abc');\n        cy.step(\"Verify if the note says it's invalid\");\n        videoField.isVideoValid(false);\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2279,"startedAt":"2021-01-12T13:56:43.050Z","screenshots":[]}]},{"title":["Symbol Field Settings (Type) - 05","#5 - Check defaults values in panel and on canvas + apply overrides","Video Field","Valid Video URL"],"state":"passed","body":"function () {\n        cy.step('Setup route');\n        cy.server();\n        cy.route('https://api.embed.ly/1/**', _cypressAppControls.youtubeLinks.stubbed);\n        cy.step('Grab a field');\n        var videoField = symbolInstance.getField('Video');\n        cy.step('Set correct value');\n        videoField.set('URL', _cypressAppControls.youtubeLinks.valid[1]).isVideoValid();\n        cy.step('Check value');\n        videoField.get('URL').should('have.value', _cypressAppControls.youtubeLinks.valid[1]);\n        cy.step('Check video exists on the canvas');\n        canvas.within(function () {\n          cy.get(\"\".concat(symbolTag, \" #video\")).within(function () {\n            cy.get('iframe').should('exist');\n          });\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4919,"startedAt":"2021-01-12T13:56:45.330Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-05.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-05.spec.js","absolute":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/overrides/symbol-overrides-05.spec.js","specType":"integration"},"shouldUploadVideo":false}],"browserPath":"/chromium64/chrome-linux/chrome","browserName":"chromium","browserVersion":"74.0.3729.0","osName":"linux","osVersion":"Debian - 9.13","cypressVersion":"6.2.1","config":{"env":{"baseUrl":"http://wfdev.io:3030","stagingSuperDomain":"dev.webflowtest.io","User-Agent":"cypress","RECORD_KEY":"f9ae3...c4cf9"},"integrationFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow","configFile":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/cypress.json","version":"6.2.1","chromeWebSecurity":false,"browser":"chromium","video":false,"videoUploadOnPasses":false,"viewportWidth":1440,"viewportHeight":900,"defaultCommandTimeout":30000,"numTestsKeptInMemory":0,"ignoreTestFiles":"*.quarantined.spec.js","testFiles":"**/*.spec.js","fileServerFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config","fixturesFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/fixtures","pluginsFile":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/plugins/index.js","screenshotsFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/screenshots","supportFile":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/support/index.js","videosFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/videos","retries":{"runMode":2,"openMode":0},"projectId":"xfhtj7","reporter":"../../../node_modules/cypress-multi-reporters","reporterOptions":{"configFile":"reporter-config.json"},"projectRoot":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config","projectName":"cypress-config","morgan":false,"isTextTerminal":true,"socketId":"d61gq","report":true,"browsers":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"animationDistanceThreshold":5,"autoOpen":false,"baseUrl":null,"blockHosts":null,"clientRoute":"/__/","componentFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/cypress/component","execTimeout":60000,"experimentalComponentTesting":false,"experimentalFetchPolyfill":false,"experimentalRunEvents":false,"experimentalSourceRewriting":false,"firefoxGcInterval":{"runMode":1,"openMode":null},"hosts":null,"includeShadowDom":false,"javascripts":[],"modifyObstructiveCode":true,"namespace":"__cypress","nodeVersion":"default","pageLoadTimeout":60000,"port":36633,"reporterRoute":"/__cypress/reporter","requestTimeout":5000,"responseTimeout":30000,"screenshotOnRunFailure":true,"socketIoRoute":"/__socket.io","socketIoCookie":"__socket.io","taskTimeout":60000,"trashAssetsBeforeRuns":true,"userAgent":null,"videoCompression":32,"waitForAnimations":true,"scrollBehavior":"top","watchForFileChanges":false,"xhrRoute":"/xhrs/","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"baseUrl":{"value":null,"from":"default"},"blockHosts":{"value":null,"from":"default"},"browsers":{"value":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"from":"default"},"chromeWebSecurity":{"value":false,"from":"config"},"componentFolder":{"value":"cypress/component","from":"default"},"defaultCommandTimeout":{"value":30000,"from":"config"},"env":{"baseUrl":{"value":"http://wfdev.io:3030","from":"plugin"},"User-Agent":{"value":"cypress","from":"config"},"RECORD_KEY":{"value":"f9ae3...c4cf9","from":"env"},"stagingSuperDomain":{"value":"dev.webflowtest.io","from":"plugin"}},"execTimeout":{"value":60000,"from":"default"},"experimentalComponentTesting":{"value":false,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalRunEvents":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"fileServerFolder":{"value":"./","from":"config"},"firefoxGcInterval":{"value":{"runMode":1,"openMode":null},"from":"default"},"fixturesFolder":{"value":"./fixtures","from":"config"},"hosts":{"value":null,"from":"default"},"ignoreTestFiles":{"value":"*.quarantined.spec.js","from":"config"},"includeShadowDom":{"value":false,"from":"default"},"integrationFolder":{"value":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow","from":"plugin"},"modifyObstructiveCode":{"value":true,"from":"default"},"nodeVersion":{"value":"default","from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"pageLoadTimeout":{"value":60000,"from":"default"},"pluginsFile":{"value":"./plugins/index.js","from":"config"},"port":{"value":null,"from":"default"},"projectId":{"value":"xfhtj7","from":"config"},"reporter":{"value":"../../../node_modules/cypress-multi-reporters","from":"cli"},"reporterOptions":{"value":{"configFile":"reporter-config.json"},"from":"config"},"requestTimeout":{"value":5000,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":2,"openMode":0},"from":"config"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"./screenshots","from":"config"},"supportFile":{"value":"./support/index.js","from":"config"},"taskTimeout":{"value":60000,"from":"default"},"testFiles":{"value":"**/*.spec.js","from":"config"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":false,"from":"config"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"./videos","from":"config"},"videoUploadOnPasses":{"value":false,"from":"config"},"viewportHeight":{"value":900,"from":"config"},"viewportWidth":{"value":1440,"from":"config"},"waitForAnimations":{"value":true,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"configFile":{"value":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/cypress.json","from":"plugin"},"version":{"value":"6.2.1","from":"plugin"}},"parentTestsFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/cypress","parentTestsFolderDisplay":"cypress-config/cypress","supportFolder":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/support","integrationExampleName":"examples","integrationExamplePath":"/scratch/buildkite-agent-c52fd171-54da-11eb-97fa-4a22e55b2d68-2hcws/webflow/webflow/packages/tooling/cypress-config/cypress/integration/examples","scaffoldedFiles":[{"name":"cypress","children":[{"name":"integration","children":[{"name":"examples","children":[{"name":"actions.spec.js"},{"name":"aliasing.spec.js"},{"name":"assertions.spec.js"},{"name":"connectors.spec.js"},{"name":"cookies.spec.js"},{"name":"cypress_api.spec.js"},{"name":"files.spec.js"},{"name":"local_storage.spec.js"},{"name":"location.spec.js"},{"name":"misc.spec.js"},{"name":"navigation.spec.js"},{"name":"network_requests.spec.js"},{"name":"querying.spec.js"},{"name":"spies_stubs_clocks.spec.js"},{"name":"traversal.spec.js"},{"name":"utilities.spec.js"},{"name":"viewport.spec.js"},{"name":"waiting.spec.js"},{"name":"window.spec.js"}]}]}]},{"name":"fixtures","children":[{"name":"example.json"}]},{"name":"support","children":[{"name":"commands.js"},{"name":"index.js"}]},{"name":"plugins","children":[{"name":"index.js"}]}],"resolvedNodeVersion":"12.18.3","state":{},"proxyUrl":"http://localhost:36633","browserUrl":"http://localhost:36633/__/","reporterUrl":"http://localhost:36633/__cypress/reporter","xhrUrl":"__cypress/xhrs/"},"status":"finished"}]