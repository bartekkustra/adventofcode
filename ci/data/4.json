[{"startedTestsAt":"2021-01-12T13:38:36.020Z","endedTestsAt":"2021-01-12T13:43:13.406Z","totalDuration":244058,"totalSuites":85,"totalTests":263,"totalFailed":0,"totalPassed":263,"totalPending":0,"totalSkipped":0,"runs":[{"stats":{"suites":6,"tests":20,"passes":20,"pending":0,"skipped":0,"failures":0,"duration":23971,"startedAt":"2021-01-12T13:38:36.020Z","endedAt":"2021-01-12T13:38:59.991Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":6,"tests":20,"passes":20,"pending":0,"failures":0,"start":"2021-01-12T13:38:36.062Z","end":"2021-01-12T13:39:00.006Z","duration":23944},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    topBar = workspace.getTopbar();\n    breakpoints = topBar.getBreakpoints();\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Click on canvas resize label');\n      canvasPopover = topBar.clickCanvasResizeLabel();\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints and canvas size","on adding larger breakpoints canvas is resized to","1280px when Large (Min: 1280px) breakpoint is added"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1280px\" breakpoint in breakpoints dropdown');\n      var breakpointsDropdown = topBar.clickBreakpointsDropdown();\n      breakpointsDropdown.clickBreakpoint(_breakpointIds.BREAKPOINT_ID_LARGE);\n      cy.get('[data-automation-id=\"Create\"]').click();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1280px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":11454,"startedAt":"2021-01-12T13:38:41.915Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on adding larger breakpoints canvas is resized to","1440px when Xl (Min: 1440px) breakpoint is added"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1440px\" breakpoint in breakpoints dropdown');\n      var breakpointsDropdown = topBar.clickBreakpointsDropdown();\n      breakpointsDropdown.clickBreakpoint(_breakpointIds.BREAKPOINT_ID_XL);\n      cy.get('[data-automation-id=\"Create\"]').click();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1440px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":529,"startedAt":"2021-01-12T13:38:53.378Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on adding larger breakpoints canvas is resized to","1920px when Xxl (Min: 1920px) breakpoint is added"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1920px\" breakpoint in breakpoints dropdown');\n      var breakpointsDropdown = topBar.clickBreakpointsDropdown();\n      breakpointsDropdown.clickBreakpoint(_breakpointIds.BREAKPOINT_ID_XXL);\n      cy.get('[data-automation-id=\"Create\"]').click();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1920px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":428,"startedAt":"2021-01-12T13:38:53.908Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","320px when switching to Mobile Portrait breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on Mobile Portrait breakpoint in Top Bar');\n      breakpoints.setMobilePortrait();\n      canvas.getCanvasIframeElement().should('have.css', 'width', '320px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":192,"startedAt":"2021-01-12T13:38:54.338Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","568px when switching to Mobile Landscape breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on Mobile Landscape breakpoint in Top Bar');\n      breakpoints.setMobileLandscape();\n      canvas.getCanvasIframeElement().should('have.css', 'width', '568px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":145,"startedAt":"2021-01-12T13:38:54.532Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","768px when switching to Tablet breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on Tablet breakpoint in Top Bar');\n      breakpoints.setTablet();\n      canvas.getCanvasIframeElement().should('have.css', 'width', '768px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":143,"startedAt":"2021-01-12T13:38:54.679Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","1280px when switching to Large (Min: 1280px) breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1280px\" breakpoint in Top Bar');\n      breakpoints.setLarge();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1280px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":246,"startedAt":"2021-01-12T13:38:54.824Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","1440px when switching to Xl (Min: 1440px) breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1440px\" breakpoint in Top Bar');\n      breakpoints.setXl();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1440px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":141,"startedAt":"2021-01-12T13:38:55.073Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","on changing breakpoint canvas width should be","1920px when switching to Xxl (Min: 1920px) breakpoint"],"state":"passed","body":"function () {\n      cy.step('Click on \"Min: 1920px\" breakpoint in Top Bar');\n      breakpoints.setXxl();\n      canvas.getCanvasIframeElement().its('0.contentDocument').its('body').should('have.css', 'width', '1920px');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":119,"startedAt":"2021-01-12T13:38:55.215Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 400px, Mobile portrait breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 400px');\n      canvasPopover.setCanvasWidth(400);\n      breakpoints.getMobilePortrait().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":728,"startedAt":"2021-01-12T13:38:55.336Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 650px, Mobile landscape breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 650px');\n      canvasPopover.setCanvasWidth(650);\n      breakpoints.getMobileLandscape().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":432,"startedAt":"2021-01-12T13:38:56.066Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 800px, Tablet breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 800px');\n      canvasPopover.setCanvasWidth(800);\n      breakpoints.getTablet().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":500,"startedAt":"2021-01-12T13:38:56.499Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 1000px, Desktop breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 1000px');\n      canvasPopover.setCanvasWidth(1000);\n      breakpoints.getDesktop().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":384,"startedAt":"2021-01-12T13:38:57.001Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 1300px, \"Min: 1280px\" breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 1300px');\n      canvasPopover.setCanvasWidth(1300);\n      breakpoints.getLarge().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":412,"startedAt":"2021-01-12T13:38:57.386Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 1500px, \"Min: 1440px\" breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 1500px');\n      canvasPopover.setCanvasWidth(1500);\n      breakpoints.getXl().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":508,"startedAt":"2021-01-12T13:38:57.799Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to equal 2100px, \"Min: 1920px\" breakpoint should become active"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 2100px');\n      canvasPopover.setCanvasWidth(2100);\n      breakpoints.getXxl().isActive();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":374,"startedAt":"2021-01-12T13:38:58.308Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to value less than 240px, Mobile portrait breakpoint should become active and input value be 240px"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 200px');\n      canvasPopover.setCanvasWidth(200);\n      breakpoints.getMobilePortrait().isActive();\n      canvasPopover.checkCanvasWidthValue(240);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":541,"startedAt":"2021-01-12T13:38:58.683Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when setting canvas width using canvas size popover","to value bigger than 10000px, \"Min: 1920px\" breakpoint should become active and input value be 10000px"],"state":"passed","body":"function () {\n      cy.step('Set canvas width equal 20000px');\n      canvasPopover.setCanvasWidth(20000);\n      breakpoints.getXxl().isActive();\n      canvasPopover.checkCanvasWidthValue(10000);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":646,"startedAt":"2021-01-12T13:38:59.225Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when changing the canvas settings","Move canvas setting now that audit panel is shipped","should hide the icons in the left sidebar"],"state":"passed","body":"function () {\n        cy.get('.button.setting.edges').should('not.exist');\n        cy.get('.button.setting.empty').should('not.exist');\n        cy.get('.button.setting.grid').should('not.exist');\n        cy.get('.button.setting.xray').should('not.exist');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":58,"startedAt":"2021-01-12T13:38:59.873Z","screenshots":[]}]},{"title":["Breakpoints and canvas size","when changing the canvas settings","Move canvas setting now that audit panel is shipped","should show the settings in the canvas popover"],"state":"passed","body":"function () {\n        cy.get('[data-automation-id=\"toggle-element-edges-checkbox\"]').should('exist');\n        cy.get('[data-automation-id=\"toggle-empty-element-checkbox\"]').should('exist');\n        cy.get('[data-automation-id=\"toggle-xray-mode-checkbox\"]').should('exist');\n        cy.get('#canvas-settings-guide-menu').should('exist');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":58,"startedAt":"2021-01-12T13:38:59.932Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-canvas-size.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-canvas-size.spec.js","absolute":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-canvas-size.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":17,"tests":64,"passes":64,"pending":0,"skipped":0,"failures":0,"duration":41977,"startedAt":"2021-01-12T13:39:08.407Z","endedAt":"2021-01-12T13:39:50.384Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":17,"tests":64,"passes":64,"pending":0,"failures":0,"start":"2021-01-12T13:39:08.413Z","end":"2021-01-12T13:39:50.389Z","duration":41976},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.empty);\n\n    breakpoints = workspace.getTopbar().getBreakpoints();\n    var runner = (0, _cypressAppControls.createHTMLRunner)();\n    runner.run(\"<div id=\\\"test-div\\\" />\");\n    var rightPanel = workspace.getRightPanel();\n    var ix2Tab = rightPanel.clickIX2Tab();\n    var menu = ix2Tab.clickAddElementTriggerButton();\n    interactionSettings = menu.clickOption('MOUSE_CLICK_INTERACTION');\n    interactionSettings.getOnFirstClickSettings().action.click().clickOption('Flip left to right');\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.forEach(function (MQ, index) {\n          if (combination[index]) {\n            interactionSettings.enableOnBreakpoint(MQ);\n          } else {\n            interactionSettings.disableOnBreakpoint(MQ);\n          }\n        });\n\n        cy.step('Go to preview mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function () {\n        cy.step('Go to designer mode');\n        cy.get(\"[data-automation-id=\\\"preview-mode-button\\\"]\").click();\n      }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small, tiny media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":16564,"startedAt":"2021-01-12T13:39:14.094Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small, tiny media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":252,"startedAt":"2021-01-12T13:39:30.673Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small, tiny media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":142,"startedAt":"2021-01-12T13:39:30.926Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":358,"startedAt":"2021-01-12T13:39:31.069Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":359,"startedAt":"2021-01-12T13:39:31.462Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":124,"startedAt":"2021-01-12T13:39:31.823Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":126,"startedAt":"2021-01-12T13:39:31.948Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, small media queries","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":451,"startedAt":"2021-01-12T13:39:32.076Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, tiny media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":652,"startedAt":"2021-01-12T13:39:32.660Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, tiny media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":136,"startedAt":"2021-01-12T13:39:33.314Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, tiny media queries","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":127,"startedAt":"2021-01-12T13:39:33.451Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":353,"startedAt":"2021-01-12T13:39:33.580Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":358,"startedAt":"2021-01-12T13:39:33.957Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":137,"startedAt":"2021-01-12T13:39:34.316Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium media queries","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":121,"startedAt":"2021-01-12T13:39:34.455Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, medium media queries","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":572,"startedAt":"2021-01-12T13:39:34.578Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small, tiny media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":477,"startedAt":"2021-01-12T13:39:35.167Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small, tiny media queries","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":126,"startedAt":"2021-01-12T13:39:35.646Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small, tiny media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":129,"startedAt":"2021-01-12T13:39:35.774Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":346,"startedAt":"2021-01-12T13:39:35.905Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":472,"startedAt":"2021-01-12T13:39:36.279Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small media queries","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":125,"startedAt":"2021-01-12T13:39:36.752Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":150,"startedAt":"2021-01-12T13:39:36.879Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, small media queries","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":695,"startedAt":"2021-01-12T13:39:37.030Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, tiny media queries","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":393,"startedAt":"2021-01-12T13:39:37.748Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, tiny media queries","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":121,"startedAt":"2021-01-12T13:39:38.142Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, tiny media queries","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":120,"startedAt":"2021-01-12T13:39:38.265Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":333,"startedAt":"2021-01-12T13:39:38.386Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main breakpoint","annimation is enabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":422,"startedAt":"2021-01-12T13:39:38.744Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main breakpoint","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:39:39.168Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main breakpoint","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":164,"startedAt":"2021-01-12T13:39:39.287Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on main breakpoint","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":602,"startedAt":"2021-01-12T13:39:39.452Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small, tiny media queries","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":568,"startedAt":"2021-01-12T13:39:40.079Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small, tiny media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:39:40.649Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small, tiny media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":124,"startedAt":"2021-01-12T13:39:40.762Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":325,"startedAt":"2021-01-12T13:39:40.888Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small media queries","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":334,"startedAt":"2021-01-12T13:39:41.242Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:39:41.577Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:39:41.696Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, small media queries","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":454,"startedAt":"2021-01-12T13:39:41.815Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, tiny media queries","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":417,"startedAt":"2021-01-12T13:39:42.301Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, tiny media queries","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":120,"startedAt":"2021-01-12T13:39:42.721Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, tiny media queries","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":112,"startedAt":"2021-01-12T13:39:42.842Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":331,"startedAt":"2021-01-12T13:39:42.955Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium breakpoint","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":322,"startedAt":"2021-01-12T13:39:43.314Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium breakpoint","annimation is enabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":312,"startedAt":"2021-01-12T13:39:43.637Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium breakpoint","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":303,"startedAt":"2021-01-12T13:39:43.950Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on medium breakpoint","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":327,"startedAt":"2021-01-12T13:39:44.254Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small, tiny media queries","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":572,"startedAt":"2021-01-12T13:39:44.613Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small, tiny media queries","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":116,"startedAt":"2021-01-12T13:39:45.186Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small, tiny media queries","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":119,"startedAt":"2021-01-12T13:39:45.304Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small, tiny media queries","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":416,"startedAt":"2021-01-12T13:39:45.424Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small breakpoint","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1050,"startedAt":"2021-01-12T13:39:45.869Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small breakpoint","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":146,"startedAt":"2021-01-12T13:39:46.920Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small breakpoint","annimation is enabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":118,"startedAt":"2021-01-12T13:39:47.068Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on small breakpoint","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":307,"startedAt":"2021-01-12T13:39:47.187Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on tiny breakpoint","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":403,"startedAt":"2021-01-12T13:39:47.517Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on tiny breakpoint","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":133,"startedAt":"2021-01-12T13:39:47.921Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on tiny breakpoint","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":114,"startedAt":"2021-01-12T13:39:48.055Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is set as triggered on tiny breakpoint","annimation is enabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":443,"startedAt":"2021-01-12T13:39:48.171Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is disabled on all media queries","annimation is disabled on main breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":992,"startedAt":"2021-01-12T13:39:48.743Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is disabled on all media queries","annimation is disabled on medium breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":128,"startedAt":"2021-01-12T13:39:49.742Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is disabled on all media queries","annimation is disabled on small breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":125,"startedAt":"2021-01-12T13:39:49.871Z","screenshots":[]}]},{"title":["Breakpoints and IX2","when in IX2 settings animation is disabled on all media queries","annimation is disabled on tiny breakpoint"],"state":"passed","body":"function () {\n          cy.step(\"change view to \".concat(breakpointId, \" breakpoint\"));\n          breakpoints.setBreakpoint(breakpointId);\n          cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n            cy.wrap(iframe.find('#test-div')).should(flag ? 'have.attr' : 'not.have.attr', 'style', ANIMATION_START_STYLE);\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":386,"startedAt":"2021-01-12T13:39:49.997Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-ix2.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-ix2.spec.js","absolute":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-ix2.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":15,"tests":22,"passes":22,"pending":0,"skipped":0,"failures":0,"duration":45079,"startedAt":"2021-01-12T13:39:58.694Z","endedAt":"2021-01-12T13:40:43.773Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":15,"tests":22,"passes":22,"pending":0,"failures":0,"start":"2021-01-12T13:39:58.697Z","end":"2021-01-12T13:40:43.778Z","duration":45081},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    breakpoints = workspace.getTopbar().getBreakpoints();\n    [_breakpointIds.BREAKPOINT_ID_LARGE, _breakpointIds.BREAKPOINT_ID_XL, _breakpointIds.BREAKPOINT_ID_XXL].forEach(function (breakpointId) {\n      var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n      breakpointsDropdown.clickBreakpoint(breakpointId);\n      cy.get('[data-automation-id=\"Create\"]').click();\n    });\n    canvas = workspace.getCanvas();\n    rightPanel = workspace.getRightPanel();\n    stylesTab = rightPanel.getStylesTab();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to desktop breakpoint');\n      breakpoints.setDesktop();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 10px on Desktop breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('10px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to Tablet breakpoint');\n      breakpoints.setTablet();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 22px on Tablet breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('22px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to Phone Landscape breakpoint');\n      breakpoints.setMobileLandscape();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 34px on Tablet breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('34px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to Phone Portrait breakpoint');\n      breakpoints.setMobilePortrait();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 52px on Phone Portrait breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('52px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to Large breakpoint');\n      breakpoints.setLarge();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 5x on Large breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('5px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to XL breakpoint');\n      breakpoints.setXl();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 3x on XL breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('3px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      cy.step('Change to XL breakpoint');\n      breakpoints.setXxl();\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n      cy.step('Set padding left equal to 0x on XXL breakpoint');\n      var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n      leftEditor.valueInput.unitInput.clear().type('0px{enter}');\n      leftEditor.close();\n    }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n      cy.step('Select target test element on the canvas');\n      canvas.selectElement(targetTestElement);\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints and inheritance in style panel selector","styles set on main breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":18095,"startedAt":"2021-01-12T13:40:04.352Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on main breakpoint","in selector widget inheritance list","last breakpoints should be main and medium when medium selected"],"state":"passed","body":"function () {\n        cy.step('Change to tablet breakpoint');\n        breakpoints.setTablet();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":532,"startedAt":"2021-01-12T13:40:22.463Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on main breakpoint","in selector widget inheritance list","last breakpoints should be main and small when small selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile landscape breakpoint');\n        breakpoints.setMobileLandscape();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":463,"startedAt":"2021-01-12T13:40:22.997Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on main breakpoint","in selector widget inheritance list","last breakpoints should be main and tiny when tiny selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile portrait breakpoint');\n        breakpoints.setMobilePortrait();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_TINY, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":468,"startedAt":"2021-01-12T13:40:23.461Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on medium breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2738,"startedAt":"2021-01-12T13:40:23.931Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on medium breakpoint","in selector widget inheritance list","last breakpoints should be main and medium when medium selected"],"state":"passed","body":"function () {\n        cy.step('Change to tablet breakpoint');\n        breakpoints.setTablet();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":608,"startedAt":"2021-01-12T13:40:26.671Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on medium breakpoint","in selector widget inheritance list","last breakpoints should be main, medium, and small when small selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile landscape breakpoint');\n        breakpoints.setMobileLandscape();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":739,"startedAt":"2021-01-12T13:40:27.281Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on medium breakpoint","in selector widget inheritance list","last breakpoints should be main medium, and tiny when tiny selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile portrait breakpoint');\n        breakpoints.setMobilePortrait();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_TINY, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":574,"startedAt":"2021-01-12T13:40:28.022Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on small breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1971,"startedAt":"2021-01-12T13:40:28.598Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on small breakpoint","in selector widget inheritance list","last breakpoints should be main and medium when medium selected"],"state":"passed","body":"function () {\n        cy.step('Change to tablet breakpoint');\n        breakpoints.setTablet();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":560,"startedAt":"2021-01-12T13:40:30.570Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on small breakpoint","in selector widget inheritance list","last breakpoints should be main, medium, and small when small selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile landscape breakpoint');\n        breakpoints.setMobileLandscape();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":579,"startedAt":"2021-01-12T13:40:31.132Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on small breakpoint","in selector widget inheritance list","last breakpoints should be main medium, small, and tiny when tiny selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile portrait breakpoint');\n        breakpoints.setMobilePortrait();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_TINY, _breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":706,"startedAt":"2021-01-12T13:40:31.713Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on tiny breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1822,"startedAt":"2021-01-12T13:40:32.421Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on tiny breakpoint","in selector widget inheritance list","last breakpoints should be main and medium when medium selected"],"state":"passed","body":"function () {\n        cy.step('Change to tablet breakpoint');\n        breakpoints.setTablet();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":733,"startedAt":"2021-01-12T13:40:34.245Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on tiny breakpoint","in selector widget inheritance list","last breakpoints should be main, medium, and small when small selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile landscape breakpoint');\n        breakpoints.setMobileLandscape();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":562,"startedAt":"2021-01-12T13:40:34.980Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on tiny breakpoint","in selector widget inheritance list","last breakpoints should be main medium, small, and tiny when tiny selected"],"state":"passed","body":"function () {\n        cy.step('Change to mobile portrait breakpoint');\n        breakpoints.setMobilePortrait();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_TINY, _breakpointIds.BREAKPOINT_ID_SMALL, _breakpointIds.BREAKPOINT_ID_MEDIUM, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":601,"startedAt":"2021-01-12T13:40:35.544Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on large breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1892,"startedAt":"2021-01-12T13:40:36.147Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on large breakpoint","in selector widget inheritance list","last breakpoints should be main and large when large selected"],"state":"passed","body":"function () {\n        cy.step('Change to large breakpoint');\n        breakpoints.setLarge();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_LARGE, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":517,"startedAt":"2021-01-12T13:40:38.040Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on xl breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1988,"startedAt":"2021-01-12T13:40:38.559Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on xl breakpoint","in selector widget inheritance list","last breakpoints should be main, xl, and large, when xl selected"],"state":"passed","body":"function () {\n        cy.step('Change to xl breakpoint');\n        breakpoints.setXl();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_XL, _breakpointIds.BREAKPOINT_ID_LARGE, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":548,"startedAt":"2021-01-12T13:40:40.549Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on xxl breakpoint","in selector widget inheritance list","last breakpoint should be main when main selected"],"state":"passed","body":"function () {\n        cy.step('Change to desktop breakpoint');\n        breakpoints.setDesktop();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2060,"startedAt":"2021-01-12T13:40:41.100Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel selector","styles set on xxl breakpoint","in selector widget inheritance list","last breakpoints should be main, xl, large, and xl, when xxl selected"],"state":"passed","body":"function () {\n        cy.step('Change to xxl breakpoint');\n        breakpoints.setXxl();\n        cy.step('Select target test element on the canvas');\n        canvas.selectElement(targetTestElement);\n        cy.step('Open link widget in selector widget');\n        stylesTab.selector.clickLinkWidget();\n        stylesTab.selector.checkBreakpointsInheritanceReverseOrder([_breakpointIds.BREAKPOINT_ID_XXL, _breakpointIds.BREAKPOINT_ID_XL, _breakpointIds.BREAKPOINT_ID_LARGE, _breakpointIds.BREAKPOINT_ID_MAIN]);\n        cy.get('body').type('{esc}');\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":610,"startedAt":"2021-01-12T13:40:43.161Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-selector-widget.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-selector-widget.spec.js","absolute":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-selector-widget.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":28,"tests":57,"passes":57,"pending":0,"skipped":0,"failures":0,"duration":82079,"startedAt":"2021-01-12T13:40:51.951Z","endedAt":"2021-01-12T13:42:14.030Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":28,"tests":57,"passes":57,"pending":0,"failures":0,"start":"2021-01-12T13:40:51.954Z","end":"2021-01-12T13:42:14.059Z","duration":82105},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n    breakpoints = workspace.getTopbar().getBreakpoints();\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n        cy.reload();\n        breakpoints = workspace.getTopbar().getBreakpoints();\n        largerBreakpointsIds.forEach(function (breakpointId) {\n          var breakpointsDropdown = workspace.getTopbar().clickBreakpointsDropdown();\n          breakpointsDropdown.clickBreakpoint(breakpointId);\n          cy.get('[data-automation-id=\"Create\"]').click();\n        });\n      }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Default breakpoints accessible from shortcuts","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n        cy.step(\"Type \".concat(index + 1, \" when no input is selected\"));\n        cy.get('body').type(String(index + 1));\n        breakpoints.getBreakpoint(activeBreakpointId).isActive();\n\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.filter(function (id) {\n          return id !== activeBreakpointId;\n        }).forEach(function (id) {\n          cy.step(\"\".concat(id, \" is not selected\"));\n          breakpoints.getBreakpoint(id).isActive(false);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12238,"startedAt":"2021-01-12T13:40:57.034Z","screenshots":[]}]},{"title":["Default breakpoints accessible from shortcuts","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n        cy.step(\"Type \".concat(index + 1, \" when no input is selected\"));\n        cy.get('body').type(String(index + 1));\n        breakpoints.getBreakpoint(activeBreakpointId).isActive();\n\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.filter(function (id) {\n          return id !== activeBreakpointId;\n        }).forEach(function (id) {\n          cy.step(\"\".concat(id, \" is not selected\"));\n          breakpoints.getBreakpoint(id).isActive(false);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":167,"startedAt":"2021-01-12T13:41:09.281Z","screenshots":[]}]},{"title":["Default breakpoints accessible from shortcuts","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n        cy.step(\"Type \".concat(index + 1, \" when no input is selected\"));\n        cy.get('body').type(String(index + 1));\n        breakpoints.getBreakpoint(activeBreakpointId).isActive();\n\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.filter(function (id) {\n          return id !== activeBreakpointId;\n        }).forEach(function (id) {\n          cy.step(\"\".concat(id, \" is not selected\"));\n          breakpoints.getBreakpoint(id).isActive(false);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":146,"startedAt":"2021-01-12T13:41:09.450Z","screenshots":[]}]},{"title":["Default breakpoints accessible from shortcuts","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n        cy.step(\"Type \".concat(index + 1, \" when no input is selected\"));\n        cy.get('body').type(String(index + 1));\n        breakpoints.getBreakpoint(activeBreakpointId).isActive();\n\n        _breakpointIds.DEFAULT_BREAKPOINT_IDS.filter(function (id) {\n          return id !== activeBreakpointId;\n        }).forEach(function (id) {\n          cy.step(\"\".concat(id, \" is not selected\"));\n          breakpoints.getBreakpoint(id).isActive(false);\n        });\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":360,"startedAt":"2021-01-12T13:41:09.598Z","screenshots":[]}]},{"title":["Default breakpoints accessible from shortcuts","canvas popover","when \"5\" is typed canvas popover become open"],"state":"passed","body":"function () {\n      cy.step(\"Type \".concat(_breakpointIds.DEFAULT_BREAKPOINT_IDS.length + 1, \" when no input is selected\"));\n      cy.get('body').type(String(_breakpointIds.DEFAULT_BREAKPOINT_IDS.length + 1));\n      cy.step('canvas width input is visible');\n      cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":394,"startedAt":"2021-01-12T13:41:09.960Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xxl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":15830,"startedAt":"2021-01-12T13:41:10.357Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed xl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":314,"startedAt":"2021-01-12T13:41:26.205Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed large breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":511,"startedAt":"2021-01-12T13:41:26.520Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":269,"startedAt":"2021-01-12T13:41:27.033Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":163,"startedAt":"2021-01-12T13:41:27.304Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"6\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":161,"startedAt":"2021-01-12T13:41:27.468Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"7\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":189,"startedAt":"2021-01-12T13:41:27.631Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl, large breakpoints","canvas popover","when \"8\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":200,"startedAt":"2021-01-12T13:41:27.822Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xxl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":6182,"startedAt":"2021-01-12T13:41:28.024Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed xl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":185,"startedAt":"2021-01-12T13:41:34.216Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":164,"startedAt":"2021-01-12T13:41:34.402Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":153,"startedAt":"2021-01-12T13:41:34.567Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":146,"startedAt":"2021-01-12T13:41:34.721Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"6\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":147,"startedAt":"2021-01-12T13:41:34.869Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, xl breakpoints","canvas popover","when \"7\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":227,"startedAt":"2021-01-12T13:41:35.018Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xxl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":6007,"startedAt":"2021-01-12T13:41:35.247Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed large breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":206,"startedAt":"2021-01-12T13:41:41.261Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":451,"startedAt":"2021-01-12T13:41:41.468Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":667,"startedAt":"2021-01-12T13:41:41.920Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":177,"startedAt":"2021-01-12T13:41:42.588Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"6\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":161,"startedAt":"2021-01-12T13:41:42.766Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl, large breakpoints","canvas popover","when \"7\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":197,"startedAt":"2021-01-12T13:41:42.928Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xxl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4851,"startedAt":"2021-01-12T13:41:43.127Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":172,"startedAt":"2021-01-12T13:41:47.987Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":163,"startedAt":"2021-01-12T13:41:48.160Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":170,"startedAt":"2021-01-12T13:41:48.324Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":165,"startedAt":"2021-01-12T13:41:48.495Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xxl breakpoints","canvas popover","when \"6\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":230,"startedAt":"2021-01-12T13:41:48.661Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5878,"startedAt":"2021-01-12T13:41:48.893Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed large breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":178,"startedAt":"2021-01-12T13:41:54.778Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":153,"startedAt":"2021-01-12T13:41:54.958Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":174,"startedAt":"2021-01-12T13:41:55.112Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":239,"startedAt":"2021-01-12T13:41:55.287Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"6\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":617,"startedAt":"2021-01-12T13:41:55.527Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl, large breakpoints","canvas popover","when \"7\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":392,"startedAt":"2021-01-12T13:41:56.145Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed xl breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5108,"startedAt":"2021-01-12T13:41:56.538Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":174,"startedAt":"2021-01-12T13:42:01.655Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":148,"startedAt":"2021-01-12T13:42:01.830Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":148,"startedAt":"2021-01-12T13:42:01.979Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":185,"startedAt":"2021-01-12T13:42:02.129Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when xl breakpoints","canvas popover","when \"6\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":208,"startedAt":"2021-01-12T13:42:02.316Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed large breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":5602,"startedAt":"2021-01-12T13:42:02.526Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":167,"startedAt":"2021-01-12T13:42:08.135Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":147,"startedAt":"2021-01-12T13:42:08.304Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":165,"startedAt":"2021-01-12T13:42:08.452Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"5\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":150,"startedAt":"2021-01-12T13:42:08.618Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when large breakpoints","canvas popover","when \"6\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":546,"startedAt":"2021-01-12T13:42:08.770Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when none breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"1\" is typed main breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2375,"startedAt":"2021-01-12T13:42:09.317Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when none breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"2\" is typed medium breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":339,"startedAt":"2021-01-12T13:42:11.707Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when none breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"3\" is typed small breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":360,"startedAt":"2021-01-12T13:42:12.047Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when none breakpoints","all breakpoints in the top bar should be accessible from the keyboard ","when \"4\" is typed tiny breakpoint become selected "],"state":"passed","body":"function () {\n            cy.step(\"Type \".concat(breakpointKey, \" when no input is selected\"));\n            cy.get('body').type(breakpointKey);\n            breakpoints.getBreakpoint(activeBreakpointId).isActive();\n            [].concat((0, _toConsumableArray2[\"default\"])(largerBreakpointsIds), (0, _toConsumableArray2[\"default\"])(_breakpointIds.DEFAULT_BREAKPOINT_IDS)).filter(function (id) {\n              return id !== activeBreakpointId;\n            }).forEach(function (id) {\n              cy.step(\"\".concat(id, \" is not selected\"));\n              breakpoints.getBreakpoint(id).isActive(false);\n            });\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":195,"startedAt":"2021-01-12T13:42:12.408Z","screenshots":[]}]},{"title":["shortcuts on various breakpoints combinations","All breakpoints are accessible from shortcuts when none breakpoints","canvas popover","when \"5\" is typed canvas popover become open"],"state":"passed","body":"function () {\n          cy.step(\"Type \".concat(canvasResizePopoverKey, \" when no input is selected\"));\n          cy.get('body').type(canvasResizePopoverKey);\n          cy.step('canvas width input is visible');\n          cy.get(\"[aria-label=\\\"Canvas width input\\\"]\").should('be.visible');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1423,"startedAt":"2021-01-12T13:42:12.604Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-shortcuts.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-shortcuts.spec.js","absolute":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-shortcuts.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":19,"tests":100,"passes":100,"pending":0,"skipped":0,"failures":0,"duration":50952,"startedAt":"2021-01-12T13:42:22.454Z","endedAt":"2021-01-12T13:43:13.406Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":19,"tests":100,"passes":100,"pending":0,"failures":0,"start":"2021-01-12T13:42:22.457Z","end":"2021-01-12T13:43:13.412Z","duration":50955},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.gridItemPlacement);\n\n    var rightPanel = workspace.getRightPanel();\n    breakpoints = workspace.getTopbar().getBreakpoints();\n    canvas = workspace.getCanvas();\n    gridItem = rightPanel.getStylesTab().properties.gridItem;\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n      manualsPlace = new GridItemElement('#manuals-place', canvas);\n    }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n          breakpoints.setBreakpoint(originBreakpoint);\n          manualsPlace.select();\n          cy.step(\"Set column start value \".concat(columnStartNewValue));\n          gridItem.columnStartInput.setValue(columnStartNewValue);\n          cy.step(\"Set align self to \".concat(alignSelfNewValue));\n          gridItem.alignSelf.input.clickOption(alignSelfNewValue);\n          cy.step(\"set justify self to \".concat(justifySelfNewValue));\n          gridItem.justifySelf.input.clickOption(justifySelfNewValue);\n          cy.step(\"Set order self to \".concat(orderNewValue));\n          gridItem.order.input.clickOption(orderNewValue);\n        }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n          breakpoints.setBreakpoint(originBreakpoint);\n          manualsPlace.select();\n          cy.step(\"Set column start value \".concat(columnStartNewValue));\n          gridItem.columnStartInput.setValue(columnStartNewValue);\n          cy.step(\"Set align self to \".concat(alignSelfNewValue));\n          gridItem.alignSelf.input.clickOption(alignSelfNewValue);\n          cy.step(\"set justify self to \".concat(justifySelfNewValue));\n          gridItem.justifySelf.input.clickOption(justifySelfNewValue);\n          cy.step(\"Set order self to \".concat(orderNewValue));\n          gridItem.order.input.clickOption(orderNewValue);\n        }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n          breakpoints.setBreakpoint(originBreakpoint);\n          manualsPlace.select();\n          cy.step(\"Set column start value \".concat(columnStartNewValue));\n          gridItem.columnStartInput.setValue(columnStartNewValue);\n          cy.step(\"Set align self to \".concat(alignSelfNewValue));\n          gridItem.alignSelf.input.clickOption(alignSelfNewValue);\n          cy.step(\"set justify self to \".concat(justifySelfNewValue));\n          gridItem.justifySelf.input.clickOption(justifySelfNewValue);\n          cy.step(\"Set order self to \".concat(orderNewValue));\n          gridItem.order.input.clickOption(orderNewValue);\n        }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n          breakpoints.setBreakpoint(originBreakpoint);\n          manualsPlace.select();\n          cy.step(\"Set column start value \".concat(columnStartNewValue));\n          gridItem.columnStartInput.setValue(columnStartNewValue);\n          cy.step(\"Set align self to \".concat(alignSelfNewValue));\n          gridItem.alignSelf.input.clickOption(alignSelfNewValue);\n          cy.step(\"set justify self to \".concat(justifySelfNewValue));\n          gridItem.justifySelf.input.clickOption(justifySelfNewValue);\n          cy.step(\"Set order self to \".concat(orderNewValue));\n          gridItem.order.input.clickOption(orderNewValue);\n        }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n              breakpoints.setBreakpoint(breakpoint);\n            }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","initial state","Initial labels for align self and order are default on main"],"state":"passed","body":"function () {\n          breakpoints.setBreakpoint(breakpoint);\n          manualsPlace.select();\n          gridItem.alignSelf.label.verifyOrigin('Default');\n          gridItem.order.label.verifyOrigin('Default');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":13910,"startedAt":"2021-01-12T13:42:27.921Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","initial state","Initial labels for align self and order are default on medium"],"state":"passed","body":"function () {\n          breakpoints.setBreakpoint(breakpoint);\n          manualsPlace.select();\n          gridItem.alignSelf.label.verifyOrigin('Default');\n          gridItem.order.label.verifyOrigin('Default');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":698,"startedAt":"2021-01-12T13:42:41.849Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","initial state","Initial labels for align self and order are default on small"],"state":"passed","body":"function () {\n          breakpoints.setBreakpoint(breakpoint);\n          manualsPlace.select();\n          gridItem.alignSelf.label.verifyOrigin('Default');\n          gridItem.order.label.verifyOrigin('Default');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":544,"startedAt":"2021-01-12T13:42:42.549Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","initial state","Initial labels for align self and order are default on tiny"],"state":"passed","body":"function () {\n          breakpoints.setBreakpoint(breakpoint);\n          manualsPlace.select();\n          gridItem.alignSelf.label.verifyOrigin('Default');\n          gridItem.order.label.verifyOrigin('Default');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":423,"startedAt":"2021-01-12T13:42:43.094Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","labels should have Id origin on active main breakpoint"],"state":"passed","body":"function () {\n          gridItem.alignSelf.label.verifyOrigin('Id');\n          gridItem.order.label.verifyOrigin('Id');\n          gridItem.position.label.verifyOrigin('Id');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2089,"startedAt":"2021-01-12T13:42:43.519Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","labels popover should have messages for Id origin on active main breakpoint and no inheritance data"],"state":"passed","body":"function () {\n          var positionPopoverOpen = function positionPopoverOpen() {\n            return gridItem.position.label.openPopover();\n          };\n\n          var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n            return gridItem.alignSelf.label.openPopover();\n          };\n\n          var orderPopoverOpen = function orderPopoverOpen() {\n            return gridItem.order.label.openPopover();\n          };\n\n          [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref) {\n            var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n                openPopover = _ref2[0],\n                popoverName = _ref2[1];\n\n            cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n            var popover = openPopover();\n            popover.verifyInheritanceMessage(originBreakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n            popover.getInheritanceOption().should(function ($option) {\n              return expect($option).to.have.length(0);\n            });\n            popover.close();\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1351,"startedAt":"2021-01-12T13:42:45.610Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","column start value should be 2"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:46.962Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","align self value should be start"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:46.991Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","justify self value should be baseline"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23,"startedAt":"2021-01-12T13:42:47.021Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23,"startedAt":"2021-01-12T13:42:47.045Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","labels should have inherited origin inherited on medium breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":391,"startedAt":"2021-01-12T13:42:47.070Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","column start value should be 2"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":45,"startedAt":"2021-01-12T13:42:47.462Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","align self value should be start"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":39,"startedAt":"2021-01-12T13:42:47.508Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","justify self value should be baseline"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":24,"startedAt":"2021-01-12T13:42:47.548Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":25,"startedAt":"2021-01-12T13:42:47.573Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on main","labels popover should have messages for inherited origin from active main breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":867,"startedAt":"2021-01-12T13:42:47.599Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","labels should have inherited origin inherited on small breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":516,"startedAt":"2021-01-12T13:42:48.468Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","column start value should be 2"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:48.985Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","align self value should be start"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":48,"startedAt":"2021-01-12T13:42:49.015Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","justify self value should be baseline"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":29,"startedAt":"2021-01-12T13:42:49.065Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23,"startedAt":"2021-01-12T13:42:49.095Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to small breakpoint, while value was set on main","labels popover should have messages for inherited origin from active main breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":809,"startedAt":"2021-01-12T13:42:49.120Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","labels should have inherited origin inherited on tiny breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":525,"startedAt":"2021-01-12T13:42:49.930Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","column start value should be 2"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":268,"startedAt":"2021-01-12T13:42:50.456Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","align self value should be start"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":77,"startedAt":"2021-01-12T13:42:50.725Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","justify self value should be baseline"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:50.804Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23,"startedAt":"2021-01-12T13:42:50.834Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the main breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on main","labels popover should have messages for inherited origin from active main breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":784,"startedAt":"2021-01-12T13:42:50.858Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","labels should have Id origin on active medium breakpoint"],"state":"passed","body":"function () {\n          gridItem.alignSelf.label.verifyOrigin('Id');\n          gridItem.order.label.verifyOrigin('Id');\n          gridItem.position.label.verifyOrigin('Id');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1859,"startedAt":"2021-01-12T13:42:51.643Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","labels popover should have messages for Id origin on active medium breakpoint and no inheritance data"],"state":"passed","body":"function () {\n          var positionPopoverOpen = function positionPopoverOpen() {\n            return gridItem.position.label.openPopover();\n          };\n\n          var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n            return gridItem.alignSelf.label.openPopover();\n          };\n\n          var orderPopoverOpen = function orderPopoverOpen() {\n            return gridItem.order.label.openPopover();\n          };\n\n          [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref) {\n            var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n                openPopover = _ref2[0],\n                popoverName = _ref2[1];\n\n            cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n            var popover = openPopover();\n            popover.verifyInheritanceMessage(originBreakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n            popover.getInheritanceOption().should(function ($option) {\n              return expect($option).to.have.length(0);\n            });\n            popover.close();\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":811,"startedAt":"2021-01-12T13:42:53.503Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","column start value should be 3"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:54.316Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","align self value should be center"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:42:54.346Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","justify self value should be stretch"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:42:54.373Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","order number value should be 9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:54.400Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","labels should have inherited origin inherited on small breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":486,"startedAt":"2021-01-12T13:42:54.430Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","column start value should be 3"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":78,"startedAt":"2021-01-12T13:42:54.917Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","align self value should be center"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":44,"startedAt":"2021-01-12T13:42:54.996Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","justify self value should be stretch"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":85,"startedAt":"2021-01-12T13:42:55.041Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","order number value should be 9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":45,"startedAt":"2021-01-12T13:42:55.128Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to small breakpoint, while value was set on medium","labels popover should have messages for inherited origin from active medium breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":925,"startedAt":"2021-01-12T13:42:55.175Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","labels should have inherited origin inherited on tiny breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":399,"startedAt":"2021-01-12T13:42:56.102Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","column start value should be 3"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:42:56.503Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","align self value should be center"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":71,"startedAt":"2021-01-12T13:42:56.530Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","justify self value should be stretch"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":33,"startedAt":"2021-01-12T13:42:56.602Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","order number value should be 9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:42:56.636Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on medium","labels popover should have messages for inherited origin from active medium breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":857,"startedAt":"2021-01-12T13:42:56.665Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","labels should have id origin on main breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":479,"startedAt":"2021-01-12T13:42:57.524Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","column start value should be 2"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":29,"startedAt":"2021-01-12T13:42:58.004Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","align self value should be start"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":30,"startedAt":"2021-01-12T13:42:58.034Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","justify self value should be baseline"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:42:58.065Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","order number value should be -9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":24,"startedAt":"2021-01-12T13:42:58.092Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the medium breakpoint for position, align self and order","when switching to main breakpoint, while value was set on medium","labels popover should have messages for Id origin on active main breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":757,"startedAt":"2021-01-12T13:42:58.117Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","labels should have Id origin on active small breakpoint"],"state":"passed","body":"function () {\n          gridItem.alignSelf.label.verifyOrigin('Id');\n          gridItem.order.label.verifyOrigin('Id');\n          gridItem.position.label.verifyOrigin('Id');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2194,"startedAt":"2021-01-12T13:42:58.875Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","labels popover should have messages for Id origin on active small breakpoint and no inheritance data"],"state":"passed","body":"function () {\n          var positionPopoverOpen = function positionPopoverOpen() {\n            return gridItem.position.label.openPopover();\n          };\n\n          var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n            return gridItem.alignSelf.label.openPopover();\n          };\n\n          var orderPopoverOpen = function orderPopoverOpen() {\n            return gridItem.order.label.openPopover();\n          };\n\n          [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref) {\n            var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n                openPopover = _ref2[0],\n                popoverName = _ref2[1];\n\n            cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n            var popover = openPopover();\n            popover.verifyInheritanceMessage(originBreakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n            popover.getInheritanceOption().should(function ($option) {\n              return expect($option).to.have.length(0);\n            });\n            popover.close();\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":746,"startedAt":"2021-01-12T13:43:01.070Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","column start value should be 4"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":27,"startedAt":"2021-01-12T13:43:01.818Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","align self value should be end"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":27,"startedAt":"2021-01-12T13:43:01.846Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","justify self value should be end"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":24,"startedAt":"2021-01-12T13:43:01.874Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":25,"startedAt":"2021-01-12T13:43:01.899Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","labels should have inherited origin inherited on tiny breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Inherited');\n              gridItem.order.label.verifyOrigin('Inherited');\n              gridItem.position.label.verifyOrigin('Inherited');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":459,"startedAt":"2021-01-12T13:43:01.925Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","column start value should be 4"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":285,"startedAt":"2021-01-12T13:43:02.386Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","align self value should be end"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":80,"startedAt":"2021-01-12T13:43:02.673Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","justify self value should be end"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:43:02.754Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","order number value should be -9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:43:02.781Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to tiny breakpoint, while value was set on small","labels popover should have messages for inherited origin from active small breakpoint and inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref3) {\n                var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n                    openPopover = _ref4[0],\n                    popoverName = _ref4[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage('inherited');\n                popover.getInheritanceOption().should('have.attr', 'data-automation-id', \"inheritance-option-\".concat(\n                /*\n                Currently Position label is responsible for 4 inputs origins,\n                so if we set only column start on the for example medium breakpoint\n                and switch to small, inherited option will be shown as desktop 🤷‍♀️\n                This is something that should have better solution in the future\n                */\n                popoverName !== 'position' ? originBreakpoint : _breakpointIds.BREAKPOINT_ID_MAIN));\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":757,"startedAt":"2021-01-12T13:43:02.810Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","labels should have id origin on main breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":468,"startedAt":"2021-01-12T13:43:03.569Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","column start value should be 2"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:43:04.038Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","align self value should be start"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":23,"startedAt":"2021-01-12T13:43:04.068Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","justify self value should be baseline"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":21,"startedAt":"2021-01-12T13:43:04.092Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","order number value should be -9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:43:04.115Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to main breakpoint, while value was set on small","labels popover should have messages for Id origin on active main breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":983,"startedAt":"2021-01-12T13:43:04.142Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","labels should have id origin on medium breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":378,"startedAt":"2021-01-12T13:43:05.126Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","column start value should be 3"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":53,"startedAt":"2021-01-12T13:43:05.505Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","align self value should be center"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:43:05.559Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","justify self value should be stretch"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":22,"startedAt":"2021-01-12T13:43:05.586Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","order number value should be 9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":26,"startedAt":"2021-01-12T13:43:05.609Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the small breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on small","labels popover should have messages for Id origin on active medium breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":738,"startedAt":"2021-01-12T13:43:05.636Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","labels should have Id origin on active tiny breakpoint"],"state":"passed","body":"function () {\n          gridItem.alignSelf.label.verifyOrigin('Id');\n          gridItem.order.label.verifyOrigin('Id');\n          gridItem.position.label.verifyOrigin('Id');\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1666,"startedAt":"2021-01-12T13:43:06.376Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","labels popover should have messages for Id origin on active tiny breakpoint and no inheritance data"],"state":"passed","body":"function () {\n          var positionPopoverOpen = function positionPopoverOpen() {\n            return gridItem.position.label.openPopover();\n          };\n\n          var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n            return gridItem.alignSelf.label.openPopover();\n          };\n\n          var orderPopoverOpen = function orderPopoverOpen() {\n            return gridItem.order.label.openPopover();\n          };\n\n          [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref) {\n            var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n                openPopover = _ref2[0],\n                popoverName = _ref2[1];\n\n            cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n            var popover = openPopover();\n            popover.verifyInheritanceMessage(originBreakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n            popover.getInheritanceOption().should(function ($option) {\n              return expect($option).to.have.length(0);\n            });\n            popover.close();\n          });\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":765,"startedAt":"2021-01-12T13:43:08.043Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","column start value should be 5"],"state":"passed","body":"function () {\n            gridItem.columnStartInput.getNode().should('have.value', columnStartNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":167,"startedAt":"2021-01-12T13:43:08.809Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","align self value should be stretch"],"state":"passed","body":"function () {\n            gridItem.alignSelf.input.assertSelectedOption(alignSelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":200,"startedAt":"2021-01-12T13:43:08.977Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","justify self value should be center"],"state":"passed","body":"function () {\n            gridItem.justifySelf.input.assertSelectedOption(justifySelfNewValue);\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":221,"startedAt":"2021-01-12T13:43:09.178Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","order number value should be 9999"],"state":"passed","body":"function () {\n            gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[orderNewValue]));\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":72,"startedAt":"2021-01-12T13:43:09.400Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","labels should have id origin on main breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":370,"startedAt":"2021-01-12T13:43:09.473Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","column start value should be 2"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":47,"startedAt":"2021-01-12T13:43:09.844Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","align self value should be start"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":27,"startedAt":"2021-01-12T13:43:09.892Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","justify self value should be baseline"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":22,"startedAt":"2021-01-12T13:43:09.920Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","order number value should be -9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":19,"startedAt":"2021-01-12T13:43:09.943Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to main breakpoint, while value was set on tiny","labels popover should have messages for Id origin on active main breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":734,"startedAt":"2021-01-12T13:43:09.963Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","labels should have id origin on medium breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":371,"startedAt":"2021-01-12T13:43:10.699Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","column start value should be 3"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":42,"startedAt":"2021-01-12T13:43:11.071Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","align self value should be center"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":60,"startedAt":"2021-01-12T13:43:11.114Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","justify self value should be stretch"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":50,"startedAt":"2021-01-12T13:43:11.175Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","order number value should be 9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":49,"startedAt":"2021-01-12T13:43:11.227Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to medium breakpoint, while value was set on tiny","labels popover should have messages for Id origin on active medium breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":888,"startedAt":"2021-01-12T13:43:11.278Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","labels should have id origin on small breakpoint"],"state":"passed","body":"function () {\n              gridItem.alignSelf.label.verifyOrigin('Id');\n              gridItem.order.label.verifyOrigin('Id');\n              gridItem.position.label.verifyOrigin('Id');\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":353,"startedAt":"2021-01-12T13:43:12.167Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","column start value should be 4"],"state":"passed","body":"function () {\n              gridItem.columnStartInput.getNode().should('have.value', values[breakpoint].columnStartNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":39,"startedAt":"2021-01-12T13:43:12.521Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","align self value should be end"],"state":"passed","body":"function () {\n              gridItem.alignSelf.input.assertSelectedOption(values[breakpoint].alignSelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:43:12.561Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","justify self value should be end"],"state":"passed","body":"function () {\n              gridItem.justifySelf.input.assertSelectedOption(values[breakpoint].justifySelfNewValue);\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":28,"startedAt":"2021-01-12T13:43:12.590Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","order number value should be -9999"],"state":"passed","body":"function () {\n              gridItem.orderNumber.getNode().should('have.value', String(ORDER_PRESETS[values[breakpoint].orderNewValue]));\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":21,"startedAt":"2021-01-12T13:43:12.620Z","screenshots":[]}]},{"title":["Breakpoints and inheritance in style panel grid item section","Manual grid item","values have been set on the tiny breakpoint for position, align self and order","when switching to small breakpoint, while value was set on tiny","labels popover should have messages for Id origin on active small breakpoint and no inheritance data"],"state":"passed","body":"function () {\n              var positionPopoverOpen = function positionPopoverOpen() {\n                return gridItem.position.label.openPopover();\n              };\n\n              var alignSelfPopoverOpen = function alignSelfPopoverOpen() {\n                return gridItem.alignSelf.label.openPopover();\n              };\n\n              var orderPopoverOpen = function orderPopoverOpen() {\n                return gridItem.order.label.openPopover();\n              };\n\n              [[positionPopoverOpen, 'position'], [alignSelfPopoverOpen, 'align self'], [orderPopoverOpen, 'order']].forEach(function (_ref5) {\n                var _ref6 = (0, _slicedToArray2[\"default\"])(_ref5, 2),\n                    openPopover = _ref6[0],\n                    popoverName = _ref6[1];\n\n                cy.step(\"Check inheritance in popover for \".concat(popoverName, \" label\"));\n                var popover = openPopover();\n                popover.verifyInheritanceMessage(breakpoint === _breakpointIds.BREAKPOINT_ID_MAIN ? 'default' : 'id');\n                popover.getInheritanceOption().should(function ($option) {\n                  return expect($option).to.have.length(0);\n                });\n                popover.close();\n              });\n            }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":763,"startedAt":"2021-01-12T13:43:12.642Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-grid-item.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-grid-item.spec.js","absolute":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/entrypoints/designer/client/ui-tests/breakpoints/breakpoints-style-panel-grid-item.spec.js","specType":"integration"},"shouldUploadVideo":false}],"browserPath":"/chromium64/chrome-linux/chrome","browserName":"chromium","browserVersion":"74.0.3729.0","osName":"linux","osVersion":"Debian - 9.13","cypressVersion":"6.2.1","config":{"env":{"baseUrl":"http://wfdev.io:3030","stagingSuperDomain":"dev.webflowtest.io","User-Agent":"cypress","RECORD_KEY":"f9ae3...c4cf9"},"integrationFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow","configFile":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/cypress.json","version":"6.2.1","chromeWebSecurity":false,"browser":"chromium","video":false,"videoUploadOnPasses":false,"viewportWidth":1440,"viewportHeight":900,"defaultCommandTimeout":30000,"numTestsKeptInMemory":0,"ignoreTestFiles":"*.quarantined.spec.js","testFiles":"**/*.spec.js","fileServerFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config","fixturesFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/fixtures","pluginsFile":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/plugins/index.js","screenshotsFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/screenshots","supportFile":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/support/index.js","videosFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/videos","retries":{"runMode":2,"openMode":0},"projectId":"xfhtj7","reporter":"../../../node_modules/cypress-multi-reporters","reporterOptions":{"configFile":"reporter-config.json"},"projectRoot":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config","projectName":"cypress-config","morgan":false,"isTextTerminal":true,"socketId":"akxg4","report":true,"browsers":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"animationDistanceThreshold":5,"autoOpen":false,"baseUrl":null,"blockHosts":null,"clientRoute":"/__/","componentFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/cypress/component","execTimeout":60000,"experimentalComponentTesting":false,"experimentalFetchPolyfill":false,"experimentalRunEvents":false,"experimentalSourceRewriting":false,"firefoxGcInterval":{"runMode":1,"openMode":null},"hosts":null,"includeShadowDom":false,"javascripts":[],"modifyObstructiveCode":true,"namespace":"__cypress","nodeVersion":"default","pageLoadTimeout":60000,"port":45375,"reporterRoute":"/__cypress/reporter","requestTimeout":5000,"responseTimeout":30000,"screenshotOnRunFailure":true,"socketIoRoute":"/__socket.io","socketIoCookie":"__socket.io","taskTimeout":60000,"trashAssetsBeforeRuns":true,"userAgent":null,"videoCompression":32,"waitForAnimations":true,"scrollBehavior":"top","watchForFileChanges":false,"xhrRoute":"/xhrs/","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"baseUrl":{"value":null,"from":"default"},"blockHosts":{"value":null,"from":"default"},"browsers":{"value":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"from":"default"},"chromeWebSecurity":{"value":false,"from":"config"},"componentFolder":{"value":"cypress/component","from":"default"},"defaultCommandTimeout":{"value":30000,"from":"config"},"env":{"baseUrl":{"value":"http://wfdev.io:3030","from":"plugin"},"User-Agent":{"value":"cypress","from":"config"},"RECORD_KEY":{"value":"f9ae3...c4cf9","from":"env"},"stagingSuperDomain":{"value":"dev.webflowtest.io","from":"plugin"}},"execTimeout":{"value":60000,"from":"default"},"experimentalComponentTesting":{"value":false,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalRunEvents":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"fileServerFolder":{"value":"./","from":"config"},"firefoxGcInterval":{"value":{"runMode":1,"openMode":null},"from":"default"},"fixturesFolder":{"value":"./fixtures","from":"config"},"hosts":{"value":null,"from":"default"},"ignoreTestFiles":{"value":"*.quarantined.spec.js","from":"config"},"includeShadowDom":{"value":false,"from":"default"},"integrationFolder":{"value":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow","from":"plugin"},"modifyObstructiveCode":{"value":true,"from":"default"},"nodeVersion":{"value":"default","from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"pageLoadTimeout":{"value":60000,"from":"default"},"pluginsFile":{"value":"./plugins/index.js","from":"config"},"port":{"value":null,"from":"default"},"projectId":{"value":"xfhtj7","from":"config"},"reporter":{"value":"../../../node_modules/cypress-multi-reporters","from":"cli"},"reporterOptions":{"value":{"configFile":"reporter-config.json"},"from":"config"},"requestTimeout":{"value":5000,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":2,"openMode":0},"from":"config"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"./screenshots","from":"config"},"supportFile":{"value":"./support/index.js","from":"config"},"taskTimeout":{"value":60000,"from":"default"},"testFiles":{"value":"**/*.spec.js","from":"config"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":false,"from":"config"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"./videos","from":"config"},"videoUploadOnPasses":{"value":false,"from":"config"},"viewportHeight":{"value":900,"from":"config"},"viewportWidth":{"value":1440,"from":"config"},"waitForAnimations":{"value":true,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"configFile":{"value":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/cypress.json","from":"plugin"},"version":{"value":"6.2.1","from":"plugin"}},"parentTestsFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/cypress","parentTestsFolderDisplay":"cypress-config/cypress","supportFolder":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/support","integrationExampleName":"examples","integrationExamplePath":"/scratch/buildkite-agent-8db24c1c-54da-11eb-97fa-4a22e55b2d68-wd9rb/webflow/webflow/packages/tooling/cypress-config/cypress/integration/examples","scaffoldedFiles":[{"name":"cypress","children":[{"name":"integration","children":[{"name":"examples","children":[{"name":"actions.spec.js"},{"name":"aliasing.spec.js"},{"name":"assertions.spec.js"},{"name":"connectors.spec.js"},{"name":"cookies.spec.js"},{"name":"cypress_api.spec.js"},{"name":"files.spec.js"},{"name":"local_storage.spec.js"},{"name":"location.spec.js"},{"name":"misc.spec.js"},{"name":"navigation.spec.js"},{"name":"network_requests.spec.js"},{"name":"querying.spec.js"},{"name":"spies_stubs_clocks.spec.js"},{"name":"traversal.spec.js"},{"name":"utilities.spec.js"},{"name":"viewport.spec.js"},{"name":"waiting.spec.js"},{"name":"window.spec.js"}]}]}]},{"name":"fixtures","children":[{"name":"example.json"}]},{"name":"support","children":[{"name":"commands.js"},{"name":"index.js"}]},{"name":"plugins","children":[{"name":"index.js"}]}],"resolvedNodeVersion":"12.18.3","state":{},"proxyUrl":"http://localhost:45375","browserUrl":"http://localhost:45375/__/","reporterUrl":"http://localhost:45375/__cypress/reporter","xhrUrl":"__cypress/xhrs/"},"status":"finished"}]