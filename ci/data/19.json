[{"startedTestsAt":"2021-01-12T13:40:59.866Z","endedTestsAt":"2021-01-12T13:50:22.384Z","totalDuration":480716,"totalSuites":36,"totalTests":125,"totalFailed":0,"totalPassed":125,"totalPending":0,"totalSkipped":0,"runs":[{"stats":{"suites":4,"tests":18,"passes":18,"pending":0,"skipped":0,"failures":0,"duration":51404,"startedAt":"2021-01-12T13:40:59.866Z","endedAt":"2021-01-12T13:41:51.270Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":4,"tests":18,"passes":18,"pending":0,"failures":0,"start":"2021-01-12T13:40:59.868Z","end":"2021-01-12T13:41:51.288Z","duration":51420},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.stylePanelWidth);\n    rightPanel = workspace.getRightPanel();\n    stylesTab = rightPanel.getStylesTab();\n    canvas = workspace.getCanvas();\n\n    verify = function verify(node, assertion) {\n      canvas.within(function () {\n        var _cy$get;\n\n        (_cy$get = cy.get(node)).should.apply(_cy$get, (0, _toConsumableArray2[\"default\"])(assertion));\n      });\n    };\n\n    canvas.selectElement('.style-section-1');\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Style Panel Sizing: ","Width & Height"],"state":"passed","body":"function () {\n    cy.window().then(function (win) {\n      cy.step('inspect scrollbar info to offset `vw` measurements');\n\n      var _win$_webflow$getStor = win._webflow.getStoreState('ExternalStore'),\n          scrollBarDetails = _win$_webflow$getStor.scrollBarDetails;\n\n      var expectedWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0);\n      var _stylesTab$properties = stylesTab.properties,\n          width = _stylesTab$properties.width,\n          minWidth = _stylesTab$properties.minWidth,\n          maxWidth = _stylesTab$properties.maxWidth,\n          height = _stylesTab$properties.height,\n          minHeight = _stylesTab$properties.minHeight,\n          maxHeight = _stylesTab$properties.maxHeight;\n      width.input.clear().type('500px{enter}');\n      height.input.clear().type('500px{enter}');\n      verify('.style-section-1', ['have.css', 'width', '500px']);\n      verify('.style-section-1', ['have.css', 'height', '500px']);\n      width.input.clear().type('100vw{enter}');\n      height.input.clear().type('100vh{enter}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(expectedWidth, \"px\")]);\n      verify('.style-section-1', ['have.css', 'height', '836px']);\n      maxWidth.input.type('500px{enter}');\n      maxHeight.input.type('500px{enter}');\n      width.input.clear().type('50px{enter}');\n      height.input.clear().type('50px{enter}');\n      minWidth.input.type('400px{enter}');\n      minHeight.input.type('400px{enter}');\n      verify('.style-section-1', ['have.css', 'min-width', '400px']);\n      verify('.style-section-1', ['have.css', 'min-height', '400px']);\n      verify('.style-section-1', ['have.css', 'max-width', '500px']);\n      verify('.style-section-1', ['have.css', 'max-height', '500px']);\n      width.label.resetOrigin();\n      minWidth.label.resetOrigin();\n      maxWidth.label.resetOrigin();\n      height.label.resetOrigin();\n      minHeight.label.resetOrigin();\n      maxHeight.label.resetOrigin();\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":21568,"startedAt":"2021-01-12T13:41:05.406Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput only maxWidth/maxHeight support none"],"state":"passed","body":"function () {\n    var _stylesTab$properties2 = stylesTab.properties,\n        width = _stylesTab$properties2.width,\n        maxWidth = _stylesTab$properties2.maxWidth,\n        maxHeight = _stylesTab$properties2.maxHeight;\n    cy.window().then(function (win) {\n      maxWidth.input.clear().type('None{enter}');\n      verify('.style-section-1', ['have.css', 'max-width', 'none']);\n      maxHeight.input.clear().type('none{enter}');\n      verify('.style-section-1', ['have.css', 'max-width', 'none']); // none is invalid for width so the width shouldn't have changed to none\n\n      width.input.clear().type('none{enter}');\n      width.label.verifyOrigin('Default');\n      cy.step('inspect scrollbar info to offset width measurements');\n\n      var _win$_webflow$getStor2 = win._webflow.getStoreState('ExternalStore'),\n          scrollBarDetails = _win$_webflow$getStor2.scrollBarDetails;\n\n      var expectedWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0);\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(expectedWidth, \"px\")]);\n      maxHeight.label.resetOrigin();\n      maxWidth.label.resetOrigin();\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2339,"startedAt":"2021-01-12T13:41:26.998Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput auto->up/downarrow conversions"],"state":"passed","body":"function () {\n    var width = stylesTab.properties.width;\n    cy.window().then(function (win) {\n      var _win$_webflow$getStor3 = win._webflow.getStoreState('ExternalStore'),\n          scrollBarDetails = _win$_webflow$getStor3.scrollBarDetails;\n\n      var naturalWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0);\n      var baseFontSize = 14;\n      cy.step('from auto, pressing up should go to the natural widht');\n      width.input.type('{uparrow}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n      cy.step('should be focused at the end of the width value, typing `em` should convert units');\n      width.input.type('em{enter}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth * baseFontSize, \"px\")]);\n      width.label.resetOrigin();\n      cy.step('Use \"downarrow\" to set negative value - should return 0px');\n      width.input.type('{downarrow}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n      width.label.resetOrigin();\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1811,"startedAt":"2021-01-12T13:41:29.338Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput none->up/downarrow conversions"],"state":"passed","body":"function () {\n    var maxWidth = stylesTab.properties.maxWidth;\n    cy.window().then(function (win) {\n      var _win$_webflow$getStor4 = win._webflow.getStoreState('ExternalStore'),\n          scrollBarDetails = _win$_webflow$getStor4.scrollBarDetails;\n\n      var naturalWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0);\n      var baseFontSize = 14;\n      cy.step('from none, pressing up should go to the natural widdth');\n      maxWidth.input.type('{uparrow}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n      cy.step('should be focused at the end of the width value, typing `em` should convert units');\n      maxWidth.input.type('em{enter}');\n      verify('.style-section-1', ['have.css', 'maxWidth', \"\".concat(naturalWidth * baseFontSize, \"px\")]);\n      cy.step('Reset max width and assert it worked');\n      maxWidth.label.resetOrigin();\n      verify('.style-section-1', ['have.css', 'max-width', 'none']);\n      cy.step('from none, pressing down should go to 0px');\n      maxWidth.input.type('{downarrow}');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n      maxWidth.label.resetOrigin();\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2642,"startedAt":"2021-01-12T13:41:31.150Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput does not commit empty changes on blur or mouseup"],"state":"passed","body":"function () {\n    cy.step('Tab through inputs');\n    var _stylesTab$properties3 = stylesTab.properties,\n        width = _stylesTab$properties3.width,\n        maxWidth = _stylesTab$properties3.maxWidth,\n        minWidth = _stylesTab$properties3.minWidth,\n        height = _stylesTab$properties3.height,\n        maxHeight = _stylesTab$properties3.maxHeight,\n        minHeight = _stylesTab$properties3.minHeight;\n    width.input.getNode().focus().click();\n    height.input.getNode().focus().click();\n    minWidth.input.getNode().focus().click();\n    minHeight.input.getNode().focus().click();\n    maxWidth.input.getNode().focus().click();\n    maxHeight.input.getNode().focus().click().blur();\n    cy.step('Assert no changes were applied during mouseup or blur');\n    width.label.verifyOrigin('Default');\n    height.label.verifyOrigin('Default');\n    minWidth.label.verifyOrigin('Default');\n    minHeight.label.verifyOrigin('Default');\n    maxWidth.label.verifyOrigin('Default');\n    maxHeight.label.verifyOrigin('Default');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":857,"startedAt":"2021-01-12T13:41:33.794Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput can do math"],"state":"passed","body":"function () {\n    var width = stylesTab.properties.width;\n    var expectedWidth = 25;\n    width.input.clear().type('100px/4{enter}');\n    width.input.getNode().should('have.value', String(expectedWidth));\n    verify('.style-section-1', ['have.css', 'width', \"\".concat(expectedWidth, \"px\")]);\n    width.label.resetOrigin();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":979,"startedAt":"2021-01-12T13:41:34.652Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","UnitInput doesn’t change for same unit type click"],"state":"passed","body":"function () {\n    var width = stylesTab.properties.width;\n    cy.window().then(function (win) {\n      var _win$_webflow$getStor7 = win._webflow.getStoreState('ExternalStore'),\n          scrollBarDetails = _win$_webflow$getStor7.scrollBarDetails;\n\n      var naturalWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0); // converting to px should magically measure the unit\n\n      width.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]); // clicking px again should maintain the current value\n\n      width.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n      width.label.resetOrigin();\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1058,"startedAt":"2021-01-12T13:41:35.632Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","Width should maintain natural width from px, %, and auto"],"state":"passed","body":"function () {\n      var width = stylesTab.properties.width;\n      cy.window().then(function (win) {\n        var _win$_webflow$getStor5 = win._webflow.getStoreState('ExternalStore'),\n            scrollBarDetails = _win$_webflow$getStor5.scrollBarDetails;\n\n        var naturalWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0); // const baseFontSize = 14;\n        // converting to px should magically measure the unit\n\n        width.input.clickUnit().clickOption('PX');\n        verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n        width.input.clickUnit().clickOption('%');\n        verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n        width.input.clickUnit().clickOption('AUTO');\n        width.label.verifyOrigin('Local');\n        verify('.style-section-1', ['have.css', 'width', \"\".concat(naturalWidth, \"px\")]);\n        width.label.resetOrigin();\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1386,"startedAt":"2021-01-12T13:41:36.691Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","Height should maintain natural height from px, %, and auto"],"state":"passed","body":"function () {\n      var height = stylesTab.properties.height; // idk why 100 but okay\n\n      var naturalHeight = 100; // converting to px should magically measure the unit\n\n      height.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'height', \"\".concat(naturalHeight, \"px\")]);\n      height.input.clickUnit().clickOption('%'); // FIXME Beta Chrome and Stable Chrome calculate height differently\n      // This checks for the two possible height calculations\n\n      cy.iframeFocus('#site-iframe-next').then(function (iframe) {\n        cy.wrap(iframe.find('.style-section-1')).then(function ($div) {\n          var heights = [parseInt(naturalHeight * 1.1, 10), naturalHeight];\n          expect(heights).to.contain($div.height());\n        });\n      });\n      height.input.clickUnit().clickOption('AUTO');\n      height.label.verifyOrigin('Local');\n      verify('.style-section-1', ['have.css', 'height', \"\".concat(naturalHeight, \"px\")]);\n      height.label.resetOrigin();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1423,"startedAt":"2021-01-12T13:41:38.078Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","MinWidth should maintain 0 auto px, %, and auto"],"state":"passed","body":"function () {\n      var minWidth = stylesTab.properties.minWidth; // converting to px should magically measure the unit\n\n      minWidth.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'minWidth', '0px']);\n      minWidth.input.clickUnit().clickOption('%');\n      verify('.style-section-1', ['have.css', 'minWidth', '100%']);\n      minWidth.input.clickUnit().clickOption('AUTO');\n      minWidth.label.verifyOrigin('Local');\n      verify('.style-section-1', ['have.css', 'minWidth', \"0px\"]);\n      minWidth.label.resetOrigin();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1547,"startedAt":"2021-01-12T13:41:39.502Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","MinHeight should maintain 0 auto px, %, and auto"],"state":"passed","body":"function () {\n      var minHeight = stylesTab.properties.minHeight; // converting to px should magically measure the unit\n\n      minHeight.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'minHeight', '0px']);\n      minHeight.input.clickUnit().clickOption('%'); // why 12%? Because the unit conversion stuff is borked\n\n      verify('.style-section-1', ['have.css', 'minHeight', '12%']);\n      minHeight.input.clickUnit().clickOption('AUTO');\n      minHeight.label.verifyOrigin('Local');\n      verify('.style-section-1', ['have.css', 'minHeight', \"0px\"]);\n      minHeight.label.resetOrigin();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1666,"startedAt":"2021-01-12T13:41:41.050Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","MaxWidth should maintain 0 auto px, %, and none"],"state":"passed","body":"function () {\n      var maxWidth = stylesTab.properties.maxWidth;\n      cy.window().then(function (win) {\n        var _win$_webflow$getStor6 = win._webflow.getStoreState('ExternalStore'),\n            scrollBarDetails = _win$_webflow$getStor6.scrollBarDetails;\n\n        var naturalWidth = 1164 - (scrollBarDetails.enabled ? scrollBarDetails.width * 2 : 0); // const baseFontSize = 14;\n        // converting to px should magically measure the unit\n\n        maxWidth.input.clickUnit().clickOption('PX');\n        verify('.style-section-1', ['have.css', 'maxWidth', \"\".concat(naturalWidth, \"px\")]);\n        maxWidth.input.clickUnit().clickOption('%');\n        verify('.style-section-1', ['have.css', 'maxWidth', '100%']);\n        maxWidth.input.clickUnit().clickOption('NONE');\n        maxWidth.label.verifyOrigin('Local');\n        verify('.style-section-1', ['have.css', 'maxWidth', 'none']);\n        maxWidth.label.resetOrigin();\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1363,"startedAt":"2021-01-12T13:41:42.724Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","keyword<--->unit conversions","MaxHeight should maintain 0 auto px, %, and auto"],"state":"passed","body":"function () {\n      // idk why 100 but okay\n      var naturalHeight = 100;\n      var maxHeight = stylesTab.properties.maxHeight;\n      maxHeight.input.clickUnit().clickOption('PX');\n      verify('.style-section-1', ['have.css', 'maxHeight', \"\".concat(naturalHeight, \"px\")]);\n      maxHeight.input.clickUnit().clickOption('%'); // FIXME current height percentage math is...weird. This will probably be\n      // changed someday\n\n      verify('.style-section-1', ['have.css', 'maxHeight', '12%']);\n      maxHeight.input.clickUnit().clickOption('NONE');\n      maxHeight.label.verifyOrigin('Local');\n      verify('.style-section-1', ['have.css', 'maxHeight', 'none']);\n      maxHeight.label.resetOrigin();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1808,"startedAt":"2021-01-12T13:41:44.089Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","Object Fit: ","Should set Fit values"],"state":"passed","body":"function () {\n      var _stylesTab$properties4 = stylesTab.properties.objectFit,\n          label = _stylesTab$properties4.label,\n          input = _stylesTab$properties4.input;\n      input.open().clickOption('Cover');\n      input.assertValue('Cover');\n      verify('.style-section-1', ['have.css', 'object-fit', 'cover']);\n      input.open().clickOption('Contain');\n      input.assertValue('Contain');\n      verify('.style-section-1', ['have.css', 'object-fit', 'contain']);\n      label.verifyOrigin('Local');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1370,"startedAt":"2021-01-12T13:41:45.899Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","Object Fit: ","Should reset fit values"],"state":"passed","body":"function () {\n      var _stylesTab$properties5 = stylesTab.properties.objectFit,\n          label = _stylesTab$properties5.label,\n          input = _stylesTab$properties5.input;\n      input.open().clickOption('Cover');\n      input.assertValue('Cover');\n      verify('.style-section-1', ['have.css', 'object-fit', 'cover']);\n      label.resetOrigin();\n      input.assertValue('Fill');\n      label.verifyOrigin('Default');\n      verify('.style-section-1', ['have.css', 'object-fit', 'fill']);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":806,"startedAt":"2021-01-12T13:41:47.270Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","Object Fit: ","Should preview Fit values on hover"],"state":"passed","body":"function () {\n      var _stylesTab$properties6 = stylesTab.properties.objectFit,\n          label = _stylesTab$properties6.label,\n          input = _stylesTab$properties6.input;\n      cy.step('Reset to start');\n      label.resetOrigin();\n      cy.step('Hover each fit option');\n      input.open().hoverOver('Cover');\n      verify('.style-section-1', ['have.css', 'object-fit', 'cover']);\n      input.open().hoverOver('Contain');\n      verify('.style-section-1', ['have.css', 'object-fit', 'contain']);\n      input.open().hoverOver('Fill');\n      verify('.style-section-1', ['have.css', 'object-fit', 'fill']);\n      input.open().hoverOver('None');\n      verify('.style-section-1', ['have.css', 'object-fit', 'none']);\n      input.open().hoverOver('Scale Down');\n      verify('.style-section-1', ['have.css', 'object-fit', 'scale-down']);\n      cy.step('Dismiss select, and check label and input still default');\n      label.getNode().click({\n        force: true\n      });\n      cy.step('Check label and input are still default');\n      input.assertValue('Fill');\n      label.verifyOrigin('Default');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2327,"startedAt":"2021-01-12T13:41:48.077Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","Object Position: ","Should set Object Position values"],"state":"passed","body":"function () {\n      var input = stylesTab.properties.objectPosition.input;\n      cy.step('Open object position popover');\n      cy.get('[data-automation-id=\"object-position-property-label-button\"').click();\n      input.clickOption('top right');\n      verify('.style-section-1', ['have.css', 'object-position', '100% 0%']);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":349,"startedAt":"2021-01-12T13:41:50.405Z","screenshots":[]}]},{"title":["Style Panel Sizing: ","Object Position: ","Should reset object position values"],"state":"passed","body":"function () {\n      var label = stylesTab.properties.objectPosition.label;\n      label.resetOrigin();\n      verify('.style-section-1', ['have.css', 'object-position', '50% 50%']);\n      label.verifyOrigin('Default');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":513,"startedAt":"2021-01-12T13:41:50.755Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/styles/sizing.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/styles/sizing.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/styles/sizing.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":2,"passes":2,"pending":0,"skipped":0,"failures":0,"duration":22606,"startedAt":"2021-01-12T13:41:58.449Z","endedAt":"2021-01-12T13:42:21.055Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":2,"passes":2,"pending":0,"failures":0,"start":"2021-01-12T13:41:58.452Z","end":"2021-01-12T13:42:21.063Z","duration":22611},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    rightPanel = workspace.getRightPanel();\n    stylesTab = rightPanel.getStylesTab();\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    canvas.selectElement(\".style-div\");\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Style Panel Spacing:","can set margin sides"],"state":"passed","body":"function () {\n    var leftEditor = stylesTab.properties.margin.input.left.openEditor();\n    leftEditor.close();\n    var topEditor = stylesTab.properties.margin.input.top.openEditor();\n    topEditor.valueInput.unitInput.type('10px{enter}');\n    var rightEditor = stylesTab.properties.margin.input.right.openEditor();\n    rightEditor.valueInput.unitInput.type('10px{enter}');\n    var bottomEditor = stylesTab.properties.margin.input.bottom.openEditor();\n    bottomEditor.valueInput.unitInput.type('10px{enter}');\n    stylesTab.properties.margin.input.left.click();\n    stylesTab.properties.margin.input.left.click();\n    stylesTab.properties.margin.input.top.click();\n    stylesTab.properties.margin.input.top.click();\n    stylesTab.properties.margin.input.right.click();\n    stylesTab.properties.margin.input.bottom.click();\n    stylesTab.properties.margin.input.bottom.click();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":15524,"startedAt":"2021-01-12T13:42:03.465Z","screenshots":[]}]},{"title":["Style Panel Spacing:","can set padding sides"],"state":"passed","body":"function () {\n    var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n    leftEditor.close();\n    var topEditor = stylesTab.properties.padding.input.top.openEditor();\n    topEditor.close();\n    var rightEditor = stylesTab.properties.padding.input.right.openEditor();\n    rightEditor.close();\n    var bottomEditor = stylesTab.properties.padding.input.bottom.openEditor();\n    bottomEditor.close();\n    stylesTab.properties.padding.input.left.click();\n    stylesTab.properties.padding.input.left.click();\n    stylesTab.properties.padding.input.top.click();\n    stylesTab.properties.padding.input.top.click();\n    stylesTab.properties.padding.input.right.click();\n    stylesTab.properties.padding.input.bottom.click();\n    stylesTab.properties.padding.input.bottom.click();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2053,"startedAt":"2021-01-12T13:42:19.000Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/styles/spacing.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/styles/spacing.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/styles/spacing.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":6,"tests":20,"passes":20,"pending":0,"skipped":0,"failures":0,"duration":47609,"startedAt":"2021-01-12T13:42:29.058Z","endedAt":"2021-01-12T13:43:16.667Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":6,"tests":20,"passes":20,"pending":0,"failures":0,"start":"2021-01-12T13:42:29.061Z","end":"2021-01-12T13:43:16.674Z","duration":47613},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    rightPanel = workspace.getRightPanel();\n    stylesTab = rightPanel.getStylesTab();\n    canvas = workspace.getCanvas();\n    canvas.selectElement(element);\n    cy.step('Toggle sections visibility in Style Panel');\n    action.closeStylesPanelSection('Layout');\n    action.closeStylesPanelSection('Spacing');\n    action.closeStylesPanelSection('Size');\n    action.closeStylesPanelSection('Position');\n    action.closeStylesPanelSection('Backgrounds');\n    action.closeStylesPanelSection('Borders');\n    action.closeStylesPanelSection('Effects');\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function () {\n    canvas.selectElement(element);\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Style Panel Typography: ","UnitInput does not commit empty changes on blur"],"state":"passed","body":"function () {\n    action.ensureAdvancedOpen(stylesTab);\n    var _stylesTab$properties8 = stylesTab.properties,\n        fontSize = _stylesTab$properties8.fontSize,\n        lineHeight = _stylesTab$properties8.lineHeight,\n        letterSpacing = _stylesTab$properties8.letterSpacing,\n        textIndent = _stylesTab$properties8.textIndent,\n        color = _stylesTab$properties8.color;\n    fontSize.input.getNode().focus();\n    lineHeight.input.getNode().focus();\n    letterSpacing.input.getNode().focus();\n    textIndent.input.getNode().focus();\n    color.input.getNode().focus().blur();\n    fontSize.label.verifyOrigin('Inherited');\n    lineHeight.label.verifyOrigin('Inherited');\n    letterSpacing.label.verifyOrigin('Default');\n    textIndent.label.verifyOrigin('Default');\n    color.label.verifyOrigin('Inherited');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":15342,"startedAt":"2021-01-12T13:42:34.178Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets font-size values"],"state":"passed","body":"function () {\n    // default is 14px and we get the computed value back\n    var _stylesTab$properties9 = stylesTab.properties.fontSize,\n        label = _stylesTab$properties9.label,\n        input = _stylesTab$properties9.input;\n    input.type('2em{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'font-size', '28px');\n    });\n    input.clear().type('64px{enter}'); // font-size can’t be negative\n\n    input.clear().type('-20%{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'font-size', '0px');\n    });\n    label.resetOrigin();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2169,"startedAt":"2021-01-12T13:42:49.539Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets line-height values"],"state":"passed","body":"function () {\n    var _stylesTab$properties10 = stylesTab.properties.lineHeight,\n        label = _stylesTab$properties10.label,\n        input = _stylesTab$properties10.input;\n    input.clear().type('2em{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'line-height', '28px');\n    });\n    input.clear().type('50%{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'line-height', '7px');\n    }); // line-height shouldn’t be allowed to go negative\n\n    input.clear().type('-3px{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'line-height', '0px');\n    }); // lrne height can be unitless\n\n    input.clear().type('10{enter}'); // UnitLess is rendered as a dash right now.\n\n    input.clickUnit().clickOption('-');\n    verify(function (node) {\n      return (// 10(unitless) line height * 14px (font-size) = 140px\n        node.should('have.css', 'line-height', '140px')\n      );\n    });\n    label.resetOrigin();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2455,"startedAt":"2021-01-12T13:42:51.710Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets font-style values"],"state":"passed","body":"function () {\n    cy.step('Default font-style should be: normal');\n    var _stylesTab$properties12 = stylesTab.properties.fontStyle,\n        input = _stylesTab$properties12.input,\n        label = _stylesTab$properties12.label;\n    verify(function (node) {\n      return node.should('have.css', 'font-style', 'normal');\n    });\n    input.clickOption('Italic');\n    verify(function (node) {\n      return node.should('have.css', 'font-style', 'italic');\n    });\n    input.clickOption('Regular');\n    verify(function (node) {\n      return node.should('have.css', 'font-style', 'normal');\n    });\n    label.resetOrigin();\n    verify(function (node) {\n      return node.should('have.css', 'font-style', 'normal');\n    });\n    label.verifyOrigin('Default');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":765,"startedAt":"2021-01-12T13:42:54.166Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets text-decoration values"],"state":"passed","body":"function () {\n    var _stylesTab$properties13 = stylesTab.properties.textDecoration,\n        input = _stylesTab$properties13.input,\n        label = _stylesTab$properties13.label;\n    cy.step('Default text-decoration should be: none');\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /none/);\n    });\n    input.clickOption('Strikethrough');\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /line-through/);\n    });\n    input.clickOption('Overline');\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /overline/);\n    });\n    input.clickOption('None');\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /none/);\n    });\n    input.clickOption('Underline');\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /underline/);\n    });\n    label.resetOrigin();\n    verify(function (node) {\n      return node.should('have.css', 'text-decoration').and('match', /none/);\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1632,"startedAt":"2021-01-12T13:42:54.933Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets text-align values"],"state":"passed","body":"function () {\n    var _stylesTab$properties14 = stylesTab.properties.textAlign,\n        label = _stylesTab$properties14.label,\n        input = _stylesTab$properties14.input;\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'start');\n    });\n    input.clickOption('Center');\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'center');\n    });\n    input.clickOption('Left');\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'left');\n    });\n    input.clickOption('Right');\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'right');\n    });\n    cy.step('Set text-align to: justify');\n    input.clickOption('Justify');\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'justify');\n    });\n    label.resetOrigin();\n    verify(function (node) {\n      return node.should('have.css', 'text-align', 'start');\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1263,"startedAt":"2021-01-12T13:42:56.566Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets letter-spacing values"],"state":"passed","body":"function () {\n    action.ensureAdvancedOpen(stylesTab);\n    var _stylesTab$properties15 = stylesTab.properties.letterSpacing,\n        label = _stylesTab$properties15.label,\n        input = _stylesTab$properties15.input;\n    input.clear().type('-0.5px{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'letter-spacing', '-0.5px');\n    });\n    input.clear().type('0.2em{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'letter-spacing', '2.8px');\n    });\n    label.resetOrigin();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1414,"startedAt":"2021-01-12T13:42:57.830Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets text-indent values"],"state":"passed","body":"function () {\n    action.ensureAdvancedOpen(stylesTab);\n    var _stylesTab$properties16 = stylesTab.properties.textIndent,\n        label = _stylesTab$properties16.label,\n        input = _stylesTab$properties16.input;\n    input.clear().type('1em{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'text-indent', '14px');\n    });\n    input.clear().type('-20px{enter}');\n    verify(function (node) {\n      return node.should('have.css', 'text-indent', '-20px');\n    });\n    label.resetOrigin();\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1430,"startedAt":"2021-01-12T13:42:59.245Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets text-transform values"],"state":"passed","body":"function () {\n    action.ensureAdvancedOpen(stylesTab);\n    var _stylesTab$properties17 = stylesTab.properties.textTransform,\n        label = _stylesTab$properties17.label,\n        input = _stylesTab$properties17.input;\n    cy.step('Default text-transform should be: none');\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'none');\n    });\n    input.clickOption('ALL CAPS');\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'uppercase');\n    });\n    input.clickOption('None');\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'none');\n    });\n    input.clickOption('Capitalize Every Word');\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'capitalize');\n    });\n    input.clickOption('lowercase');\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'lowercase');\n    });\n    label.resetOrigin();\n    verify(function (node) {\n      return node.should('have.css', 'text-transform', 'none');\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1031,"startedAt":"2021-01-12T13:43:00.677Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Sets direction values"],"state":"passed","body":"function () {\n    action.ensureAdvancedOpen(stylesTab);\n    var _stylesTab$properties18 = stylesTab.properties.direction,\n        label = _stylesTab$properties18.label,\n        input = _stylesTab$properties18.input;\n    cy.step('Default direction should be: ltr');\n    verify(function (node) {\n      return node.should('have.css', 'direction', 'ltr');\n    });\n    input.clickOption('Right to left');\n    verify(function (node) {\n      return node.should('have.css', 'direction', 'rtl');\n    });\n    input.clickOption('Left to right');\n    verify(function (node) {\n      return node.should('have.css', 'direction', 'ltr');\n    });\n    label.resetOrigin();\n    verify(function (node) {\n      return node.should('have.css', 'direction', 'ltr');\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":848,"startedAt":"2021-01-12T13:43:01.709Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font family","Can change the font family by selecting the option with the mouse"],"state":"passed","body":"function () {\n      var _stylesTab$properties = stylesTab.properties.fontFamily,\n          label = _stylesTab$properties.label,\n          input = _stylesTab$properties.input;\n      label.verifyOrigin('Inherited');\n      input.open().hoverOver('Verdana');\n      input.keypress('Enter');\n      verify(function (node) {\n        return node.should('have.css', 'fontFamily').and('match', /Verdana/);\n      });\n      label.verifyOrigin('Local'); // verify clean up works\n\n      label.resetOrigin();\n      label.verifyOrigin('Inherited');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1370,"startedAt":"2021-01-12T13:43:02.561Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font family","Can view font family changes on hovering over items without adding to the undo stack"],"state":"passed","body":"function () {\n      var _stylesTab$properties2 = stylesTab.properties.fontFamily,\n          label = _stylesTab$properties2.label,\n          input = _stylesTab$properties2.input;\n      label.verifyOrigin('Inherited');\n      input.open().hoverOver('Impact');\n      verify(function (node) {\n        return node.should('have.css', 'fontFamily').and('match', /Impact/);\n      }); // ideally this would be the case, but it is not at the time of writing\n      // for integration reasons. Don’t assume current integration is the\n      // end-goal. At time of writing it is Local during previews\n      // label.verifyOrigin('Inherited');\n\n      input.keypress('Esc'); // after pressing esc we expect the UI to still be Inherited and ideally\n      // nothing changed in the Undo stack.\n\n      input.assertClosed();\n      label.verifyOrigin('Inherited');\n      verify(function (node) {\n        return node.should('have.css', 'fontFamily').and('not.match', /Impact/);\n      }); // hard-coded default\n\n      input.assertValue('Arial');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":715,"startedAt":"2021-01-12T13:43:03.932Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font family","Can preview font family changes with up/down arrows and confirm with Enter"],"state":"passed","body":"function () {\n      var _stylesTab$properties3 = stylesTab.properties.fontFamily,\n          label = _stylesTab$properties3.label,\n          input = _stylesTab$properties3.input;\n      label.verifyOrigin('Inherited');\n      input.open().hoverOver('Impact').keypress('DownArrow');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontFamily').and('match', /Inconsolata/);\n      });\n      input.keypress('UpArrow');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontFamily').and('match', /Impact/);\n      });\n      input.keypress('Enter'); // after pressing Enter we expect the UI to still be Local and one item\n      // in the Undo stack\n\n      input.assertClosed();\n      input.assertValue('Impact');\n      label.verifyOrigin('Local');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontFamily').and('match', /Impact/);\n      });\n      cy.step('Undo font family change via ctrl-z keyboard entry');\n      cy.get('body').click().type('{ctrl}z'); // one undo will reset the value to Arial and not the in-between views\n\n      input.assertValue('Arial');\n      label.verifyOrigin('Inherited');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1298,"startedAt":"2021-01-12T13:43:04.649Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font family","Selecting the selected value cancels the ephemeral change"],"state":"passed","body":"function () {\n      cy.window().then(function (win) {\n        var expectEphemeralValue = function expectEphemeralValue(bool) {\n          // $$FlowIgnore this is a chai assertion\n          expect(win._webflow.state.SyncStore).to.have.property('isEphemeralStyleChangeInProgress', bool);\n        };\n\n        var _stylesTab$properties4 = stylesTab.properties.fontFamily,\n            label = _stylesTab$properties4.label,\n            input = _stylesTab$properties4.input;\n        label.verifyOrigin('Inherited'); // commit the first option to set it and verify ephemeral has exited\n\n        input.open().clickOption('Verdana');\n        label.verifyOrigin('Local'); // first one commits\n\n        expectEphemeralValue(false); // selecting the same option should also exit ephemeral with a cancel\n\n        input.open().clickOption('Verdana'); // upon clicking an option we should be out of our ephemeral mode\n\n        expectEphemeralValue(false);\n        cy.get('body').type('{ctrl}z'); // one undo will reset the value to Arial and not the in-between views\n\n        input.assertValue('Arial');\n        label.verifyOrigin('Inherited');\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":978,"startedAt":"2021-01-12T13:43:05.948Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font weight","Can change the font weight by selecting the option with the mouse"],"state":"passed","body":"function () {\n      var _stylesTab$properties5 = stylesTab.properties.fontWeight,\n          label = _stylesTab$properties5.label,\n          input = _stylesTab$properties5.input;\n      label.verifyOrigin('Default');\n      input.open().clickOption('700 - Bold');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /700|bold/);\n      });\n      label.verifyOrigin('Local'); // verify clean up works\n\n      label.resetOrigin();\n      label.verifyOrigin('Default');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1195,"startedAt":"2021-01-12T13:43:06.928Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font weight","Can view font weight changes on hovering over items without adding to the undo stack"],"state":"passed","body":"function () {\n      var _stylesTab$properties6 = stylesTab.properties.fontWeight,\n          label = _stylesTab$properties6.label,\n          input = _stylesTab$properties6.input;\n      label.verifyOrigin('Default');\n      input.open().hoverOver('700 - Bold');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /700|bold/);\n      }); // ideally this would be the case, but it is not at the time of writing\n      // for integration reasons. Don’t assume current integration is the\n      // end-goal. At time of writing it is Local during previews\n      // label.verifyOrigin('Default');\n\n      input.keypress('Esc'); // after pressing esc we expect the UI to still be Default and ideally\n      // nothing changed in the Undo stack.\n\n      input.assertClosed();\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /400|normal/);\n      }); // hard-coded default\n\n      input.assertValue('400 - Normal');\n      label.verifyOrigin('Default');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":607,"startedAt":"2021-01-12T13:43:08.124Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Font weight","Can preview font weight changes with up/down arrows and confirm with Enter"],"state":"passed","body":"function () {\n      var _stylesTab$properties7 = stylesTab.properties.fontWeight,\n          label = _stylesTab$properties7.label,\n          input = _stylesTab$properties7.input;\n      label.resetOrigin();\n      label.verifyOrigin('Default');\n      cy.step('DownArrow to 700 - Bold');\n      input.open().keypress('DownArrow').keypress('DownArrow').keypress('DownArrow');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /700|bold/);\n      });\n      cy.step('UpArrow to 400 - Normal');\n      input.keypress('UpArrow').keypress('UpArrow').keypress('UpArrow');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /400|normal/);\n      });\n      input.keypress('Enter'); // after pressing Enter we expect the UI to still be Local and one item\n      // in the Undo stack\n\n      input.assertClosed();\n      input.assertValue('400 - Normal');\n      label.verifyOrigin('Local');\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'fontWeight').and('match', /400|normal/);\n      });\n      cy.step('Undo font weight change via ctrl-z keyboard entry');\n      cy.get('body').click().type('{ctrl}z'); // one undo will reset the value to 400 - Normal (default) and not the in-between views\n\n      input.assertValue('400 - Normal');\n      label.verifyOrigin('Default');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2179,"startedAt":"2021-01-12T13:43:08.732Z","screenshots":[]}]},{"title":["Style Panel Typography: ","Color","Can change the hex value"],"state":"passed","body":"function () {\n      var _stylesTab$properties11 = stylesTab.properties.color,\n          input = _stylesTab$properties11.input,\n          label = _stylesTab$properties11.label;\n      input.openPicker().setHex('#bada55').close();\n      canvas.within(function () {\n        cy.get('.style-div').should('have.css', 'color').and('match', /rgb\\(186, 218, 85\\)|#bada55/);\n      });\n      label.resetOrigin();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1678,"startedAt":"2021-01-12T13:43:10.913Z","screenshots":[]}]},{"title":["Style Panel Typography: ","columns","Can be defined"],"state":"passed","body":"function () {\n      stylesTab.properties.textColumns.input.value.type(\"10{enter}\", {\n        force: true\n      });\n      stylesTab.properties.textColumns.input.value.clickUnit().clickOption(\"AUTO\");\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":682,"startedAt":"2021-01-12T13:43:12.593Z","screenshots":[]}]},{"title":["Style Panel Typography: ","columns","Properties","Can be defined"],"state":"passed","body":"function () {\n        stylesTab.properties.textColumns.input.value.type(\"10{enter}\", {\n          force: true\n        });\n        var props = stylesTab.properties.textColumns.input.clickPropertiesButton();\n        props.gap.unitInput.type('10px{enter}');\n        props.divider.style.clickOption('No rule');\n        props.divider.style.clickOption('Solid');\n        props.divider.style.clickOption('Dashed');\n        props.divider.style.clickOption('Dotted');\n        props.divider.gap.unitInput.type('10px{enter}');\n        var picker = props.divider.color.openPicker();\n        picker.setAlpha(0.5);\n        picker.close();\n        props.close();\n      }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3389,"startedAt":"2021-01-12T13:43:13.277Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/styles/typography.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/styles/typography.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/styles/typography.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":2,"passes":2,"pending":0,"skipped":0,"failures":0,"duration":23173,"startedAt":"2021-01-12T13:43:24.524Z","endedAt":"2021-01-12T13:43:47.697Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":2,"passes":2,"pending":0,"failures":0,"start":"2021-01-12T13:43:24.527Z","end":"2021-01-12T13:43:47.710Z","duration":23183},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    var workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.legacyStylePanel);\n\n    stylesTab = workspace.getRightPanel().getStylesTab();\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Style Panel Undo Redo:","can undo 2 subsequent margin changes on 2 elements"],"state":"passed","body":"function () {\n    canvas.selectElement('body');\n    stylesTab.properties.margin.input.left.openEditor().valueInput.unitInput.type('100px{enter}');\n    canvas.selectElement('body').should('have.css', 'margin-left', '100px');\n    canvas.selectElement('.style-div');\n    stylesTab.properties.margin.input.left.openEditor().valueInput.unitInput.type('100px{enter}');\n    canvas.selectElement('.style-div').should('have.css', 'margin-left', '100px');\n    cy.get('body').type('{ctrl}z');\n    canvas.selectElement('.style-div').should('have.css', 'margin-left', '0px');\n    canvas.selectElement('body').should('have.css', 'margin-left', '100px');\n    cy.get('body').type('{ctrl}z');\n    canvas.selectElement('.style-div').should('have.css', 'margin-left', '0px');\n    canvas.selectElement('body').should('have.css', 'margin-left', '0px');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":16149,"startedAt":"2021-01-12T13:43:29.713Z","screenshots":[]}]},{"title":["Style Panel Undo Redo:","should only record final value when dragging the margin slider"],"state":"passed","body":"function () {\n    canvas.selectElement('.style-div');\n    stylesTab.properties.margin.input.left.openEditor();\n    canvas.selectElement('.style-div').should('have.css', 'margin-left', '0px');\n    var dragger = (0, _cypressAppControls.startDrag)(function () {\n      return cy.get(_cypressAppControls.GetElement.byAutomationId('style-panel-presets-slider-knob')).eq(0);\n    });\n    dragger.relativeTranslate({\n      x: 5\n    }, 5);\n    dragger.stop();\n    canvas.selectElement('.style-div').should('have.css', 'margin-left').and('not.eq', '0px');\n    cy.get('body').type('{ctrl}z');\n    canvas.selectElement('.style-div').should('have.css', 'margin-left', '0px');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1815,"startedAt":"2021-01-12T13:43:45.881Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/styles/undo-redo.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/styles/undo-redo.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/styles/undo-redo.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":32422,"startedAt":"2021-01-12T13:43:55.021Z","endedAt":"2021-01-12T13:44:27.443Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:43:55.024Z","end":"2021-01-12T13:44:27.448Z","duration":32424},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.designerSymbols);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Webflow Designer Symbols Test","Create symbols through UI"],"state":"passed","body":"function () {\n    canvas.selectElement('.cy-div');\n    cy.step('Create symbol');\n    var symbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n    symbol.getSymbolNameInput().clear().type('My Awesome Symbol');\n    symbol.clickSaveSymbolButton();\n    cy.step('Duplicate symbol through context menu');\n    cy.get('body').type('{esc}');\n    canvas.openContextMenu('.cy-div').clickOption('Duplicate');\n    workspace.escapeAllUiPanels();\n    cy.step('Verify there are 2 symbol instances on the page');\n    workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('My Awesome Symbol').should('have.text', '2 instances');\n    workspace.escapeAllUiPanels();\n    cy.step('Add heading to the symbol');\n    canvas.doubleClickElement('.cy-div');\n    workspace.getRightPanel().clickStylesTab();\n    workspace.getLeftSidebar().clickAddElementButton().clickBuiltinTab().clickOption('Heading');\n    workspace.getRightPanel().getStylesTab().selector.setClassNames(['cy-heading']);\n    workspace.escapeAllUiPanels();\n    cy.step('Verify that there are two instances of the button and heading');\n    canvas.within(function () {\n      cy.get('.cy-btn').should('have.length', 2);\n      cy.get('.cy-heading').should('have.length', 2);\n    });\n    workspace.escapeAllUiPanels();\n    cy.step('create new page and add symbol');\n    var newpage = workspace.getLeftSidebar().clickPagesTab().clickAddNewPageButton();\n    newpage.getName().type('New Page');\n    newpage.clickCreateButton();\n    workspace.getTopbar().getPageMenu().getPageName().should('contain', 'New Page');\n    workspace.getLeftSidebar().clickSymbolsButton().getSymbolByName('My Awesome Symbol').click();\n    workspace.escapeAllUiPanels();\n    cy.step('Verify there are 3 symbol instances on the page');\n    workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('My Awesome Symbol').should('have.text', '3 instances');\n    workspace.escapeAllUiPanels();\n    cy.step('undo symbol add and verify instance number to be 2');\n    workspace.undo();\n    workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('My Awesome Symbol').should('have.text', '2 instances');\n    workspace.escapeAllUiPanels();\n    cy.step('rename symbol');\n    var symbolsTab = workspace.getLeftSidebar().clickSymbolsButton();\n    cy.step('Edit \"My Awesome Symbol\" name');\n    var editSymbol = symbolsTab.editSymbol('my-awesome-symbol');\n    cy.step('Set name new name');\n    editSymbol.input().clear().type('My Awesome New Symbol');\n    cy.step('Save symbol');\n    editSymbol.save();\n    symbolsTab.getSymbolInstanceCount('My Awesome New Symbol').should('have.text', '2 instances');\n    cy.step('Go back to Home page');\n    var pages = workspace.getLeftSidebar().clickPagesTab();\n    pages.switchPage('Home');\n    cy.step('Remove the 2 symbol instances');\n    canvas.selectElement('.cy-div');\n    canvas.deleteElement();\n    canvas.selectElement('.cy-div');\n    canvas.deleteElement();\n    workspace.getLeftSidebar().clickSymbolsButton();\n    cy.step('Check there are 0 instances of the symbol');\n    symbolsTab.getSymbolInstanceCount('My Awesome New Symbol').should('have.text', '0 instances');\n    cy.step('Delete symbol');\n    symbolsTab.editSymbol('my-awesome-new-symbol')[\"delete\"]();\n    cy.get(\"[data-automation-id=\\\"delete\\\"]\").click();\n    cy.step('Check the symbol no longer exists');\n    symbolsTab.getSymbolInstanceCount('My Awesome New Symbol').should('not.exist');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":27535,"startedAt":"2021-01-12T13:43:59.905Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/designer-symbols.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/designer-symbols.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/designer-symbols.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":18018,"startedAt":"2021-01-12T13:44:34.447Z","endedAt":"2021-01-12T13:44:52.465Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:44:34.449Z","end":"2021-01-12T13:44:52.517Z","duration":18068},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.nestedSymbols);\n    cy.step('Enable isolation edit mode beta');\n\n    _cypressAppControls.BetaUtils.enableBeta('isolatedSymbolEditMode');\n\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Edit Modes","default: in-context mode (non-nested)"],"state":"passed","body":"function () {\n    cy.step('Edit outer symbol');\n    canvas.editSymbol(symbolTag);\n    cy.step('Assert in-context mode is enabled');\n    var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n    symbolEditMode.getNode().should('contain', 'In-context');\n    cy.step('Open symbol edit mode dropdown');\n    var symbolEditModeDropdown = symbolEditMode.click();\n    cy.step('Assert dropdown is visible');\n    symbolEditModeDropdown.getNode().should('be.visible');\n    cy.step('Assert \"In-context\" is currently selected');\n    symbolEditModeDropdown.getOption('inContext').isActive();\n    cy.step('Choose Isolation Mode');\n    symbolEditModeDropdown.getOption('inIsolation').click();\n    cy.step('Assert that the mode changed to SAM');\n    symbolEditMode.getNode().should('contain', 'In-isolation');\n    cy.step('Assert that the size handle is visible on the canvas'); // TODO: Create API for that\n\n    canvas.within(function () {\n      cy.get('[data-resize-handle=\"true\"]').should('exist');\n    });\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":12899,"startedAt":"2021-01-12T13:44:39.563Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-nonnested.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-nonnested.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-nonnested.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":5,"tests":18,"passes":18,"pending":0,"skipped":0,"failures":0,"duration":60324,"startedAt":"2021-01-12T13:45:00.186Z","endedAt":"2021-01-12T13:46:00.510Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":5,"tests":18,"passes":18,"pending":0,"failures":0,"start":"2021-01-12T13:45:00.188Z","end":"2021-01-12T13:46:00.536Z","duration":60348},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = common.before(); // FIXME: Remove this once we go public: https://app.clickup.com/t/2310520/COMP-448\n\n    cy.step('Enable Isolation Mode');\n\n    _cypressAppControls.BetaUtils.enableBeta('isolatedSymbolEditMode');\n\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","layout","section is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17430,"startedAt":"2021-01-12T13:45:05.214Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","layout","container is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1998,"startedAt":"2021-01-12T13:45:22.659Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","layout","grid is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1497,"startedAt":"2021-01-12T13:45:24.658Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","layout","row is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1695,"startedAt":"2021-01-12T13:45:26.157Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","basic","div is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1791,"startedAt":"2021-01-12T13:45:27.855Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","basic","linkBlock is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2368,"startedAt":"2021-01-12T13:45:29.648Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","basic","button is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2330,"startedAt":"2021-01-12T13:45:32.018Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","basic","list is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1771,"startedAt":"2021-01-12T13:45:34.349Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","basic","listItem is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1911,"startedAt":"2021-01-12T13:45:36.123Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","heading is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1681,"startedAt":"2021-01-12T13:45:38.035Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","paragraph is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1897,"startedAt":"2021-01-12T13:45:39.717Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","textLink is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1897,"startedAt":"2021-01-12T13:45:41.616Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","textBlock is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2754,"startedAt":"2021-01-12T13:45:43.515Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","blockquote is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3039,"startedAt":"2021-01-12T13:45:46.270Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","typography","richText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2852,"startedAt":"2021-01-12T13:45:49.310Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","media","image is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3530,"startedAt":"2021-01-12T13:45:52.169Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","media","video is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1908,"startedAt":"2021-01-12T13:45:55.703Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Layout, Basic, Typography, Media","media","youtube is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n            cy.step('Press back to instance button');\n            topbar.clickBackToSymbolInstanceButton();\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2897,"startedAt":"2021-01-12T13:45:57.612Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-01.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-01.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-01.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":2,"tests":11,"passes":11,"pending":0,"skipped":0,"failures":0,"duration":43140,"startedAt":"2021-01-12T13:46:07.765Z","endedAt":"2021-01-12T13:46:50.905Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":2,"tests":11,"passes":11,"pending":0,"failures":0,"start":"2021-01-12T13:46:07.767Z","end":"2021-01-12T13:46:50.925Z","duration":43158},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = common.before(); // FIXME: Remove this once we go public: https://app.clickup.com/t/2310520/COMP-448\n\n    cy.step('Enable Isolation Mode');\n\n    _cypressAppControls.BetaUtils.enableBeta('isolatedSymbolEditMode');\n\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Isolation Mode Rendering Test - Forms","forms","formBlock is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17175,"startedAt":"2021-01-12T13:46:12.910Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","label is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1446,"startedAt":"2021-01-12T13:46:30.099Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","inputText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1758,"startedAt":"2021-01-12T13:46:31.547Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","fileUpload is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2336,"startedAt":"2021-01-12T13:46:33.306Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","textarea is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1507,"startedAt":"2021-01-12T13:46:35.648Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","checkboxField is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1726,"startedAt":"2021-01-12T13:46:37.156Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","radioButtonField is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2154,"startedAt":"2021-01-12T13:46:38.883Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","recaptcha is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2396,"startedAt":"2021-01-12T13:46:41.041Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","submit is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2447,"startedAt":"2021-01-12T13:46:43.439Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","formSuccessText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1773,"startedAt":"2021-01-12T13:46:45.887Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Forms","forms","formErrorText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            });\n\n            if (itemIndex !== 0) {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3240,"startedAt":"2021-01-12T13:46:47.661Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-02.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-02.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-02.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":2,"tests":23,"passes":23,"pending":0,"skipped":0,"failures":0,"duration":76066,"startedAt":"2021-01-12T13:46:58.214Z","endedAt":"2021-01-12T13:48:14.280Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":2,"tests":23,"passes":23,"pending":0,"failures":0,"start":"2021-01-12T13:46:58.232Z","end":"2021-01-12T13:48:14.306Z","duration":76074},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    workspace = common.before(); // FIXME: Remove this once we go public: https://app.clickup.com/t/2310520/COMP-448\n\n    cy.step('Enable Isolation Mode');\n\n    _cypressAppControls.BetaUtils.enableBeta('isolatedSymbolEditMode');\n\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get TopBar');\n    topbar = workspace.getTopbar();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Isolation Mode Rendering Test - Components","components","search is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":17569,"startedAt":"2021-01-12T13:47:03.441Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","tabs is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2199,"startedAt":"2021-01-12T13:47:21.031Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","tabLinkText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2077,"startedAt":"2021-01-12T13:47:23.231Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","navbar is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1847,"startedAt":"2021-01-12T13:47:25.309Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","navbarContainer is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1919,"startedAt":"2021-01-12T13:47:27.158Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","brand is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2002,"startedAt":"2021-01-12T13:47:29.078Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","navMenu is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1724,"startedAt":"2021-01-12T13:47:31.082Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","navLink is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1780,"startedAt":"2021-01-12T13:47:32.808Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","menuButton is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1638,"startedAt":"2021-01-12T13:47:34.590Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","navbarIcon is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2870,"startedAt":"2021-01-12T13:47:36.231Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","dropdown is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2588,"startedAt":"2021-01-12T13:47:39.102Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","dropdownIcon is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2555,"startedAt":"2021-01-12T13:47:41.696Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","dropdownText is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1812,"startedAt":"2021-01-12T13:47:44.255Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","dropdownLink is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2381,"startedAt":"2021-01-12T13:47:46.068Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","slider is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1969,"startedAt":"2021-01-12T13:47:48.450Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","leftArrowIcon is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2517,"startedAt":"2021-01-12T13:47:50.420Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","lightboxLink is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1952,"startedAt":"2021-01-12T13:47:52.941Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","lightboxImage is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3821,"startedAt":"2021-01-12T13:47:54.894Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","map is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3030,"startedAt":"2021-01-12T13:47:58.722Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","backgroundVideo is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4244,"startedAt":"2021-01-12T13:48:01.753Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","facebook is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2948,"startedAt":"2021-01-12T13:48:06.001Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","twitter is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2844,"startedAt":"2021-01-12T13:48:08.950Z","screenshots":[]}]},{"title":["Isolation Mode Rendering Test - Components","components","embed is rendered in Isolation Mode"],"state":"passed","body":"function () {\n            cy.step(\"Create \".concat(item.name, \" component\"));\n            workspace.getCanvas().selectElement(\".\".concat(item[\"class\"]));\n            var symbols = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n            symbols.getSymbolNameInput().clear().type(\"\".concat(item.name, \" component\"));\n            symbols.clickSaveSymbolButton(); // For the first time it runs, we need to set the symbol node to \"In-isolation\"\n\n            if (sectionIndex === 0 && itemIndex === 0) {\n              cy.step('Assert in-context mode is enabled');\n              var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n              symbolEditMode.getNode().should('contain', 'In-context');\n              cy.step('Open symbol edit mode dropdown');\n              var symbolEditModeDropdown = symbolEditMode.click();\n              cy.step('Assert dropdown is visible');\n              symbolEditModeDropdown.getNode().should('be.visible');\n              cy.step('Assert \"In-context\" is currently selected');\n              symbolEditModeDropdown.getOption('inContext').isActive();\n              cy.step('Choose Isolation Mode');\n              symbolEditModeDropdown.getOption('inIsolation').click();\n              cy.step('Assert that the mode changed to Isolation Mode');\n              symbolEditMode.getNode().should('contain', 'In-isolation');\n            }\n\n            cy.step(\"Assert \".concat(item.name, \" is in the canvas\"));\n            canvas.within(function () {\n              cy.get(\".\".concat(item[\"class\"])).should('have.length', 1);\n            });\n            cy.step('Assert isolated-mode container is displayed');\n            canvas.within(function () {\n              cy.get('[data-automation-id=\"isolated-mode-container\"]').should('exist');\n            }); // Depending on the component we need to keep the instance focused or not\n\n            if (item.name !== 'tabs' && item.name !== 'navbar' && item.name !== 'navbarContainer' && item.name !== 'navMenu' && item.name !== 'menuButton' && item.name !== 'dropdown' && item.name !== 'slider' && item.name !== 'lightboxLink') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'tabLinkText' || item.name === 'navbarIcon' || item.name === 'navLink' || item.name === 'navbarIcon' || item.name === 'dropdownLink' || item.name === 'leftArrowIcon' || item.name === 'lightboxImage') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n\n            if (item.name === 'navbarIcon') {\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n              cy.step('Press back to instance button');\n              topbar.clickBackToSymbolInstanceButton();\n            }\n          }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2484,"startedAt":"2021-01-12T13:48:11.795Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-03.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-03.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-rendering-03.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":1,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":23720,"startedAt":"2021-01-12T13:48:21.314Z","endedAt":"2021-01-12T13:48:45.034Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":1,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2021-01-12T13:48:21.316Z","end":"2021-01-12T13:48:45.080Z","duration":23764},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.nestedSymbols);\n    cy.step('Enable isolation edit mode beta');\n\n    _cypressAppControls.BetaUtils.enableBeta('isolatedSymbolEditMode');\n\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get style panel');\n    stylesTab = workspace.getRightPanel().getStylesTab();\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n    workspace.escapeAllUiPanels();\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Symbol Isolation Mode & Style Rule Selector","Classes added on elements inside nested symbol in Isolation Mode should be shown in Style Rule Selector"],"state":"passed","body":"function () {\n    cy.step('Edit parent symbol');\n    canvas.editSymbol(symbolTag);\n    cy.step('Switch to Isolation Mode');\n    var symbolEditMode = workspace.getTopbar().getSymbolEditModeMenu();\n    symbolEditMode.click().getOption('inIsolation').click();\n    cy.step('Edit #inner-1 symbol');\n    canvas.editSymbol(\"\".concat(symbolTag, \" #inner-1\"));\n    cy.step('Select heading element inside #inner-1 symbol');\n    canvas.selectElement(\"#inner-1 h3\");\n    cy.step('Set class name by typing');\n    stylesTab.selector.setClassNames(['test']);\n    cy.step('Check that class name is preserved after setting');\n    stylesTab.selector.getClassNames().should('deep.eq', ['test']);\n    cy.step('Select link lement inside #inner-1 symbol');\n    canvas.selectElement(\"#inner-1 a\");\n    cy.step('Change styles of link element');\n    cy.step('Set padding left equal to 20px on Desktop breakpoint');\n    var leftEditor = stylesTab.properties.padding.input.left.openEditor();\n    leftEditor.valueInput.unitInput.clear().type('20px{enter}');\n    cy.step('Check that class name was created and it is shown in Style Rule Selector');\n    stylesTab.selector.getClassNames().should('deep.eq', ['Link']);\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":18636,"startedAt":"2021-01-12T13:48:26.396Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-style-rule-selector.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-style-rule-selector.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/isolated-mode/symbols-isolation-style-rule-selector.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":3,"tests":6,"passes":6,"pending":0,"skipped":0,"failures":0,"duration":25685,"startedAt":"2021-01-12T13:48:52.628Z","endedAt":"2021-01-12T13:49:18.313Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":3,"tests":6,"passes":6,"pending":0,"failures":0,"start":"2021-01-12T13:48:52.634Z","end":"2021-01-12T13:49:18.412Z","duration":25778},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.nestedSymbols);\n  }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Webflow Navigator Symbols Test","When expanding all/collapsing all in the navigator nested component remain focused","1st level symbol"],"state":"passed","body":"function () {\n      cy.step('Select 1st level symbol in the Navigator');\n      navigator = workspace.getLeftSidebar().clickNavigatorButton();\n      navigator.getNode().should('be.visible');\n      navigator.findNode('master-5-symbol').dblclick();\n      cy.step('Assert topbar shows symbol name');\n      pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-5-symbol');\n      cy.step('Collapse all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-5-symbol');\n      cy.step('Expand all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-5-symbol');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":14410,"startedAt":"2021-01-12T13:48:57.678Z","screenshots":[]}]},{"title":["Webflow Navigator Symbols Test","When expanding all/collapsing all in the navigator nested component remain focused","2nd level symbol"],"state":"passed","body":"function () {\n      cy.step('Select 2nd level symbol in the Navigator');\n      navigator.findNode('5-inner-3').dblclick();\n      cy.step('Assert topbar shows symbol name');\n      pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', '5-inner-3');\n      cy.step('Collapse all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', '5-inner-3');\n      cy.step('Expand all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', '5-inner-3');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1220,"startedAt":"2021-01-12T13:49:12.103Z","screenshots":[]}]},{"title":["Webflow Navigator Symbols Test","When expanding all/collapsing all in the navigator nested component remain focused","3rd level symbol"],"state":"passed","body":"function () {\n      cy.step('Select 3rd level symbol in the Navigator');\n      navigator.findNode('double-nested-symbol').dblclick();\n      cy.step('Assert topbar shows symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', 'double-nested-symbol');\n      cy.step('Collapse all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'double-nested-symbol');\n      cy.step('Expand all navigator');\n      navigator.getExpandCollapseButton().click();\n      cy.step('Assert symbol remain focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'double-nested-symbol');\n      cy.step('Unfocus symbols');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2100,"startedAt":"2021-01-12T13:49:13.324Z","screenshots":[]}]},{"title":["Webflow Navigator Symbols Test","Correct elements labels are shown on expand/collapse nested components","1st level symbol"],"state":"passed","body":"function () {\n      cy.step('Assert symbol children are not displayed in the navigator when it is not focused');\n      navigator.getNode().should('be.visible');\n      navigator.findNode('5-inner-1').should('not.exist');\n      navigator.findNode('5-inner-2').should('not.exist');\n      navigator.findNode('5-inner-3').should('not.exist');\n      cy.step('Select 1st level symbol in the Navigator');\n      navigator.findNode('master-5-symbol').dblclick();\n      cy.step('Assert symbol is focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-5-symbol');\n      cy.step('Assert symbol children are displayed in the navigator when it is focused');\n      navigator.findNode('5-inner-1').should('be.visible');\n      navigator.findNode('5-inner-2').should('be.visible');\n      navigator.findNode('5-inner-3').should('be.visible');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":896,"startedAt":"2021-01-12T13:49:15.426Z","screenshots":[]}]},{"title":["Webflow Navigator Symbols Test","Correct elements labels are shown on expand/collapse nested components","2nd level symbol"],"state":"passed","body":"function () {\n      cy.step('Assert symbol children are not displayed in the navigator when it is not focused');\n      navigator.findNode('double-nested-symbol').should('not.exist');\n      cy.step('Select 2nd level symbol in the Navigator');\n      navigator.findNode('5-inner-3').dblclick();\n      cy.step('Assert symbol is focused');\n      pageMenu.getCurrentSymbolName().should('have.text', '5-inner-3');\n      cy.step('Assert symbol children are displayed in the navigator when it is focused');\n      navigator.findNode('double-nested-symbol').should('be.visible');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":832,"startedAt":"2021-01-12T13:49:16.324Z","screenshots":[]}]},{"title":["Webflow Navigator Symbols Test","Correct elements labels are shown on expand/collapse nested components","3rd level symbol"],"state":"passed","body":"function () {\n      cy.step('Assert symbol children are not displayed in the navigator when it is not focused');\n      navigator.getNodesTree().find('div:contains(Heading 3)').should('have.length', 20);\n      cy.step('Select 3rd level symbol in the Navigator');\n      navigator.findNode('double-nested-symbol').dblclick();\n      cy.step('Assert symbol is focused');\n      pageMenu.getCurrentSymbolName().should('have.text', 'double-nested-symbol');\n      cy.step('Assert symbol children are displayed in the navigator when it is focused');\n      navigator.getNodesTree().find('div:contains(Heading 3)').should('have.length', 25);\n      cy.step('Unfocus symbols');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      cy.step('Assert symbol children are not displayed in the navigator when it is not focused');\n      navigator.getNodesTree().find('div:contains(Heading 3)').should('have.length', 20);\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1154,"startedAt":"2021-01-12T13:49:17.157Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/navigator-symbols.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/navigator-symbols.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/navigator-symbols.spec.js","specType":"integration"},"shouldUploadVideo":false},{"stats":{"suites":9,"tests":22,"passes":22,"pending":0,"skipped":0,"failures":0,"duration":56549,"startedAt":"2021-01-12T13:49:25.835Z","endedAt":"2021-01-12T13:50:22.384Z"},"reporter":"../../../node_modules/cypress-multi-reporters","reporterStats":{"suites":9,"tests":22,"passes":22,"pending":0,"failures":0,"start":"2021-01-12T13:49:25.841Z","end":"2021-01-12T13:50:22.389Z","duration":56548},"hooks":[{"hookName":"before all","title":["\"before all\" hook: loadSnapshots"],"body":"function loadSnapshots () {\n    cy\n    .readFile(SNAPSHOT_FILENAME, 'utf-8', { log: false })\n    .then(evaluateLoadedSnapShots)\n    // no way to catch an error yet\n  }"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n  // Unit tests do not require registration\n  if (!Cypress.env('unit')) {\n    _cypressAppControls.api.registerDefaultUserIfNeeded();\n  }\n}"},{"hookName":"before all","title":["\"before all\" hook"],"body":"function () {\n    cy.step('Import snapshot');\n    workspace = _cypressAppControls.api.importSnapshot(_cypressAppControls.snapshots.nestedSymbols);\n    cy.step('Get canvas');\n    canvas = workspace.getCanvas();\n    cy.step('Get Topbar');\n    topbar = workspace.getTopbar();\n    cy.step('Get Finder');\n    finder = workspace.getFinder();\n    cy.step('Click Properties Tab');\n    propertiesTab = workspace.getRightPanel().clickPropertiesTab();\n  }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      canvas.editSymbol(symbolTag);\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner\"));\n      canvas.deleteElement();\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n    }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function () {\n      workspace.escapeAllUiPanels();\n    }"},{"hookName":"after all","title":["\"after all\" hook: saveSnapshots"],"body":"function saveSnapshots () {\n    if (storeSnapshot) {\n      const snapshots = storeSnapshot()\n      console.log('%d snapshot(s) on finish', countSnapshots(snapshots))\n      console.log(snapshots)\n\n      snapshots.__version = Cypress.version\n      const s = JSON.stringify(snapshots, null, 2)\n      const str = `module.exports = ${s}\\n`\n      cy.writeFile(SNAPSHOT_FILENAME, str, 'utf-8', { log: false })\n    }\n  }"}],"tests":[{"title":["Nested Symbols - 01","Create symbol inside another symbol from symbol panel","creates an outer symbol (parent)"],"state":"passed","body":"function () {\n      cy.step('Select outer symbol parent');\n      canvas.selectElement(\"\".concat(symbolTag, \" #outer\"));\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-outer\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n      cy.step('Assert symbol is created and in edit mode.');\n      propertiesTab.symbolMasterSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"\".concat(symbolId, \"-outer\"));\n      cy.step('Exit out of the symbol');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":14255,"startedAt":"2021-01-12T13:49:30.934Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Create symbol inside another symbol from symbol panel","creates an inner symbol (nested)"],"state":"passed","body":"function () {\n      cy.step('Select and edit outer symbol');\n      canvas.editSymbol(\"\".concat(symbolTag, \" #outer\"));\n      cy.step('Select inner element');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner\"));\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-inner\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n      cy.step('Assert symbol is created and in edit mode.');\n      propertiesTab.symbolMasterSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"\".concat(symbolId, \"-inner\"));\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2284,"startedAt":"2021-01-12T13:49:45.203Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Create symbol around another symbol from symbol panel and test unlinking","creates an inner symbol"],"state":"passed","body":"function () {\n      cy.step('Select inner element');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner\"));\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-inner\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n      cy.step('Assert symbol is created and in edit mode.');\n      propertiesTab.symbolMasterSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"\".concat(symbolId, \"-inner\"));\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1567,"startedAt":"2021-01-12T13:49:47.490Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Create symbol around another symbol from symbol panel and test unlinking","creates an outer symbol (parent)"],"state":"passed","body":"function () {\n      cy.step('Select #outer element');\n      canvas.selectElement(\"\".concat(symbolTag, \" #outer\"));\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-outer\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n      cy.step('Assert symbol is created and in edit mode.');\n      propertiesTab.symbolMasterSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"\".concat(symbolId, \"-outer\"));\n      cy.step('Exit out of the symbol');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1676,"startedAt":"2021-01-12T13:49:49.058Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Create symbol around another symbol from symbol panel and test unlinking","unlink parent symbol"],"state":"passed","body":"function () {\n      cy.step('Right click #outer element to open Context Menu');\n      var contextMenu = canvas.openContextMenu(\"\".concat(symbolTag, \" #outer\"));\n      cy.step('Unlink the symbol');\n      contextMenu.clickOption('Unlink Instance').close();\n      cy.step('Assert that Master Settings do not exist');\n      propertiesTab.symbolMasterSettings.getNode().should('not.exist');\n      cy.step('Close all ui elements');\n      workspace.escapeAllUiPanels();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":916,"startedAt":"2021-01-12T13:49:50.735Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Add predefined symbol to an existing symbol","with symbol panel"],"state":"passed","body":"function () {\n      cy.step('Edit symbol');\n      canvas.editSymbol(\"\".concat(symbolTag));\n      cy.step('Select button inside the outer symbol');\n      canvas.selectElement(\"\".concat(symbolTag, \" #outer-link\"));\n      cy.step('Add predefined-innersymbol from the symbol panel');\n      workspace.getLeftSidebar().clickSymbolsButton().getSymbolByName('predefined-innersymbol').click();\n      cy.step('Assert symbol is added and in edit mode of the outer symbol');\n      propertiesTab.symbolInstanceSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"predefined-outersymbol\");\n      cy.step('Exit out of the symbol');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      cy.step('Assert the inner symbol exists on the canvas');\n      canvas.within(function () {\n        cy.get(\"\".concat(symbolTag, \" #inner\")).should('be.visible');\n        cy.get(\"\".concat(symbolTag, \" #inner h3\")).should('be.visible');\n        cy.get(\"\".concat(symbolTag, \" #inner #inner-link\")).should('be.visible');\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":3034,"startedAt":"2021-01-12T13:49:51.652Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Add predefined symbol to an existing symbol","with quick find / finder"],"state":"passed","body":"function () {\n      cy.step('Edit symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Select button inside the outer symbol');\n      canvas.selectElement(\"\".concat(symbolTag, \" #outer-link\"));\n      cy.step('Add predefined-innersymbol from the quick find / finder');\n      finder.open();\n      finder.getInput().type('predefined-innersymbol{enter}');\n      cy.step('Assert symbol is added and in edit mode of the outer symbol');\n      propertiesTab.symbolInstanceSettings.getNode().should('be.visible');\n      workspace.getTopbar().getPageMenu().getCurrentSymbolName().should('contain', \"predefined-outersymbol\");\n      cy.step('Exit out of the symbol');\n      workspace.getTopbar().clickBackToSymbolInstanceButton();\n      cy.step('Assert the inner symbol exists on the canvas');\n      canvas.within(function () {\n        cy.get(\"\".concat(symbolTag, \" #inner\")).should('be.visible');\n        cy.get(\"\".concat(symbolTag, \" #inner h3\")).should('be.visible');\n        cy.get(\"\".concat(symbolTag, \" #inner #inner-link\")).should('be.visible');\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":4267,"startedAt":"2021-01-12T13:49:54.687Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Symbol Management","Rename Nested Symbol Master"],"state":"passed","body":"function () {\n      cy.step('Select first #inner symbol');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner\"), 1);\n      cy.step('Open Symbols Panel');\n      var symbolsTab = workspace.getLeftSidebar().clickSymbolsButton();\n      cy.step('Edit \"master-4-inner\" settings');\n      var editSymbol = symbolsTab.editSymbol('master-4-inner');\n      cy.step('Set name to \"inner symbol\"');\n      editSymbol.input().clear().type('inner symbol');\n      cy.step('Save symbol');\n      editSymbol.save();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2072,"startedAt":"2021-01-12T13:49:58.963Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Symbol Management","Duplicate Outer Symbol and check symbols count"],"state":"passed","body":"function () {\n      var symbolsTab;\n      cy.step('Open Symbols Panel');\n      symbolsTab = workspace.getLeftSidebar().clickSymbolsButton();\n      cy.step('Assert there is one \"master-4-symbol\" symbol');\n      symbolsTab.getSymbolInstanceCount('master-4-symbol').should('have.text', '1 instance');\n      cy.step('Assert there are two \"master-4-inner\" symbol');\n      symbolsTab.getSymbolInstanceCount('inner-symbol').should('have.text', '4 instances');\n      cy.step('Close all open UIs');\n      workspace.escapeAllUiPanels();\n      cy.step('Open Context Menu for outer symbol');\n      var contextMenu = canvas.openContextMenu(\"\".concat(symbolTag, \" #inner\"));\n      cy.step('Duplicate symbol');\n      contextMenu.clickOption('Duplicate').close();\n      cy.step('Assert the second symbol exists on the canvas');\n      canvas.within(function () {\n        cy.get(\"\".concat(symbolTag, \" #inner\")).should('have.length', 4);\n      });\n      cy.step('Open Symbols Panel');\n      symbolsTab = workspace.getLeftSidebar().clickSymbolsButton();\n      cy.step('Assert there is one \"master-4-symbol\" symbol');\n      symbolsTab.getSymbolInstanceCount('master-4-symbol').should('have.text', '2 instances');\n      cy.step('Assert there are two \"inner-symbol\" symbol');\n      symbolsTab.getSymbolInstanceCount('inner-symbol').should('have.text', '6 instances');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1534,"startedAt":"2021-01-12T13:50:01.036Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Symbol Management","Remove empty symbol"],"state":"passed","body":"function () {\n      cy.step('Open Symbols Panel');\n      var symbolsTab = workspace.getLeftSidebar().clickSymbolsButton();\n      cy.step('Edit Main Symbol \"predefined-innersymbol\"');\n      var editSymbol = symbolsTab.editSymbol('predefined-innersymbol');\n      cy.step('Remove the symbol (and confirm)');\n      editSymbol[\"delete\"]().confirm();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1360,"startedAt":"2021-01-12T13:50:02.571Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Remove nested component","Unlink nested symbol via context menu"],"state":"passed","body":"function () {\n      cy.step('Edit symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Select #inner-1 symbol');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner-1\"));\n      cy.step('Open Context Menu for the #inner-1 symbol');\n      var contextMenu = canvas.openContextMenu(\"\".concat(symbolTag, \" #inner-1\"));\n      cy.step('Select option \"Unlink Instance\"');\n      contextMenu.clickOption('Unlink Instance').close();\n      cy.step('Assert in the symbols panel that there are no instances of symbol \"5-inner-1\"');\n      workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('5-inner-1').should('have.text', '0 instances');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":2271,"startedAt":"2021-01-12T13:50:03.933Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Remove nested component","Delete nested component with DEL key"],"state":"passed","body":"function () {\n      cy.step('Edit symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Select #inner-2 symbol');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner-2\"));\n      cy.step('Press BACKSPACE key on the keyboard to remove the element');\n      cy.get('body').type('{backspace}');\n      cy.step('Assert the #inner-2 symbol no longer exists on the canvas');\n      canvas.within(function () {\n        cy.get(\"\".concat(symbolTag, \" #inner-2\")).should('not.exist');\n      });\n      cy.step('Assert in the symbols panel that there are no instances of symbol \"5-inner-2\"');\n      workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('5-inner-2').should('have.text', '0 instances');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1873,"startedAt":"2021-01-12T13:50:06.206Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Remove nested component","Delete double nested component with DEL key"],"state":"passed","body":"function () {\n      cy.step('Edit symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit #inner-3 symbol');\n      canvas.editSymbol(\"\".concat(symbolTag, \" #inner-3\"));\n      cy.step('Select #inner-3-nested element');\n      canvas.selectElement(\"\".concat(symbolTag, \" #inner-3-nested\"));\n      cy.step('Press BACKSPACE key on the keyboard to remove the element');\n      cy.get('body').type('{backspace}');\n      cy.step('Assert the #inner-3-nested symbol no longer exists on the canvas');\n      canvas.within(function () {\n        cy.get(\"\".concat(symbolTag, \" #inner-3-nested\")).should('not.exist');\n      });\n      cy.step('Assert in the symbols panel taht there are no instances of symbol \"double-nested-symbol\"');\n      workspace.getLeftSidebar().clickSymbolsButton().getSymbolInstanceCount('double-nested-symbol').should('have.text', '0 instances');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1994,"startedAt":"2021-01-12T13:50:08.081Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Enter/exit master mode of nested component","enter: dbl-click nested component on canvas\nexit: onBlur - click outside of nested component"],"state":"passed","body":"function () {\n      var pageMenu = topbar.getPageMenu();\n      cy.step('Edit master symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit nested symbol');\n      canvas.doubleClickElement(\"\".concat(symbolTag, \" #inner\"));\n      cy.step('Assert topbar shows symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', '6-inner');\n      cy.step('Click outside of the nested symbol');\n      canvas.selectElement(symbolTag);\n      cy.step('Assert no symbol is in edit mode');\n      topbar.getBackToSymbolInstanceButton().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1101,"startedAt":"2021-01-12T13:50:10.076Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Enter/exit master mode of nested component","enter: via navigator\nexit: parent node in navigator"],"state":"passed","body":"function () {\n      cy.step('Edit master symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit nested symbol');\n      var navigator = workspace.getLeftSidebar().clickNavigatorButton();\n      navigator.getNode().should('be.visible');\n      navigator.findNode('6-inner').dblclick();\n      cy.step('Assert topbar shows symbol name');\n      var pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', '6-inner');\n      cy.step('Click parent node in navigator');\n      navigator.findNode('master6-parentcontainer').click();\n      cy.step('Assert topbar shows parent symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-6-symbol');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1011,"startedAt":"2021-01-12T13:50:11.178Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Enter/exit master mode of nested component","enter: via Edit button in node label\nexit: by pressing ESCAPE"],"state":"passed","body":"function () {\n      cy.step('Edit master symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit nested symbol');\n      canvas.editSymbolViaLabel(\"\".concat(symbolTag, \" #inner\"));\n      cy.step('Assert topbar shows inner symbol name');\n      var pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', '6-inner');\n      cy.step('Press ESCAPE to go back to parent symbol');\n      cy.get('body').type('{esc}');\n      cy.step('Assert topbar shows parent symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-6-symbol'); // The reason to press escape twice is because first ESC is going to go back\n      // to the root node of the symbol and only the next ESC would close\n      // symbol edit mode\n\n      cy.step('Press ESCAPE twice to quit current symbol');\n      cy.get('body').type('{esc}{esc}');\n      topbar.getBackToSymbolInstanceButton().should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1189,"startedAt":"2021-01-12T13:50:12.190Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Enter/exit master mode of nested component","enter: via Context Menu - Edit Main Symbol button\nexit: Back to instance button in Topbar"],"state":"passed","body":"function () {\n      cy.step('Edit master symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit nested symbol');\n      var contextMenu = canvas.openContextMenu(\"\".concat(symbolTag, \" #inner\"));\n      contextMenu.clickOption('Edit Main Symbol');\n      cy.step('Assert topbar shows inner symbol name');\n      var pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', '6-inner');\n      cy.step('Click back to instance button');\n      topbar.clickBackToSymbolInstanceButton();\n      cy.step('Assert topbar shows outer symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-6-symbol');\n      cy.step('Click back to instance button again');\n      topbar.clickBackToSymbolInstanceButton();\n      cy.step('Assert topbar no longer shows the symbol name and shows page name instead');\n      pageMenu.getCurrentSymbolName().should('not.exist');\n      pageMenu.getPageName().should('have.text', 'Home');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":894,"startedAt":"2021-01-12T13:50:13.380Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Enter/exit master mode of nested component","enter: via Context Menu - Edit Main Symbol button\nexit: Breadcrumbs parent nodes"],"state":"passed","body":"function () {\n      cy.step('Edit master symbol');\n      canvas.editSymbol(symbolTag);\n      cy.step('Edit nested symbol');\n      var contextMenu = canvas.openContextMenu(\"\".concat(symbolTag, \" #inner\"));\n      contextMenu.clickOption('Edit Main Symbol');\n      cy.step('Assert topbar shows inner symbol name');\n      var pageMenu = workspace.getTopbar().getPageMenu();\n      pageMenu.getCurrentSymbolName().should('have.text', '6-inner');\n      cy.step('Click on parent node in breadcrumbs');\n      var breadcrumbs = workspace.getBottomBar();\n      breadcrumbs.clickNodeByIndex(2);\n      cy.step('Assert topbar shows outer symbol name');\n      pageMenu.getCurrentSymbolName().should('have.text', 'master-6-symbol');\n      cy.step('Click on body node');\n      breadcrumbs.clickNodeByIndex(0);\n      cy.step('Assert topbar no longer shows the symbol name and shows page name instead');\n      pageMenu.getCurrentSymbolName().should('not.exist');\n      pageMenu.getPageName().should('have.text', 'Home');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1331,"startedAt":"2021-01-12T13:50:14.275Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Keep interactions when creating a nested symbol","creates an outer symbol (parent)"],"state":"passed","body":"function () {\n      cy.step('Select outer symbol parent');\n      canvas.selectElement(\"\".concat(symbolTag, \" #outer\"));\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-outer\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1765,"startedAt":"2021-01-12T13:50:15.608Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Keep interactions when creating a nested symbol","create an interaction on the inner element"],"state":"passed","body":"function () {\n      cy.step('Select inner element');\n      canvas.selectElement(innerElementTag);\n      var ix2Tab = workspace.getRightPanel().clickIX2Tab();\n      var menu = ix2Tab.clickAddElementTriggerButton();\n      menu.clickOption('MOUSE_CLICK_INTERACTION').getOnFirstClickSettings().action.click().clickOption('Flip left to right');\n      cy.step('Open the preview mode');\n      workspace.getTopbar().clickPreviewModeButton();\n      cy.step('Assert transform was added');\n      canvas.selectElement(innerElementTag).should('have.css', 'transform').and('not.eq', 'none');\n      cy.step('Close the preview mode');\n      workspace.getTopbar().clickPreviewModeButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1674,"startedAt":"2021-01-12T13:50:17.374Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Keep interactions when creating a nested symbol","creates an inner symbol (nested)"],"state":"passed","body":"function () {\n      cy.step('Create a symbol');\n      var newSymbol = workspace.getLeftSidebar().clickSymbolsButton().clickCreateSymbol();\n      cy.step('Type symbol name');\n      newSymbol.getSymbolNameInput().type(\"\".concat(symbolId, \"-inner\"));\n      cy.step('Click create symbol button');\n      newSymbol.clickSaveSymbolButton();\n      cy.step('Open the preview mode');\n      workspace.getTopbar().clickPreviewModeButton();\n      cy.step('Assert transform was added');\n      canvas.selectElement(innerElementTag).should('have.css', 'transform').and('not.eq', 'none');\n      workspace.getTopbar().clickPreviewModeButton();\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1811,"startedAt":"2021-01-12T13:50:19.049Z","screenshots":[]}]},{"title":["Nested Symbols - 01","Add a nested symbol outside of it's original parent symbol","adds inner symbol to the element outside of parent symbol"],"state":"passed","body":"function () {\n      cy.step('Select parent element to be used as insertion point');\n      canvas.selectElement(\"\".concat(symbolTag));\n      cy.step('Add inner symbol');\n      workspace.getLeftSidebar().clickSymbolsButton().getSymbolByName(\"\".concat(symbolId, \"-inner\")).click();\n      workspace.escapeAllUiPanels();\n      canvas.within(function () {\n        cy.get(symbolTag).find('#inner').should('have.length', 2);\n      });\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":null,"duration":1521,"startedAt":"2021-01-12T13:50:20.861Z","screenshots":[]}]}],"error":null,"video":null,"spec":{"name":"entrypoints/designer/client/ui-tests/symbols/nestability/nested-symbols.spec.js","relative":"../../../entrypoints/designer/client/ui-tests/symbols/nestability/nested-symbols.spec.js","absolute":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/entrypoints/designer/client/ui-tests/symbols/nestability/nested-symbols.spec.js","specType":"integration"},"shouldUploadVideo":false}],"browserPath":"/chromium64/chrome-linux/chrome","browserName":"chromium","browserVersion":"74.0.3729.0","osName":"linux","osVersion":"Debian - 9.13","cypressVersion":"6.2.1","config":{"env":{"baseUrl":"http://wfdev.io:3030","stagingSuperDomain":"dev.webflowtest.io","User-Agent":"cypress","RECORD_KEY":"f9ae3...c4cf9"},"integrationFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow","configFile":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/cypress.json","version":"6.2.1","chromeWebSecurity":false,"browser":"chromium","video":false,"videoUploadOnPasses":false,"viewportWidth":1440,"viewportHeight":900,"defaultCommandTimeout":30000,"numTestsKeptInMemory":0,"ignoreTestFiles":"*.quarantined.spec.js","testFiles":"**/*.spec.js","fileServerFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config","fixturesFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/fixtures","pluginsFile":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/plugins/index.js","screenshotsFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/screenshots","supportFile":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/support/index.js","videosFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/videos","retries":{"runMode":2,"openMode":0},"projectId":"xfhtj7","reporter":"../../../node_modules/cypress-multi-reporters","reporterOptions":{"configFile":"reporter-config.json"},"projectRoot":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config","projectName":"cypress-config","morgan":false,"isTextTerminal":true,"socketId":"ima88","report":true,"browsers":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"animationDistanceThreshold":5,"autoOpen":false,"baseUrl":null,"blockHosts":null,"clientRoute":"/__/","componentFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/cypress/component","execTimeout":60000,"experimentalComponentTesting":false,"experimentalFetchPolyfill":false,"experimentalRunEvents":false,"experimentalSourceRewriting":false,"firefoxGcInterval":{"runMode":1,"openMode":null},"hosts":null,"includeShadowDom":false,"javascripts":[],"modifyObstructiveCode":true,"namespace":"__cypress","nodeVersion":"default","pageLoadTimeout":60000,"port":44851,"reporterRoute":"/__cypress/reporter","requestTimeout":5000,"responseTimeout":30000,"screenshotOnRunFailure":true,"socketIoRoute":"/__socket.io","socketIoCookie":"__socket.io","taskTimeout":60000,"trashAssetsBeforeRuns":true,"userAgent":null,"videoCompression":32,"waitForAnimations":true,"scrollBehavior":"top","watchForFileChanges":false,"xhrRoute":"/xhrs/","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"baseUrl":{"value":null,"from":"default"},"blockHosts":{"value":null,"from":"default"},"browsers":{"value":[{"name":"chromium","family":"chromium","channel":"stable","displayName":"Chromium","version":"74.0.3729.0","path":"chromium","majorVersion":74},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"78.3.0esr","path":"firefox","majorVersion":78,"warning":"Your project has set the configuration option: `chromeWebSecurity: false`\n\nThis option will not have an effect in Firefox. Tests that rely on web security being disabled will not run as expected."},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"87.0.4280.88","path":"","majorVersion":87,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"from":"default"},"chromeWebSecurity":{"value":false,"from":"config"},"componentFolder":{"value":"cypress/component","from":"default"},"defaultCommandTimeout":{"value":30000,"from":"config"},"env":{"baseUrl":{"value":"http://wfdev.io:3030","from":"plugin"},"User-Agent":{"value":"cypress","from":"config"},"RECORD_KEY":{"value":"f9ae3...c4cf9","from":"env"},"stagingSuperDomain":{"value":"dev.webflowtest.io","from":"plugin"}},"execTimeout":{"value":60000,"from":"default"},"experimentalComponentTesting":{"value":false,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalRunEvents":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"fileServerFolder":{"value":"./","from":"config"},"firefoxGcInterval":{"value":{"runMode":1,"openMode":null},"from":"default"},"fixturesFolder":{"value":"./fixtures","from":"config"},"hosts":{"value":null,"from":"default"},"ignoreTestFiles":{"value":"*.quarantined.spec.js","from":"config"},"includeShadowDom":{"value":false,"from":"default"},"integrationFolder":{"value":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow","from":"plugin"},"modifyObstructiveCode":{"value":true,"from":"default"},"nodeVersion":{"value":"default","from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"pageLoadTimeout":{"value":60000,"from":"default"},"pluginsFile":{"value":"./plugins/index.js","from":"config"},"port":{"value":null,"from":"default"},"projectId":{"value":"xfhtj7","from":"config"},"reporter":{"value":"../../../node_modules/cypress-multi-reporters","from":"cli"},"reporterOptions":{"value":{"configFile":"reporter-config.json"},"from":"config"},"requestTimeout":{"value":5000,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":2,"openMode":0},"from":"config"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"./screenshots","from":"config"},"supportFile":{"value":"./support/index.js","from":"config"},"taskTimeout":{"value":60000,"from":"default"},"testFiles":{"value":"**/*.spec.js","from":"config"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":false,"from":"config"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"./videos","from":"config"},"videoUploadOnPasses":{"value":false,"from":"config"},"viewportHeight":{"value":900,"from":"config"},"viewportWidth":{"value":1440,"from":"config"},"waitForAnimations":{"value":true,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"configFile":{"value":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/cypress.json","from":"plugin"},"version":{"value":"6.2.1","from":"plugin"}},"parentTestsFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/cypress","parentTestsFolderDisplay":"cypress-config/cypress","supportFolder":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/support","integrationExampleName":"examples","integrationExamplePath":"/scratch/buildkite-agent-8ea6ae33-54da-11eb-97fa-4a22e55b2d68-rhhhk/webflow/webflow/packages/tooling/cypress-config/cypress/integration/examples","scaffoldedFiles":[{"name":"cypress","children":[{"name":"integration","children":[{"name":"examples","children":[{"name":"actions.spec.js"},{"name":"aliasing.spec.js"},{"name":"assertions.spec.js"},{"name":"connectors.spec.js"},{"name":"cookies.spec.js"},{"name":"cypress_api.spec.js"},{"name":"files.spec.js"},{"name":"local_storage.spec.js"},{"name":"location.spec.js"},{"name":"misc.spec.js"},{"name":"navigation.spec.js"},{"name":"network_requests.spec.js"},{"name":"querying.spec.js"},{"name":"spies_stubs_clocks.spec.js"},{"name":"traversal.spec.js"},{"name":"utilities.spec.js"},{"name":"viewport.spec.js"},{"name":"waiting.spec.js"},{"name":"window.spec.js"}]}]}]},{"name":"fixtures","children":[{"name":"example.json"}]},{"name":"support","children":[{"name":"commands.js"},{"name":"index.js"}]},{"name":"plugins","children":[{"name":"index.js"}]}],"resolvedNodeVersion":"12.18.3","state":{},"proxyUrl":"http://localhost:44851","browserUrl":"http://localhost:44851/__/","reporterUrl":"http://localhost:44851/__cypress/reporter","xhrUrl":"__cypress/xhrs/"},"status":"finished"}]